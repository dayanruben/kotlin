KtApplicableCallCandidateInfo:
  candidate = KtSimpleFunctionCall:
    isImplicitInvoke = true
    partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
      dispatchReceiver = KtExplicitReceiverValue:
        expression = Conflict
        isSafeNavigation = false
        type = test.Conflict.Companion
      extensionReceiver = null
      signature = KtFunctionLikeSignature:
        receiverType = null
        returnType = kotlin.Unit
        symbol = test/Conflict.Companion.invoke(<dispatch receiver>: test.Conflict.Companion): kotlin.Unit
        valueParameters = []
        callableId = test/Conflict.Companion.invoke
    typeArgumentsMapping = {}
    argumentMapping = {}
  isInBestCandidates = false

KtApplicableCallCandidateInfo:
  candidate = KtSimpleFunctionCall:
    isImplicitInvoke = false
    partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
      dispatchReceiver = null
      extensionReceiver = null
      signature = KtFunctionLikeSignature:
        receiverType = null
        returnType = <local>.Conflict
        symbol = <constructor>(): <local>.Conflict
        valueParameters = []
        callableId = null
    typeArgumentsMapping = {}
    argumentMapping = {}
  isInBestCandidates = true

KtInapplicableCallCandidateInfo:
  diagnostic = ERROR<NO_VALUE_FOR_PARAMETER: No value passed for parameter 'i'.>
  candidate = KtSimpleFunctionCall:
    isImplicitInvoke = false
    partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
      dispatchReceiver = null
      extensionReceiver = null
      signature = KtFunctionLikeSignature:
        receiverType = null
        returnType = test.Conflict
        symbol = <constructor>(i: kotlin.Int): test.Conflict
        valueParameters = [
          KtVariableLikeSignature:
            name = i
            receiverType = null
            returnType = kotlin.Int
            symbol = i: kotlin.Int
            callableId = null
        ]
        callableId = null
    typeArgumentsMapping = {}
    argumentMapping = {}
  isInBestCandidates = false

KtApplicableCallCandidateInfo:
  candidate = KtSimpleFunctionCall:
    isImplicitInvoke = true
    partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
      dispatchReceiver = KtExplicitReceiverValue:
        expression = Conflict
        isSafeNavigation = false
        type = test.Conflict
      extensionReceiver = null
      signature = KtFunctionLikeSignature:
        receiverType = null
        returnType = kotlin.Unit
        symbol = test/Conflict.invoke(<dispatch receiver>: test.Conflict): kotlin.Unit
        valueParameters = []
        callableId = test/Conflict.invoke
    typeArgumentsMapping = {}
    argumentMapping = {}
  isInBestCandidates = false

KtApplicableCallCandidateInfo:
  candidate = KtSimpleFunctionCall:
    isImplicitInvoke = false
    partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
      dispatchReceiver = null
      extensionReceiver = null
      signature = KtFunctionLikeSignature:
        receiverType = null
        returnType = <local>.Conflict
        symbol = <constructor>(): <local>.Conflict
        valueParameters = []
        callableId = null
    typeArgumentsMapping = {}
    argumentMapping = {}
  isInBestCandidates = true

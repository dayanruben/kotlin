KtApplicableCallCandidateInfo:
  candidate = KtSimpleFunctionCall:
    isImplicitInvoke = false
    partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
      dispatchReceiver = KtExplicitReceiverValue:
        expression = list
        isSafeNavigation = false
        type = kotlin.collections.MutableList<kotlin.Int>
      extensionReceiver = null
      signature = KtFunctionLikeSignature:
        receiverType = null
        returnType = kotlin.Int
        symbol = kotlin/collections/MutableList.get(<dispatch receiver>: kotlin.collections.List<E>, index: kotlin.Int): E
        valueParameters = [
          KtVariableLikeSignature:
            name = index
            receiverType = null
            returnType = kotlin.Int
            symbol = index: kotlin.Int
            callableId = null
        ]
        callableId = kotlin/collections/MutableList.get
    typeArgumentsMapping = {}
    argumentMapping = {
      0 -> (KtVariableLikeSignature:
        name = index
        receiverType = null
        returnType = kotlin.Int
        symbol = index: kotlin.Int
        callableId = null)
    }
  isInBestCandidates = true

KtInapplicableCallCandidateInfo:
  diagnostic = ERROR<null: RECEIVER_TYPE_ERROR with get>
  candidate = KtSimpleFunctionCall:
    isImplicitInvoke = false
    partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
      dispatchReceiver = null
      extensionReceiver = KtExplicitReceiverValue:
        expression = list
        isSafeNavigation = false
        type = kotlin.collections.MutableList<kotlin.Int>
      signature = KtFunctionLikeSignature:
        receiverType = kotlin.collections.Map<out kotlin.Int, ERROR_TYPE>
        returnType = ERROR_TYPE?
        symbol = kotlin/collections/get(<extension receiver>: kotlin.collections.Map<out K, V>, key: K): V?
        valueParameters = [
          KtVariableLikeSignature:
            name = key
            receiverType = null
            returnType = kotlin.Int
            symbol = key: K
            callableId = null
        ]
        callableId = kotlin/collections/get
    typeArgumentsMapping = {
      K -> (kotlin.Int),
      V -> (ERROR_TYPE)
    }
    argumentMapping = {
      0 -> (KtVariableLikeSignature:
        name = key
        receiverType = null
        returnType = kotlin.Int
        symbol = key: K
        callableId = null)
    }
  isInBestCandidates = false

KtInapplicableCallCandidateInfo:
  diagnostic = ERROR<CONSTANT_EXPECTED_TYPE_MISMATCH: The integer literal does not conform to the expected type String>
  candidate = KtSimpleFunctionCall:
    isImplicitInvoke = false
    partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
      dispatchReceiver = null
      extensionReceiver = KtExplicitReceiverValue:
        expression = list
        isSafeNavigation = false
        type = kotlin.collections.MutableList<kotlin.Int>
      signature = KtFunctionLikeSignature:
        receiverType = kotlin.text.MatchGroupCollection
        returnType = kotlin.text.MatchGroup?
        symbol = kotlin/text/get(<extension receiver>: kotlin.text.MatchGroupCollection, name: kotlin.String): kotlin.text.MatchGroup?
        valueParameters = [
          KtVariableLikeSignature:
            name = name
            receiverType = null
            returnType = kotlin.String
            symbol = name: kotlin.String
            callableId = null
        ]
        callableId = kotlin/text/get
    typeArgumentsMapping = {}
    argumentMapping = {
      0 -> (KtVariableLikeSignature:
        name = name
        receiverType = null
        returnType = kotlin.String
        symbol = name: kotlin.String
        callableId = null)
    }
  isInBestCandidates = false
KtApplicableCallCandidateInfo:
  candidate = KtSimpleFunctionCall:
    isImplicitInvoke = false
    partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
      dispatchReceiver = null
      extensionReceiver = null
      signature = KtFunctionLikeSignature:
        receiverType = null
        returnType = kotlin.Array<kotlin.reflect.KClass<*>>
        symbol = kotlin/arrayOf(vararg elements: T): kotlin.Array<T>
        valueParameters = [
          KtVariableLikeSignature:
            name = elements
            receiverType = null
            returnType = kotlin.reflect.KClass<*>
            symbol = vararg elements: T
            callableId = null
        ]
        callableId = kotlin/arrayOf
    typeArgumentsMapping = {
      T -> (kotlin.reflect.KClass<*>)
    }
    argumentMapping = {
      AnnoWithKClass::class -> (KtVariableLikeSignature:
        name = elements
        receiverType = null
        returnType = kotlin.reflect.KClass<*>
        symbol = vararg elements: T
        callableId = null),
      one.AnnoWithKClass::class -> (KtVariableLikeSignature:
        name = elements
        receiverType = null
        returnType = kotlin.reflect.KClass<*>
        symbol = vararg elements: T
        callableId = null)
    }
  isInBestCandidates = true
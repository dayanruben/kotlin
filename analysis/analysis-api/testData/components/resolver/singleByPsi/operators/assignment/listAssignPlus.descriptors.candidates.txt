KtApplicableCallCandidateInfo:
  candidate = KtSimpleFunctionCall:
    isImplicitInvoke = false
    partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
      dispatchReceiver = null
      extensionReceiver = KtExplicitReceiverValue:
        expression = l
        isSafeNavigation = false
        type = kotlin.collections.MutableList<kotlin.Int>
      signature = KtFunctionLikeSignature:
        receiverType = kotlin.collections.MutableCollection<in kotlin.Int>
        returnType = kotlin.Unit
        symbol = kotlin/collections/plusAssign(<extension receiver>: kotlin.collections.MutableCollection<in T>, element: T): kotlin.Unit
        valueParameters = [
          KtVariableLikeSignature:
            name = element
            receiverType = null
            returnType = kotlin.Int
            symbol = element: T
            callableId = null
        ]
        callableId = kotlin/collections/plusAssign
    typeArgumentsMapping = {
      T -> (kotlin.Int)
    }
    argumentMapping = {
      1 -> (KtVariableLikeSignature:
        name = element
        receiverType = null
        returnType = kotlin.Int
        symbol = element: T
        callableId = null)
    }
  isInBestCandidates = true
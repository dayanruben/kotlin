KtInapplicableCallCandidateInfo:
  diagnostic = ERROR<null: OTHER_ERROR with compareTo>
  candidate = KtSimpleFunctionCall:
    isImplicitInvoke = false
    partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
      dispatchReceiver = KtExplicitReceiverValue:
        expression = 1
        isSafeNavigation = false
        type = kotlin.Int
      extensionReceiver = null
      signature = KtFunctionLikeSignature:
        receiverType = null
        returnType = kotlin.Int
        symbol = kotlin/Int.compareTo(<dispatch receiver>: kotlin.Int, other: kotlin.Byte): kotlin.Int
        valueParameters = [
          KtVariableLikeSignature:
            name = other
            receiverType = null
            returnType = kotlin.Byte
            symbol = other: kotlin.Byte
            callableId = null
        ]
        callableId = kotlin/Int.compareTo
    typeArgumentsMapping = {}
    argumentMapping = {
      2 -> (KtVariableLikeSignature:
        name = other
        receiverType = null
        returnType = kotlin.Byte
        symbol = other: kotlin.Byte
        callableId = null)
    }
  isInBestCandidates = false

KtInapplicableCallCandidateInfo:
  diagnostic = ERROR<null: OTHER_ERROR with compareTo>
  candidate = KtSimpleFunctionCall:
    isImplicitInvoke = false
    partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
      dispatchReceiver = KtExplicitReceiverValue:
        expression = 1
        isSafeNavigation = false
        type = kotlin.Int
      extensionReceiver = null
      signature = KtFunctionLikeSignature:
        receiverType = null
        returnType = kotlin.Int
        symbol = kotlin/Int.compareTo(<dispatch receiver>: kotlin.Int, other: kotlin.Double): kotlin.Int
        valueParameters = [
          KtVariableLikeSignature:
            name = other
            receiverType = null
            returnType = kotlin.Double
            symbol = other: kotlin.Double
            callableId = null
        ]
        callableId = kotlin/Int.compareTo
    typeArgumentsMapping = {}
    argumentMapping = {
      2 -> (KtVariableLikeSignature:
        name = other
        receiverType = null
        returnType = kotlin.Double
        symbol = other: kotlin.Double
        callableId = null)
    }
  isInBestCandidates = false

KtInapplicableCallCandidateInfo:
  diagnostic = ERROR<null: OTHER_ERROR with compareTo>
  candidate = KtSimpleFunctionCall:
    isImplicitInvoke = false
    partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
      dispatchReceiver = KtExplicitReceiverValue:
        expression = 1
        isSafeNavigation = false
        type = kotlin.Int
      extensionReceiver = null
      signature = KtFunctionLikeSignature:
        receiverType = null
        returnType = kotlin.Int
        symbol = kotlin/Int.compareTo(<dispatch receiver>: kotlin.Int, other: kotlin.Float): kotlin.Int
        valueParameters = [
          KtVariableLikeSignature:
            name = other
            receiverType = null
            returnType = kotlin.Float
            symbol = other: kotlin.Float
            callableId = null
        ]
        callableId = kotlin/Int.compareTo
    typeArgumentsMapping = {}
    argumentMapping = {
      2 -> (KtVariableLikeSignature:
        name = other
        receiverType = null
        returnType = kotlin.Float
        symbol = other: kotlin.Float
        callableId = null)
    }
  isInBestCandidates = false

KtApplicableCallCandidateInfo:
  candidate = KtSimpleFunctionCall:
    isImplicitInvoke = false
    partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
      dispatchReceiver = KtExplicitReceiverValue:
        expression = 1
        isSafeNavigation = false
        type = kotlin.Int
      extensionReceiver = null
      signature = KtFunctionLikeSignature:
        receiverType = null
        returnType = kotlin.Int
        symbol = kotlin/Int.compareTo(<dispatch receiver>: kotlin.Int, other: kotlin.Int): kotlin.Int
        valueParameters = [
          KtVariableLikeSignature:
            name = other
            receiverType = null
            returnType = kotlin.Int
            symbol = other: kotlin.Int
            callableId = null
        ]
        callableId = kotlin/Int.compareTo
    typeArgumentsMapping = {}
    argumentMapping = {
      2 -> (KtVariableLikeSignature:
        name = other
        receiverType = null
        returnType = kotlin.Int
        symbol = other: kotlin.Int
        callableId = null)
    }
  isInBestCandidates = true

KtInapplicableCallCandidateInfo:
  diagnostic = ERROR<null: OTHER_ERROR with compareTo>
  candidate = KtSimpleFunctionCall:
    isImplicitInvoke = false
    partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
      dispatchReceiver = KtExplicitReceiverValue:
        expression = 1
        isSafeNavigation = false
        type = kotlin.Int
      extensionReceiver = null
      signature = KtFunctionLikeSignature:
        receiverType = null
        returnType = kotlin.Int
        symbol = kotlin/Int.compareTo(<dispatch receiver>: kotlin.Int, other: kotlin.Long): kotlin.Int
        valueParameters = [
          KtVariableLikeSignature:
            name = other
            receiverType = null
            returnType = kotlin.Long
            symbol = other: kotlin.Long
            callableId = null
        ]
        callableId = kotlin/Int.compareTo
    typeArgumentsMapping = {}
    argumentMapping = {
      2 -> (KtVariableLikeSignature:
        name = other
        receiverType = null
        returnType = kotlin.Long
        symbol = other: kotlin.Long
        callableId = null)
    }
  isInBestCandidates = false

KtInapplicableCallCandidateInfo:
  diagnostic = ERROR<null: OTHER_ERROR with compareTo>
  candidate = KtSimpleFunctionCall:
    isImplicitInvoke = false
    partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
      dispatchReceiver = KtExplicitReceiverValue:
        expression = 1
        isSafeNavigation = false
        type = kotlin.Int
      extensionReceiver = null
      signature = KtFunctionLikeSignature:
        receiverType = null
        returnType = kotlin.Int
        symbol = kotlin/Int.compareTo(<dispatch receiver>: kotlin.Int, other: kotlin.Short): kotlin.Int
        valueParameters = [
          KtVariableLikeSignature:
            name = other
            receiverType = null
            returnType = kotlin.Short
            symbol = other: kotlin.Short
            callableId = null
        ]
        callableId = kotlin/Int.compareTo
    typeArgumentsMapping = {}
    argumentMapping = {
      2 -> (KtVariableLikeSignature:
        name = other
        receiverType = null
        returnType = kotlin.Short
        symbol = other: kotlin.Short
        callableId = null)
    }
  isInBestCandidates = false
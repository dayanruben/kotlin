KtApplicableCallCandidateInfo:
  candidate = KtSimpleFunctionCall:
    isImplicitInvoke = false
    partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
      dispatchReceiver = KtExplicitReceiverValue:
        expression = m
        isSafeNavigation = false
        type = library3.MyInterface
      extensionReceiver = null
      signature = KtFunctionLikeSignature:
        receiverType = null
        returnType = kotlin.Unit
        symbol = library3/MyInterface.check(<dispatch receiver>: library3.MyInterface, list: {library2.ListAlias<{library1.StringAlias=} kotlin.String>=} kotlin.collections.List<{library1.StringAlias=} kotlin.String>): kotlin.Unit
        valueParameters = [
          KtVariableLikeSignature:
            name = list
            receiverType = null
            returnType = {library2.ListAlias<{library1.StringAlias=} kotlin.String>=} kotlin.collections.List<{library1.StringAlias=} kotlin.String>
            symbol = list: {library2.ListAlias<{library1.StringAlias=} kotlin.String>=} kotlin.collections.List<{library1.StringAlias=} kotlin.String>
            callableId = null
        ]
        callableId = library3/MyInterface.check
    typeArgumentsMapping = {}
    argumentMapping = {
      emptyList() -> (KtVariableLikeSignature:
        name = list
        receiverType = null
        returnType = {library2.ListAlias<{library1.StringAlias=} kotlin.String>=} kotlin.collections.List<{library1.StringAlias=} kotlin.String>
        symbol = list: {library2.ListAlias<{library1.StringAlias=} kotlin.String>=} kotlin.collections.List<{library1.StringAlias=} kotlin.String>
        callableId = null)
    }
  isInBestCandidates = true

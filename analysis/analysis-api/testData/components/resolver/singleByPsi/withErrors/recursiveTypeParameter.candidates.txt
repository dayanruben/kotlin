KtApplicableCallCandidateInfo:
  candidate = KtSimpleFunctionCall:
    isImplicitInvoke = false
    partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
      dispatchReceiver = KtImplicitReceiverValue:
        symbol = /RunnerModule
        type = RunnerModule
      extensionReceiver = null
      signature = KtFunctionLikeSignature:
        receiverType = null
        returnType = kotlin.Unit
        symbol = /AbstractModule.install(<dispatch receiver>: AbstractModule, builder: ft<AbstractModule.Builder<*>, AbstractModule.Builder<*>?>): kotlin.Unit
        valueParameters = [
          KtVariableLikeSignature:
            name = builder
            receiverType = null
            returnType = ft<AbstractModule.Builder<*>, AbstractModule.Builder<*>?>
            symbol = builder: ft<AbstractModule.Builder<*>, AbstractModule.Builder<*>?>
            callableId = null
        ]
        callableId = /AbstractModule.install
    typeArgumentsMapping = {}
    argumentMapping = {
      CoroutineModule.builder() -> (KtVariableLikeSignature:
        name = builder
        receiverType = null
        returnType = ft<AbstractModule.Builder<*>, AbstractModule.Builder<*>?>
        symbol = builder: ft<AbstractModule.Builder<*>, AbstractModule.Builder<*>?>
        callableId = null)
    }
  isInBestCandidates = true
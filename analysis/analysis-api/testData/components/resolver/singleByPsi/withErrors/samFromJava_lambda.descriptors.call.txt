KtSuccessCallInfo:
  call = KtSimpleFunctionCall:
    isImplicitInvoke = false
    partiallyAppliedSymbol = KtPartiallyAppliedSymbol:
      dispatchReceiver = KtExplicitReceiverValue:
        expression = handler
        isSafeNavigation = false
        type = test.pkg.MyHandler
      extensionReceiver = null
      signature = KtFunctionLikeSignature:
        receiverType = null
        returnType = kotlin.Unit
        symbol = test/pkg/MyHandler.stash(<dispatch receiver>: test.pkg.MyHandler, actor: test.pkg.MyInterface!, actors: (kotlin.collections.MutableList<test.pkg.MyInterface!>..kotlin.collections.List<test.pkg.MyInterface!>?)): kotlin.Unit
        valueParameters = [
          KtVariableLikeSignature:
            name = actor
            receiverType = null
            returnType = test.pkg.MyInterface!
            symbol = actor: test.pkg.MyInterface!
            callableId = null,
          KtVariableLikeSignature:
            name = actors
            receiverType = null
            returnType = (kotlin.collections.MutableList<test.pkg.MyInterface!>..kotlin.collections.List<test.pkg.MyInterface!>?)
            symbol = actors: (kotlin.collections.MutableList<test.pkg.MyInterface!>..kotlin.collections.List<test.pkg.MyInterface!>?)
            callableId = null
        ]
        callableId = test/pkg/MyHandler.stash
    typeArgumentsMapping = {}
    argumentMapping = {
      lambda -> (KtVariableLikeSignature:
        name = actor
        receiverType = null
        returnType = test.pkg.MyInterface!
        symbol = actor: test.pkg.MyInterface!
        callableId = null),
      list -> (KtVariableLikeSignature:
        name = actors
        receiverType = null
        returnType = (kotlin.collections.MutableList<test.pkg.MyInterface!>..kotlin.collections.List<test.pkg.MyInterface!>?)
        symbol = actors: (kotlin.collections.MutableList<test.pkg.MyInterface!>..kotlin.collections.List<test.pkg.MyInterface!>?)
        callableId = null)
    }
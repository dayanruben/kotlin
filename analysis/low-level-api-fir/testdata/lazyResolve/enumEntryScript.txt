RAW_FIR:
FILE: [ResolvedTo(IMPORTS)] enumEntryScript.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public final [ResolvedTo(STATUS)] annotation class Anno : R|kotlin/Annotation| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=Anno] constructor(): R|Anno| {
                super<R|kotlin/Any|>()
            }

        }

        public final [ResolvedTo(STATUS)] enum class Foo : R|kotlin/Enum<Foo>| {
            private [ResolvedTo(STATUS)] [ContainingClassKey=Foo] constructor(): R|Foo| {
                super<R|kotlin/Enum<Foo>|>()
            }

            @R|Anno|[Types]() public final static [ResolvedTo(STATUS)] [ContainingClassKey=Foo] enum entry ResolveMe: R|Foo| = object : R|Foo| {
                private [ResolvedTo(RAW_FIR)] [ContainingClassKey=<anonymous>] constructor(): R|<anonymous>| {
                    super<R|Foo|>()
                }

            }

            public final static [ResolvedTo(STATUS)] [ContainingClassKey=Foo] fun values(): R|kotlin/Array<Foo>| {
            }

            public final static [ResolvedTo(STATUS)] [ContainingClassKey=Foo] fun valueOf([ResolvedTo(STATUS)] value: R|kotlin/String|): R|Foo| {
            }

            public final static [ResolvedTo(STATUS)] [ContainingClassKey=Foo] val entries: R|kotlin/enums/EnumEntries<Foo>|
                public [ResolvedTo(STATUS)] get(): R|kotlin/enums/EnumEntries<Foo>|

        }


IMPORTS:
FILE: [ResolvedTo(IMPORTS)] enumEntryScript.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public final [ResolvedTo(STATUS)] annotation class Anno : R|kotlin/Annotation| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=Anno] constructor(): R|Anno| {
                super<R|kotlin/Any|>()
            }

        }

        public final [ResolvedTo(STATUS)] enum class Foo : R|kotlin/Enum<Foo>| {
            private [ResolvedTo(STATUS)] [ContainingClassKey=Foo] constructor(): R|Foo| {
                super<R|kotlin/Enum<Foo>|>()
            }

            @R|Anno|[Types]() public final static [ResolvedTo(STATUS)] [ContainingClassKey=Foo] enum entry ResolveMe: R|Foo| = object : R|Foo| {
                private [ResolvedTo(RAW_FIR)] [ContainingClassKey=<anonymous>] constructor(): R|<anonymous>| {
                    super<R|Foo|>()
                }

            }

            public final static [ResolvedTo(STATUS)] [ContainingClassKey=Foo] fun values(): R|kotlin/Array<Foo>| {
            }

            public final static [ResolvedTo(STATUS)] [ContainingClassKey=Foo] fun valueOf([ResolvedTo(STATUS)] value: R|kotlin/String|): R|Foo| {
            }

            public final static [ResolvedTo(STATUS)] [ContainingClassKey=Foo] val entries: R|kotlin/enums/EnumEntries<Foo>|
                public [ResolvedTo(STATUS)] get(): R|kotlin/enums/EnumEntries<Foo>|

        }


COMPILER_REQUIRED_ANNOTATIONS:
FILE: [ResolvedTo(IMPORTS)] enumEntryScript.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public final [ResolvedTo(STATUS)] annotation class Anno : R|kotlin/Annotation| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=Anno] constructor(): R|Anno| {
                super<R|kotlin/Any|>()
            }

        }

        public final [ResolvedTo(STATUS)] enum class Foo : R|kotlin/Enum<Foo>| {
            private [ResolvedTo(STATUS)] [ContainingClassKey=Foo] constructor(): R|Foo| {
                super<R|kotlin/Enum<Foo>|>()
            }

            @R|Anno|[Types]() public final static [ResolvedTo(STATUS)] [ContainingClassKey=Foo] enum entry ResolveMe: R|Foo| = object : R|Foo| {
                private [ResolvedTo(RAW_FIR)] [ContainingClassKey=<anonymous>] constructor(): R|<anonymous>| {
                    super<R|Foo|>()
                }

            }

            public final static [ResolvedTo(STATUS)] [ContainingClassKey=Foo] fun values(): R|kotlin/Array<Foo>| {
            }

            public final static [ResolvedTo(STATUS)] [ContainingClassKey=Foo] fun valueOf([ResolvedTo(STATUS)] value: R|kotlin/String|): R|Foo| {
            }

            public final static [ResolvedTo(STATUS)] [ContainingClassKey=Foo] val entries: R|kotlin/enums/EnumEntries<Foo>|
                public [ResolvedTo(STATUS)] get(): R|kotlin/enums/EnumEntries<Foo>|

        }


COMPANION_GENERATION:
FILE: [ResolvedTo(IMPORTS)] enumEntryScript.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public final [ResolvedTo(STATUS)] annotation class Anno : R|kotlin/Annotation| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=Anno] constructor(): R|Anno| {
                super<R|kotlin/Any|>()
            }

        }

        public final [ResolvedTo(STATUS)] enum class Foo : R|kotlin/Enum<Foo>| {
            private [ResolvedTo(STATUS)] [ContainingClassKey=Foo] constructor(): R|Foo| {
                super<R|kotlin/Enum<Foo>|>()
            }

            @R|Anno|[Types]() public final static [ResolvedTo(STATUS)] [ContainingClassKey=Foo] enum entry ResolveMe: R|Foo| = object : R|Foo| {
                private [ResolvedTo(RAW_FIR)] [ContainingClassKey=<anonymous>] constructor(): R|<anonymous>| {
                    super<R|Foo|>()
                }

            }

            public final static [ResolvedTo(STATUS)] [ContainingClassKey=Foo] fun values(): R|kotlin/Array<Foo>| {
            }

            public final static [ResolvedTo(STATUS)] [ContainingClassKey=Foo] fun valueOf([ResolvedTo(STATUS)] value: R|kotlin/String|): R|Foo| {
            }

            public final static [ResolvedTo(STATUS)] [ContainingClassKey=Foo] val entries: R|kotlin/enums/EnumEntries<Foo>|
                public [ResolvedTo(STATUS)] get(): R|kotlin/enums/EnumEntries<Foo>|

        }


SUPER_TYPES:
FILE: [ResolvedTo(IMPORTS)] enumEntryScript.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public final [ResolvedTo(STATUS)] annotation class Anno : R|kotlin/Annotation| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=Anno] constructor(): R|Anno| {
                super<R|kotlin/Any|>()
            }

        }

        public final [ResolvedTo(STATUS)] enum class Foo : R|kotlin/Enum<Foo>| {
            private [ResolvedTo(STATUS)] [ContainingClassKey=Foo] constructor(): R|Foo| {
                super<R|kotlin/Enum<Foo>|>()
            }

            @R|Anno|[Types]() public final static [ResolvedTo(STATUS)] [ContainingClassKey=Foo] enum entry ResolveMe: R|Foo| = object : R|Foo| {
                private [ResolvedTo(RAW_FIR)] [ContainingClassKey=<anonymous>] constructor(): R|<anonymous>| {
                    super<R|Foo|>()
                }

            }

            public final static [ResolvedTo(STATUS)] [ContainingClassKey=Foo] fun values(): R|kotlin/Array<Foo>| {
            }

            public final static [ResolvedTo(STATUS)] [ContainingClassKey=Foo] fun valueOf([ResolvedTo(STATUS)] value: R|kotlin/String|): R|Foo| {
            }

            public final static [ResolvedTo(STATUS)] [ContainingClassKey=Foo] val entries: R|kotlin/enums/EnumEntries<Foo>|
                public [ResolvedTo(STATUS)] get(): R|kotlin/enums/EnumEntries<Foo>|

        }


TYPES:
FILE: [ResolvedTo(IMPORTS)] enumEntryScript.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public final [ResolvedTo(STATUS)] annotation class Anno : R|kotlin/Annotation| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=Anno] constructor(): R|Anno| {
                super<R|kotlin/Any|>()
            }

        }

        public final [ResolvedTo(STATUS)] enum class Foo : R|kotlin/Enum<Foo>| {
            private [ResolvedTo(STATUS)] [ContainingClassKey=Foo] constructor(): R|Foo| {
                super<R|kotlin/Enum<Foo>|>()
            }

            @R|Anno|[Types]() public final static [ResolvedTo(STATUS)] [ContainingClassKey=Foo] enum entry ResolveMe: R|Foo| = object : R|Foo| {
                private [ResolvedTo(RAW_FIR)] [ContainingClassKey=<anonymous>] constructor(): R|<anonymous>| {
                    super<R|Foo|>()
                }

            }

            public final static [ResolvedTo(STATUS)] [ContainingClassKey=Foo] fun values(): R|kotlin/Array<Foo>| {
            }

            public final static [ResolvedTo(STATUS)] [ContainingClassKey=Foo] fun valueOf([ResolvedTo(STATUS)] value: R|kotlin/String|): R|Foo| {
            }

            public final static [ResolvedTo(STATUS)] [ContainingClassKey=Foo] val entries: R|kotlin/enums/EnumEntries<Foo>|
                public [ResolvedTo(STATUS)] get(): R|kotlin/enums/EnumEntries<Foo>|

        }


STATUS:
FILE: [ResolvedTo(IMPORTS)] enumEntryScript.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public final [ResolvedTo(STATUS)] annotation class Anno : R|kotlin/Annotation| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=Anno] constructor(): R|Anno| {
                super<R|kotlin/Any|>()
            }

        }

        public final [ResolvedTo(STATUS)] enum class Foo : R|kotlin/Enum<Foo>| {
            private [ResolvedTo(STATUS)] [ContainingClassKey=Foo] constructor(): R|Foo| {
                super<R|kotlin/Enum<Foo>|>()
            }

            @R|Anno|[Types]() public final static [ResolvedTo(STATUS)] [ContainingClassKey=Foo] enum entry ResolveMe: R|Foo| = object : R|Foo| {
                private [ResolvedTo(RAW_FIR)] [ContainingClassKey=<anonymous>] constructor(): R|<anonymous>| {
                    super<R|Foo|>()
                }

            }

            public final static [ResolvedTo(STATUS)] [ContainingClassKey=Foo] fun values(): R|kotlin/Array<Foo>| {
            }

            public final static [ResolvedTo(STATUS)] [ContainingClassKey=Foo] fun valueOf([ResolvedTo(STATUS)] value: R|kotlin/String|): R|Foo| {
            }

            public final static [ResolvedTo(STATUS)] [ContainingClassKey=Foo] val entries: R|kotlin/enums/EnumEntries<Foo>|
                public [ResolvedTo(STATUS)] get(): R|kotlin/enums/EnumEntries<Foo>|

        }


EXPECT_ACTUAL_MATCHING:
FILE: [ResolvedTo(IMPORTS)] enumEntryScript.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public final [ResolvedTo(STATUS)] annotation class Anno : R|kotlin/Annotation| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=Anno] constructor(): R|Anno| {
                super<R|kotlin/Any|>()
            }

        }

        public final [ResolvedTo(STATUS)] enum class Foo : R|kotlin/Enum<Foo>| {
            private [ResolvedTo(STATUS)] [ContainingClassKey=Foo] constructor(): R|Foo| {
                super<R|kotlin/Enum<Foo>|>()
            }

            @R|Anno|[Types]() public final static [ResolvedTo(STATUS)] [ContainingClassKey=Foo] enum entry ResolveMe: R|Foo| = object : R|Foo| {
                private [ResolvedTo(RAW_FIR)] [ContainingClassKey=<anonymous>] constructor(): R|<anonymous>| {
                    super<R|Foo|>()
                }

            }

            public final static [ResolvedTo(STATUS)] [ContainingClassKey=Foo] fun values(): R|kotlin/Array<Foo>| {
            }

            public final static [ResolvedTo(STATUS)] [ContainingClassKey=Foo] fun valueOf([ResolvedTo(STATUS)] value: R|kotlin/String|): R|Foo| {
            }

            public final static [ResolvedTo(STATUS)] [ContainingClassKey=Foo] val entries: R|kotlin/enums/EnumEntries<Foo>|
                public [ResolvedTo(STATUS)] get(): R|kotlin/enums/EnumEntries<Foo>|

        }


ARGUMENTS_OF_ANNOTATIONS:
FILE: [ResolvedTo(IMPORTS)] enumEntryScript.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public final [ResolvedTo(STATUS)] annotation class Anno : R|kotlin/Annotation| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=Anno] constructor(): R|Anno| {
                super<R|kotlin/Any|>()
            }

        }

        public final [ResolvedTo(STATUS)] enum class Foo : R|kotlin/Enum<Foo>| {
            private [ResolvedTo(STATUS)] [ContainingClassKey=Foo] constructor(): R|Foo| {
                super<R|kotlin/Enum<Foo>|>()
            }

            @R|Anno|[Types]() public final static [ResolvedTo(STATUS)] [ContainingClassKey=Foo] enum entry ResolveMe: R|Foo| = object : R|Foo| {
                private [ResolvedTo(RAW_FIR)] [ContainingClassKey=<anonymous>] constructor(): R|<anonymous>| {
                    super<R|Foo|>()
                }

            }

            public final static [ResolvedTo(STATUS)] [ContainingClassKey=Foo] fun values(): R|kotlin/Array<Foo>| {
            }

            public final static [ResolvedTo(STATUS)] [ContainingClassKey=Foo] fun valueOf([ResolvedTo(STATUS)] value: R|kotlin/String|): R|Foo| {
            }

            public final static [ResolvedTo(STATUS)] [ContainingClassKey=Foo] val entries: R|kotlin/enums/EnumEntries<Foo>|
                public [ResolvedTo(STATUS)] get(): R|kotlin/enums/EnumEntries<Foo>|

        }


CONTRACTS:
FILE: [ResolvedTo(IMPORTS)] enumEntryScript.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public final [ResolvedTo(STATUS)] annotation class Anno : R|kotlin/Annotation| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=Anno] constructor(): R|Anno| {
                super<R|kotlin/Any|>()
            }

        }

        public final [ResolvedTo(STATUS)] enum class Foo : R|kotlin/Enum<Foo>| {
            private [ResolvedTo(STATUS)] [ContainingClassKey=Foo] constructor(): R|Foo| {
                super<R|kotlin/Enum<Foo>|>()
            }

            @R|Anno|[Types]() public final static [ResolvedTo(STATUS)] [ContainingClassKey=Foo] enum entry ResolveMe: R|Foo| = object : R|Foo| {
                private [ResolvedTo(RAW_FIR)] [ContainingClassKey=<anonymous>] constructor(): R|<anonymous>| {
                    super<R|Foo|>()
                }

            }

            public final static [ResolvedTo(STATUS)] [ContainingClassKey=Foo] fun values(): R|kotlin/Array<Foo>| {
            }

            public final static [ResolvedTo(STATUS)] [ContainingClassKey=Foo] fun valueOf([ResolvedTo(STATUS)] value: R|kotlin/String|): R|Foo| {
            }

            public final static [ResolvedTo(STATUS)] [ContainingClassKey=Foo] val entries: R|kotlin/enums/EnumEntries<Foo>|
                public [ResolvedTo(STATUS)] get(): R|kotlin/enums/EnumEntries<Foo>|

        }


IMPLICIT_TYPES_BODY_RESOLVE:
FILE: [ResolvedTo(IMPORTS)] enumEntryScript.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public final [ResolvedTo(STATUS)] annotation class Anno : R|kotlin/Annotation| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=Anno] constructor(): R|Anno| {
                super<R|kotlin/Any|>()
            }

        }

        public final [ResolvedTo(STATUS)] enum class Foo : R|kotlin/Enum<Foo>| {
            private [ResolvedTo(STATUS)] [ContainingClassKey=Foo] constructor(): R|Foo| {
                super<R|kotlin/Enum<Foo>|>()
            }

            @R|Anno|[Types]() public final static [ResolvedTo(STATUS)] [ContainingClassKey=Foo] enum entry ResolveMe: R|Foo| = object : R|Foo| {
                private [ResolvedTo(RAW_FIR)] [ContainingClassKey=<anonymous>] constructor(): R|<anonymous>| {
                    super<R|Foo|>()
                }

            }

            public final static [ResolvedTo(STATUS)] [ContainingClassKey=Foo] fun values(): R|kotlin/Array<Foo>| {
            }

            public final static [ResolvedTo(STATUS)] [ContainingClassKey=Foo] fun valueOf([ResolvedTo(STATUS)] value: R|kotlin/String|): R|Foo| {
            }

            public final static [ResolvedTo(STATUS)] [ContainingClassKey=Foo] val entries: R|kotlin/enums/EnumEntries<Foo>|
                public [ResolvedTo(STATUS)] get(): R|kotlin/enums/EnumEntries<Foo>|

        }


ANNOTATIONS_ARGUMENTS_MAPPING:
FILE: [ResolvedTo(IMPORTS)] enumEntryScript.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public final [ResolvedTo(STATUS)] annotation class Anno : R|kotlin/Annotation| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=Anno] constructor(): R|Anno| {
                super<R|kotlin/Any|>()
            }

        }

        public final [ResolvedTo(STATUS)] enum class Foo : R|kotlin/Enum<Foo>| {
            private [ResolvedTo(STATUS)] [ContainingClassKey=Foo] constructor(): R|Foo| {
                super<R|kotlin/Enum<Foo>|>()
            }

            @R|Anno|[Types]() public final static [ResolvedTo(STATUS)] [ContainingClassKey=Foo] enum entry ResolveMe: R|Foo| = object : R|Foo| {
                private [ResolvedTo(RAW_FIR)] [ContainingClassKey=<anonymous>] constructor(): R|<anonymous>| {
                    super<R|Foo|>()
                }

            }

            public final static [ResolvedTo(STATUS)] [ContainingClassKey=Foo] fun values(): R|kotlin/Array<Foo>| {
            }

            public final static [ResolvedTo(STATUS)] [ContainingClassKey=Foo] fun valueOf([ResolvedTo(STATUS)] value: R|kotlin/String|): R|Foo| {
            }

            public final static [ResolvedTo(STATUS)] [ContainingClassKey=Foo] val entries: R|kotlin/enums/EnumEntries<Foo>|
                public [ResolvedTo(STATUS)] get(): R|kotlin/enums/EnumEntries<Foo>|

        }


BODY_RESOLVE:
FILE: [ResolvedTo(IMPORTS)] enumEntryScript.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public final [ResolvedTo(STATUS)] annotation class Anno : R|kotlin/Annotation| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=Anno] constructor(): R|Anno| {
                super<R|kotlin/Any|>()
            }

        }

        public final [ResolvedTo(STATUS)] enum class Foo : R|kotlin/Enum<Foo>| {
            private [ResolvedTo(STATUS)] [ContainingClassKey=Foo] constructor(): R|Foo| {
                super<R|kotlin/Enum<Foo>|>()
            }

            @R|Anno|[Types]() public final static [ResolvedTo(STATUS)] [ContainingClassKey=Foo] enum entry ResolveMe: R|Foo| = object : R|Foo| {
                private [ResolvedTo(RAW_FIR)] [ContainingClassKey=<anonymous>] constructor(): R|<anonymous>| {
                    super<R|Foo|>()
                }

            }

            public final static [ResolvedTo(STATUS)] [ContainingClassKey=Foo] fun values(): R|kotlin/Array<Foo>| {
            }

            public final static [ResolvedTo(STATUS)] [ContainingClassKey=Foo] fun valueOf([ResolvedTo(STATUS)] value: R|kotlin/String|): R|Foo| {
            }

            public final static [ResolvedTo(STATUS)] [ContainingClassKey=Foo] val entries: R|kotlin/enums/EnumEntries<Foo>|
                public [ResolvedTo(STATUS)] get(): R|kotlin/enums/EnumEntries<Foo>|

        }


FILE RAW TO BODY:
FILE: [ResolvedTo(IMPORTS)] enumEntryScript.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public final [ResolvedTo(STATUS)] annotation class Anno : R|kotlin/Annotation| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=Anno] constructor(): R|Anno| {
                super<R|kotlin/Any|>()
            }

        }

        public final [ResolvedTo(STATUS)] enum class Foo : R|kotlin/Enum<Foo>| {
            private [ResolvedTo(STATUS)] [ContainingClassKey=Foo] constructor(): R|Foo| {
                super<R|kotlin/Enum<Foo>|>()
            }

            @R|Anno|[Types]() public final static [ResolvedTo(STATUS)] [ContainingClassKey=Foo] enum entry ResolveMe: R|Foo| = object : R|Foo| {
                private [ResolvedTo(RAW_FIR)] [ContainingClassKey=<anonymous>] constructor(): R|<anonymous>| {
                    super<R|Foo|>()
                }

            }

            public final static [ResolvedTo(STATUS)] [ContainingClassKey=Foo] fun values(): R|kotlin/Array<Foo>| {
            }

            public final static [ResolvedTo(STATUS)] [ContainingClassKey=Foo] fun valueOf([ResolvedTo(STATUS)] value: R|kotlin/String|): R|Foo| {
            }

            public final static [ResolvedTo(STATUS)] [ContainingClassKey=Foo] val entries: R|kotlin/enums/EnumEntries<Foo>|
                public [ResolvedTo(STATUS)] get(): R|kotlin/enums/EnumEntries<Foo>|

        }


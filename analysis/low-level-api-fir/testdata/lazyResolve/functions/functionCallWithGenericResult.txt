
RAW_FIR:
FILE: [RAW_FIR] functionCallWithGenericResult.kt
    [RAW_FIR] annotations container
    public? open [RAW_FIR] class Foo<[RAW_FIR] T : CharSequence> : R|kotlin/Any| {
        public? [RAW_FIR] [ContainingClassKey=Foo] constructor<[RAW_FIR] T : CharSequence>(): R|Foo<T>| {
            LAZY_super<R|kotlin/Any|>
        }

    }
    public? final? [RAW_FIR] fun bar(): Foo<String>? { LAZY_BLOCK }
    public? final? [RAW_FIR] fun resolveMe(): R|kotlin/Unit| { LAZY_BLOCK }

IMPORTS:
FILE: [IMPORTS] functionCallWithGenericResult.kt
    [RAW_FIR] annotations container
    public? open [RAW_FIR] class Foo<[RAW_FIR] T : CharSequence> : R|kotlin/Any| {
        public? [RAW_FIR] [ContainingClassKey=Foo] constructor<[RAW_FIR] T : CharSequence>(): R|Foo<T>| {
            LAZY_super<R|kotlin/Any|>
        }

    }
    public? final? [RAW_FIR] fun bar(): Foo<String>? { LAZY_BLOCK }
    public? final? [RAW_FIR] fun resolveMe(): R|kotlin/Unit| { LAZY_BLOCK }

COMPILER_REQUIRED_ANNOTATIONS:
FILE: [IMPORTS] functionCallWithGenericResult.kt
    [RAW_FIR] annotations container
    public? open [RAW_FIR] class Foo<[RAW_FIR] T : CharSequence> : R|kotlin/Any| {
        public? [RAW_FIR] [ContainingClassKey=Foo] constructor<[RAW_FIR] T : CharSequence>(): R|Foo<T>| {
            LAZY_super<R|kotlin/Any|>
        }

    }
    public? final? [RAW_FIR] fun bar(): Foo<String>? { LAZY_BLOCK }
    public? final? [COMPILER_REQUIRED_ANNOTATIONS] fun resolveMe(): R|kotlin/Unit| { LAZY_BLOCK }

COMPANION_GENERATION:
FILE: [IMPORTS] functionCallWithGenericResult.kt
    [RAW_FIR] annotations container
    public? open [RAW_FIR] class Foo<[RAW_FIR] T : CharSequence> : R|kotlin/Any| {
        public? [RAW_FIR] [ContainingClassKey=Foo] constructor<[RAW_FIR] T : CharSequence>(): R|Foo<T>| {
            LAZY_super<R|kotlin/Any|>
        }

    }
    public? final? [RAW_FIR] fun bar(): Foo<String>? { LAZY_BLOCK }
    public? final? [COMPANION_GENERATION] fun resolveMe(): R|kotlin/Unit| { LAZY_BLOCK }

SUPER_TYPES:
FILE: [IMPORTS] functionCallWithGenericResult.kt
    [RAW_FIR] annotations container
    public? open [RAW_FIR] class Foo<[RAW_FIR] T : CharSequence> : R|kotlin/Any| {
        public? [RAW_FIR] [ContainingClassKey=Foo] constructor<[RAW_FIR] T : CharSequence>(): R|Foo<T>| {
            LAZY_super<R|kotlin/Any|>
        }

    }
    public? final? [RAW_FIR] fun bar(): Foo<String>? { LAZY_BLOCK }
    public? final? [SUPER_TYPES] fun resolveMe(): R|kotlin/Unit| { LAZY_BLOCK }

TYPES:
FILE: [IMPORTS] functionCallWithGenericResult.kt
    [RAW_FIR] annotations container
    public? open [RAW_FIR] class Foo<[RAW_FIR] T : CharSequence> : R|kotlin/Any| {
        public? [RAW_FIR] [ContainingClassKey=Foo] constructor<[RAW_FIR] T : CharSequence>(): R|Foo<T>| {
            LAZY_super<R|kotlin/Any|>
        }

    }
    public? final? [RAW_FIR] fun bar(): Foo<String>? { LAZY_BLOCK }
    public? final? [TYPES] fun resolveMe(): R|kotlin/Unit| { LAZY_BLOCK }

STATUS:
FILE: [IMPORTS] functionCallWithGenericResult.kt
    [RAW_FIR] annotations container
    public? open [RAW_FIR] class Foo<[RAW_FIR] T : CharSequence> : R|kotlin/Any| {
        public? [RAW_FIR] [ContainingClassKey=Foo] constructor<[RAW_FIR] T : CharSequence>(): R|Foo<T>| {
            LAZY_super<R|kotlin/Any|>
        }

    }
    public? final? [RAW_FIR] fun bar(): Foo<String>? { LAZY_BLOCK }
    public final [STATUS] fun resolveMe(): R|kotlin/Unit| { LAZY_BLOCK }

EXPECT_ACTUAL_MATCHING:
FILE: [IMPORTS] functionCallWithGenericResult.kt
    [RAW_FIR] annotations container
    public? open [RAW_FIR] class Foo<[RAW_FIR] T : CharSequence> : R|kotlin/Any| {
        public? [RAW_FIR] [ContainingClassKey=Foo] constructor<[RAW_FIR] T : CharSequence>(): R|Foo<T>| {
            LAZY_super<R|kotlin/Any|>
        }

    }
    public? final? [RAW_FIR] fun bar(): Foo<String>? { LAZY_BLOCK }
    public final [EXPECT_ACTUAL_MATCHING] fun resolveMe(): R|kotlin/Unit| {
        [RAW_FIR] lval x: <implicit> = bar#()
    }

ARGUMENTS_OF_ANNOTATIONS:
FILE: [IMPORTS] functionCallWithGenericResult.kt
    [RAW_FIR] annotations container
    public? open [RAW_FIR] class Foo<[RAW_FIR] T : CharSequence> : R|kotlin/Any| {
        public? [RAW_FIR] [ContainingClassKey=Foo] constructor<[RAW_FIR] T : CharSequence>(): R|Foo<T>| {
            LAZY_super<R|kotlin/Any|>
        }

    }
    public? final? [RAW_FIR] fun bar(): Foo<String>? { LAZY_BLOCK }
    public final [ARGUMENTS_OF_ANNOTATIONS] fun resolveMe(): R|kotlin/Unit| {
        [RAW_FIR] lval x: <implicit> = bar#()
    }

CONTRACTS:
FILE: [IMPORTS] functionCallWithGenericResult.kt
    [RAW_FIR] annotations container
    public? open [RAW_FIR] class Foo<[RAW_FIR] T : CharSequence> : R|kotlin/Any| {
        public? [RAW_FIR] [ContainingClassKey=Foo] constructor<[RAW_FIR] T : CharSequence>(): R|Foo<T>| {
            LAZY_super<R|kotlin/Any|>
        }

    }
    public? final? [RAW_FIR] fun bar(): Foo<String>? { LAZY_BLOCK }
    public final [CONTRACTS] fun resolveMe(): R|kotlin/Unit| {
        [RAW_FIR] lval x: <implicit> = bar#()
    }

IMPLICIT_TYPES_BODY_RESOLVE:
FILE: [IMPORTS] functionCallWithGenericResult.kt
    [RAW_FIR] annotations container
    public? open [RAW_FIR] class Foo<[RAW_FIR] T : CharSequence> : R|kotlin/Any| {
        public? [RAW_FIR] [ContainingClassKey=Foo] constructor<[RAW_FIR] T : CharSequence>(): R|Foo<T>| {
            LAZY_super<R|kotlin/Any|>
        }

    }
    public? final? [RAW_FIR] fun bar(): Foo<String>? { LAZY_BLOCK }
    public final [IMPLICIT_TYPES_BODY_RESOLVE] fun resolveMe(): R|kotlin/Unit| {
        [RAW_FIR] lval x: <implicit> = bar#()
    }

ANNOTATIONS_ARGUMENTS_MAPPING:
FILE: [IMPORTS] functionCallWithGenericResult.kt
    [RAW_FIR] annotations container
    public? open [RAW_FIR] class Foo<[RAW_FIR] T : CharSequence> : R|kotlin/Any| {
        public? [RAW_FIR] [ContainingClassKey=Foo] constructor<[RAW_FIR] T : CharSequence>(): R|Foo<T>| {
            LAZY_super<R|kotlin/Any|>
        }

    }
    public? final? [RAW_FIR] fun bar(): Foo<String>? { LAZY_BLOCK }
    public final [ANNOTATIONS_ARGUMENTS_MAPPING] fun resolveMe(): R|kotlin/Unit| {
        [RAW_FIR] lval x: <implicit> = bar#()
    }

BODY_RESOLVE:
FILE: [IMPORTS] functionCallWithGenericResult.kt
    [RAW_FIR] annotations container
    public? open [RAW_FIR] class Foo<[RAW_FIR] T : CharSequence> : R|kotlin/Any| {
        public? [RAW_FIR] [ContainingClassKey=Foo] constructor<[RAW_FIR] T : CharSequence>(): R|Foo<T>| {
            LAZY_super<R|kotlin/Any|>
        }

    }
    public final [CONTRACTS] fun bar(): R|Foo<kotlin/String>?| {
        ^bar Null(null)
    }
    public final [BODY_RESOLVE] fun resolveMe(): R|kotlin/Unit| {
        [BODY_RESOLVE] lval x: R|Foo<kotlin/String>?| = R|/bar|()
    }

FILE RAW TO BODY:
FILE: [IMPORTS] functionCallWithGenericResult.kt
    [BODY_RESOLVE] annotations container
    public open [BODY_RESOLVE] class Foo<[BODY_RESOLVE] T : R|kotlin/CharSequence|> : R|kotlin/Any| {
        public [BODY_RESOLVE] [ContainingClassKey=Foo] constructor<[BODY_RESOLVE] T : R|kotlin/CharSequence|>(): R|Foo<T>| {
            super<R|kotlin/Any|>()
        }

    }
    public final [BODY_RESOLVE] fun bar(): R|Foo<kotlin/String>?| {
        ^bar Null(null)
    }
    public final [BODY_RESOLVE] fun resolveMe(): R|kotlin/Unit| {
        [BODY_RESOLVE] lval x: R|Foo<kotlin/String>?| = R|/bar|()
    }

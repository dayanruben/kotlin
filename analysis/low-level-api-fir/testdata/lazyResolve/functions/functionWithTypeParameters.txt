
RAW_FIR:
FILE: [RAW_FIR] functionWithTypeParameters.kt
    [RAW_FIR] annotations container
    public? final? [RAW_FIR] fun <[RAW_FIR] T : Int, [RAW_FIR] K> resolveMe(): R|kotlin/Unit| { LAZY_BLOCK }

IMPORTS:
FILE: [IMPORTS] functionWithTypeParameters.kt
    [RAW_FIR] annotations container
    public? final? [RAW_FIR] fun <[RAW_FIR] T : Int, [RAW_FIR] K> resolveMe(): R|kotlin/Unit| { LAZY_BLOCK }

COMPILER_REQUIRED_ANNOTATIONS:
FILE: [IMPORTS] functionWithTypeParameters.kt
    [RAW_FIR] annotations container
    public? final? [COMPILER_REQUIRED_ANNOTATIONS] fun <[COMPILER_REQUIRED_ANNOTATIONS] T : Int, [COMPILER_REQUIRED_ANNOTATIONS] K> resolveMe(): R|kotlin/Unit| { LAZY_BLOCK }

COMPANION_GENERATION:
FILE: [IMPORTS] functionWithTypeParameters.kt
    [RAW_FIR] annotations container
    public? final? [COMPANION_GENERATION] fun <[COMPANION_GENERATION] T : Int, [COMPANION_GENERATION] K> resolveMe(): R|kotlin/Unit| { LAZY_BLOCK }

SUPER_TYPES:
FILE: [IMPORTS] functionWithTypeParameters.kt
    [RAW_FIR] annotations container
    public? final? [SUPER_TYPES] fun <[SUPER_TYPES] T : Int, [SUPER_TYPES] K> resolveMe(): R|kotlin/Unit| { LAZY_BLOCK }

TYPES:
FILE: [IMPORTS] functionWithTypeParameters.kt
    [RAW_FIR] annotations container
    public? final? [TYPES] fun <[TYPES] T : R|kotlin/Int|, [TYPES] K> resolveMe(): R|kotlin/Unit| { LAZY_BLOCK }

STATUS:
FILE: [IMPORTS] functionWithTypeParameters.kt
    [RAW_FIR] annotations container
    public final [STATUS] fun <[STATUS] T : R|kotlin/Int|, [STATUS] K> resolveMe(): R|kotlin/Unit| { LAZY_BLOCK }

EXPECT_ACTUAL_MATCHING:
FILE: [IMPORTS] functionWithTypeParameters.kt
    [RAW_FIR] annotations container
    public final [EXPECT_ACTUAL_MATCHING] fun <[EXPECT_ACTUAL_MATCHING] T : R|kotlin/Int|, [EXPECT_ACTUAL_MATCHING] K> resolveMe(): R|kotlin/Unit| {
    }

ARGUMENTS_OF_ANNOTATIONS:
FILE: [IMPORTS] functionWithTypeParameters.kt
    [RAW_FIR] annotations container
    public final [ARGUMENTS_OF_ANNOTATIONS] fun <[ARGUMENTS_OF_ANNOTATIONS] T : R|kotlin/Int|, [ARGUMENTS_OF_ANNOTATIONS] K> resolveMe(): R|kotlin/Unit| {
    }

CONTRACTS:
FILE: [IMPORTS] functionWithTypeParameters.kt
    [RAW_FIR] annotations container
    public final [CONTRACTS] fun <[CONTRACTS] T : R|kotlin/Int|, [CONTRACTS] K> resolveMe(): R|kotlin/Unit| {
    }

IMPLICIT_TYPES_BODY_RESOLVE:
FILE: [IMPORTS] functionWithTypeParameters.kt
    [RAW_FIR] annotations container
    public final [IMPLICIT_TYPES_BODY_RESOLVE] fun <[IMPLICIT_TYPES_BODY_RESOLVE] T : R|kotlin/Int|, [IMPLICIT_TYPES_BODY_RESOLVE] K> resolveMe(): R|kotlin/Unit| {
    }

ANNOTATIONS_ARGUMENTS_MAPPING:
FILE: [IMPORTS] functionWithTypeParameters.kt
    [RAW_FIR] annotations container
    public final [ANNOTATIONS_ARGUMENTS_MAPPING] fun <[ANNOTATIONS_ARGUMENTS_MAPPING] T : R|kotlin/Int|, [ANNOTATIONS_ARGUMENTS_MAPPING] K> resolveMe(): R|kotlin/Unit| {
    }

BODY_RESOLVE:
FILE: [IMPORTS] functionWithTypeParameters.kt
    [RAW_FIR] annotations container
    public final [BODY_RESOLVE] fun <[BODY_RESOLVE] T : R|kotlin/Int|, [BODY_RESOLVE] K> resolveMe(): R|kotlin/Unit| {
    }

FILE RAW TO BODY:
FILE: [IMPORTS] functionWithTypeParameters.kt
    [BODY_RESOLVE] annotations container
    public final [BODY_RESOLVE] fun <[BODY_RESOLVE] T : R|kotlin/Int|, [BODY_RESOLVE] K> resolveMe(): R|kotlin/Unit| {
    }

RAW_FIR:
FILE: [ResolvedTo(IMPORTS)] hierarchyWithOverrideScript.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public abstract [ResolvedTo(STATUS)] interface Foo1 : R|kotlin/Any| {
            public abstract [ResolvedTo(STATUS)] fun foo(): R|kotlin/Unit|

            public abstract [ResolvedTo(STATUS)] fun bar(): R|kotlin/Unit|

            public abstract [ResolvedTo(STATUS)] val str: R|kotlin/String|
                public [ResolvedTo(STATUS)] [ContainingClassKey=Foo1] get(): R|kotlin/String|

        }

        public abstract [ResolvedTo(STATUS)] interface Foo2 : R|Foo1| {
            public abstract [ResolvedTo(STATUS)] fun foo([ResolvedTo(STATUS)] i: R|kotlin/Int|): R|kotlin/Unit|

            public abstract [ResolvedTo(STATUS)] fun bar([ResolvedTo(STATUS)] s: R|kotlin/String|): R|kotlin/Unit|

            public abstract [ResolvedTo(STATUS)] val isBoo: R|kotlin/Boolean|
                public [ResolvedTo(STATUS)] [ContainingClassKey=Foo2] get(): R|kotlin/Boolean|

        }

        public abstract [ResolvedTo(STATUS)] class Usage : R|Foo2| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=Usage] constructor(): R|Usage| {
                super<R|kotlin/Any|>()
            }

            public open override [ResolvedTo(STATUS)] fun foo(): R|kotlin/Unit| {
            }

        }


IMPORTS:
FILE: [ResolvedTo(IMPORTS)] hierarchyWithOverrideScript.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public abstract [ResolvedTo(STATUS)] interface Foo1 : R|kotlin/Any| {
            public abstract [ResolvedTo(STATUS)] fun foo(): R|kotlin/Unit|

            public abstract [ResolvedTo(STATUS)] fun bar(): R|kotlin/Unit|

            public abstract [ResolvedTo(STATUS)] val str: R|kotlin/String|
                public [ResolvedTo(STATUS)] [ContainingClassKey=Foo1] get(): R|kotlin/String|

        }

        public abstract [ResolvedTo(STATUS)] interface Foo2 : R|Foo1| {
            public abstract [ResolvedTo(STATUS)] fun foo([ResolvedTo(STATUS)] i: R|kotlin/Int|): R|kotlin/Unit|

            public abstract [ResolvedTo(STATUS)] fun bar([ResolvedTo(STATUS)] s: R|kotlin/String|): R|kotlin/Unit|

            public abstract [ResolvedTo(STATUS)] val isBoo: R|kotlin/Boolean|
                public [ResolvedTo(STATUS)] [ContainingClassKey=Foo2] get(): R|kotlin/Boolean|

        }

        public abstract [ResolvedTo(STATUS)] class Usage : R|Foo2| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=Usage] constructor(): R|Usage| {
                super<R|kotlin/Any|>()
            }

            public open override [ResolvedTo(STATUS)] fun foo(): R|kotlin/Unit| {
            }

        }


COMPILER_REQUIRED_ANNOTATIONS:
FILE: [ResolvedTo(IMPORTS)] hierarchyWithOverrideScript.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public abstract [ResolvedTo(STATUS)] interface Foo1 : R|kotlin/Any| {
            public abstract [ResolvedTo(STATUS)] fun foo(): R|kotlin/Unit|

            public abstract [ResolvedTo(STATUS)] fun bar(): R|kotlin/Unit|

            public abstract [ResolvedTo(STATUS)] val str: R|kotlin/String|
                public [ResolvedTo(STATUS)] [ContainingClassKey=Foo1] get(): R|kotlin/String|

        }

        public abstract [ResolvedTo(STATUS)] interface Foo2 : R|Foo1| {
            public abstract [ResolvedTo(STATUS)] fun foo([ResolvedTo(STATUS)] i: R|kotlin/Int|): R|kotlin/Unit|

            public abstract [ResolvedTo(STATUS)] fun bar([ResolvedTo(STATUS)] s: R|kotlin/String|): R|kotlin/Unit|

            public abstract [ResolvedTo(STATUS)] val isBoo: R|kotlin/Boolean|
                public [ResolvedTo(STATUS)] [ContainingClassKey=Foo2] get(): R|kotlin/Boolean|

        }

        public abstract [ResolvedTo(STATUS)] class Usage : R|Foo2| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=Usage] constructor(): R|Usage| {
                super<R|kotlin/Any|>()
            }

            public open override [ResolvedTo(STATUS)] fun foo(): R|kotlin/Unit| {
            }

        }


COMPANION_GENERATION:
FILE: [ResolvedTo(IMPORTS)] hierarchyWithOverrideScript.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public abstract [ResolvedTo(STATUS)] interface Foo1 : R|kotlin/Any| {
            public abstract [ResolvedTo(STATUS)] fun foo(): R|kotlin/Unit|

            public abstract [ResolvedTo(STATUS)] fun bar(): R|kotlin/Unit|

            public abstract [ResolvedTo(STATUS)] val str: R|kotlin/String|
                public [ResolvedTo(STATUS)] [ContainingClassKey=Foo1] get(): R|kotlin/String|

        }

        public abstract [ResolvedTo(STATUS)] interface Foo2 : R|Foo1| {
            public abstract [ResolvedTo(STATUS)] fun foo([ResolvedTo(STATUS)] i: R|kotlin/Int|): R|kotlin/Unit|

            public abstract [ResolvedTo(STATUS)] fun bar([ResolvedTo(STATUS)] s: R|kotlin/String|): R|kotlin/Unit|

            public abstract [ResolvedTo(STATUS)] val isBoo: R|kotlin/Boolean|
                public [ResolvedTo(STATUS)] [ContainingClassKey=Foo2] get(): R|kotlin/Boolean|

        }

        public abstract [ResolvedTo(STATUS)] class Usage : R|Foo2| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=Usage] constructor(): R|Usage| {
                super<R|kotlin/Any|>()
            }

            public open override [ResolvedTo(STATUS)] fun foo(): R|kotlin/Unit| {
            }

        }


SUPER_TYPES:
FILE: [ResolvedTo(IMPORTS)] hierarchyWithOverrideScript.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public abstract [ResolvedTo(STATUS)] interface Foo1 : R|kotlin/Any| {
            public abstract [ResolvedTo(STATUS)] fun foo(): R|kotlin/Unit|

            public abstract [ResolvedTo(STATUS)] fun bar(): R|kotlin/Unit|

            public abstract [ResolvedTo(STATUS)] val str: R|kotlin/String|
                public [ResolvedTo(STATUS)] [ContainingClassKey=Foo1] get(): R|kotlin/String|

        }

        public abstract [ResolvedTo(STATUS)] interface Foo2 : R|Foo1| {
            public abstract [ResolvedTo(STATUS)] fun foo([ResolvedTo(STATUS)] i: R|kotlin/Int|): R|kotlin/Unit|

            public abstract [ResolvedTo(STATUS)] fun bar([ResolvedTo(STATUS)] s: R|kotlin/String|): R|kotlin/Unit|

            public abstract [ResolvedTo(STATUS)] val isBoo: R|kotlin/Boolean|
                public [ResolvedTo(STATUS)] [ContainingClassKey=Foo2] get(): R|kotlin/Boolean|

        }

        public abstract [ResolvedTo(STATUS)] class Usage : R|Foo2| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=Usage] constructor(): R|Usage| {
                super<R|kotlin/Any|>()
            }

            public open override [ResolvedTo(STATUS)] fun foo(): R|kotlin/Unit| {
            }

        }


TYPES:
FILE: [ResolvedTo(IMPORTS)] hierarchyWithOverrideScript.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public abstract [ResolvedTo(STATUS)] interface Foo1 : R|kotlin/Any| {
            public abstract [ResolvedTo(STATUS)] fun foo(): R|kotlin/Unit|

            public abstract [ResolvedTo(STATUS)] fun bar(): R|kotlin/Unit|

            public abstract [ResolvedTo(STATUS)] val str: R|kotlin/String|
                public [ResolvedTo(STATUS)] [ContainingClassKey=Foo1] get(): R|kotlin/String|

        }

        public abstract [ResolvedTo(STATUS)] interface Foo2 : R|Foo1| {
            public abstract [ResolvedTo(STATUS)] fun foo([ResolvedTo(STATUS)] i: R|kotlin/Int|): R|kotlin/Unit|

            public abstract [ResolvedTo(STATUS)] fun bar([ResolvedTo(STATUS)] s: R|kotlin/String|): R|kotlin/Unit|

            public abstract [ResolvedTo(STATUS)] val isBoo: R|kotlin/Boolean|
                public [ResolvedTo(STATUS)] [ContainingClassKey=Foo2] get(): R|kotlin/Boolean|

        }

        public abstract [ResolvedTo(STATUS)] class Usage : R|Foo2| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=Usage] constructor(): R|Usage| {
                super<R|kotlin/Any|>()
            }

            public open override [ResolvedTo(STATUS)] fun foo(): R|kotlin/Unit| {
            }

        }


STATUS:
FILE: [ResolvedTo(IMPORTS)] hierarchyWithOverrideScript.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public abstract [ResolvedTo(STATUS)] interface Foo1 : R|kotlin/Any| {
            public abstract [ResolvedTo(STATUS)] fun foo(): R|kotlin/Unit|

            public abstract [ResolvedTo(STATUS)] fun bar(): R|kotlin/Unit|

            public abstract [ResolvedTo(STATUS)] val str: R|kotlin/String|
                public [ResolvedTo(STATUS)] [ContainingClassKey=Foo1] get(): R|kotlin/String|

        }

        public abstract [ResolvedTo(STATUS)] interface Foo2 : R|Foo1| {
            public abstract [ResolvedTo(STATUS)] fun foo([ResolvedTo(STATUS)] i: R|kotlin/Int|): R|kotlin/Unit|

            public abstract [ResolvedTo(STATUS)] fun bar([ResolvedTo(STATUS)] s: R|kotlin/String|): R|kotlin/Unit|

            public abstract [ResolvedTo(STATUS)] val isBoo: R|kotlin/Boolean|
                public [ResolvedTo(STATUS)] [ContainingClassKey=Foo2] get(): R|kotlin/Boolean|

        }

        public abstract [ResolvedTo(STATUS)] class Usage : R|Foo2| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=Usage] constructor(): R|Usage| {
                super<R|kotlin/Any|>()
            }

            public open override [ResolvedTo(STATUS)] fun foo(): R|kotlin/Unit| {
            }

        }


EXPECT_ACTUAL_MATCHING:
FILE: [ResolvedTo(IMPORTS)] hierarchyWithOverrideScript.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public abstract [ResolvedTo(STATUS)] interface Foo1 : R|kotlin/Any| {
            public abstract [ResolvedTo(STATUS)] fun foo(): R|kotlin/Unit|

            public abstract [ResolvedTo(STATUS)] fun bar(): R|kotlin/Unit|

            public abstract [ResolvedTo(STATUS)] val str: R|kotlin/String|
                public [ResolvedTo(STATUS)] [ContainingClassKey=Foo1] get(): R|kotlin/String|

        }

        public abstract [ResolvedTo(STATUS)] interface Foo2 : R|Foo1| {
            public abstract [ResolvedTo(STATUS)] fun foo([ResolvedTo(STATUS)] i: R|kotlin/Int|): R|kotlin/Unit|

            public abstract [ResolvedTo(STATUS)] fun bar([ResolvedTo(STATUS)] s: R|kotlin/String|): R|kotlin/Unit|

            public abstract [ResolvedTo(STATUS)] val isBoo: R|kotlin/Boolean|
                public [ResolvedTo(STATUS)] [ContainingClassKey=Foo2] get(): R|kotlin/Boolean|

        }

        public abstract [ResolvedTo(STATUS)] class Usage : R|Foo2| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=Usage] constructor(): R|Usage| {
                super<R|kotlin/Any|>()
            }

            public open override [ResolvedTo(STATUS)] fun foo(): R|kotlin/Unit| {
            }

        }


ARGUMENTS_OF_ANNOTATIONS:
FILE: [ResolvedTo(IMPORTS)] hierarchyWithOverrideScript.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public abstract [ResolvedTo(STATUS)] interface Foo1 : R|kotlin/Any| {
            public abstract [ResolvedTo(STATUS)] fun foo(): R|kotlin/Unit|

            public abstract [ResolvedTo(STATUS)] fun bar(): R|kotlin/Unit|

            public abstract [ResolvedTo(STATUS)] val str: R|kotlin/String|
                public [ResolvedTo(STATUS)] [ContainingClassKey=Foo1] get(): R|kotlin/String|

        }

        public abstract [ResolvedTo(STATUS)] interface Foo2 : R|Foo1| {
            public abstract [ResolvedTo(STATUS)] fun foo([ResolvedTo(STATUS)] i: R|kotlin/Int|): R|kotlin/Unit|

            public abstract [ResolvedTo(STATUS)] fun bar([ResolvedTo(STATUS)] s: R|kotlin/String|): R|kotlin/Unit|

            public abstract [ResolvedTo(STATUS)] val isBoo: R|kotlin/Boolean|
                public [ResolvedTo(STATUS)] [ContainingClassKey=Foo2] get(): R|kotlin/Boolean|

        }

        public abstract [ResolvedTo(STATUS)] class Usage : R|Foo2| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=Usage] constructor(): R|Usage| {
                super<R|kotlin/Any|>()
            }

            public open override [ResolvedTo(STATUS)] fun foo(): R|kotlin/Unit| {
            }

        }


CONTRACTS:
FILE: [ResolvedTo(IMPORTS)] hierarchyWithOverrideScript.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public abstract [ResolvedTo(STATUS)] interface Foo1 : R|kotlin/Any| {
            public abstract [ResolvedTo(STATUS)] fun foo(): R|kotlin/Unit|

            public abstract [ResolvedTo(STATUS)] fun bar(): R|kotlin/Unit|

            public abstract [ResolvedTo(STATUS)] val str: R|kotlin/String|
                public [ResolvedTo(STATUS)] [ContainingClassKey=Foo1] get(): R|kotlin/String|

        }

        public abstract [ResolvedTo(STATUS)] interface Foo2 : R|Foo1| {
            public abstract [ResolvedTo(STATUS)] fun foo([ResolvedTo(STATUS)] i: R|kotlin/Int|): R|kotlin/Unit|

            public abstract [ResolvedTo(STATUS)] fun bar([ResolvedTo(STATUS)] s: R|kotlin/String|): R|kotlin/Unit|

            public abstract [ResolvedTo(STATUS)] val isBoo: R|kotlin/Boolean|
                public [ResolvedTo(STATUS)] [ContainingClassKey=Foo2] get(): R|kotlin/Boolean|

        }

        public abstract [ResolvedTo(STATUS)] class Usage : R|Foo2| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=Usage] constructor(): R|Usage| {
                super<R|kotlin/Any|>()
            }

            public open override [ResolvedTo(STATUS)] fun foo(): R|kotlin/Unit| {
            }

        }


IMPLICIT_TYPES_BODY_RESOLVE:
FILE: [ResolvedTo(IMPORTS)] hierarchyWithOverrideScript.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public abstract [ResolvedTo(STATUS)] interface Foo1 : R|kotlin/Any| {
            public abstract [ResolvedTo(STATUS)] fun foo(): R|kotlin/Unit|

            public abstract [ResolvedTo(STATUS)] fun bar(): R|kotlin/Unit|

            public abstract [ResolvedTo(STATUS)] val str: R|kotlin/String|
                public [ResolvedTo(STATUS)] [ContainingClassKey=Foo1] get(): R|kotlin/String|

        }

        public abstract [ResolvedTo(STATUS)] interface Foo2 : R|Foo1| {
            public abstract [ResolvedTo(STATUS)] fun foo([ResolvedTo(STATUS)] i: R|kotlin/Int|): R|kotlin/Unit|

            public abstract [ResolvedTo(STATUS)] fun bar([ResolvedTo(STATUS)] s: R|kotlin/String|): R|kotlin/Unit|

            public abstract [ResolvedTo(STATUS)] val isBoo: R|kotlin/Boolean|
                public [ResolvedTo(STATUS)] [ContainingClassKey=Foo2] get(): R|kotlin/Boolean|

        }

        public abstract [ResolvedTo(STATUS)] class Usage : R|Foo2| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=Usage] constructor(): R|Usage| {
                super<R|kotlin/Any|>()
            }

            public open override [ResolvedTo(STATUS)] fun foo(): R|kotlin/Unit| {
            }

        }


ANNOTATIONS_ARGUMENTS_MAPPING:
FILE: [ResolvedTo(IMPORTS)] hierarchyWithOverrideScript.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public abstract [ResolvedTo(STATUS)] interface Foo1 : R|kotlin/Any| {
            public abstract [ResolvedTo(STATUS)] fun foo(): R|kotlin/Unit|

            public abstract [ResolvedTo(STATUS)] fun bar(): R|kotlin/Unit|

            public abstract [ResolvedTo(STATUS)] val str: R|kotlin/String|
                public [ResolvedTo(STATUS)] [ContainingClassKey=Foo1] get(): R|kotlin/String|

        }

        public abstract [ResolvedTo(STATUS)] interface Foo2 : R|Foo1| {
            public abstract [ResolvedTo(STATUS)] fun foo([ResolvedTo(STATUS)] i: R|kotlin/Int|): R|kotlin/Unit|

            public abstract [ResolvedTo(STATUS)] fun bar([ResolvedTo(STATUS)] s: R|kotlin/String|): R|kotlin/Unit|

            public abstract [ResolvedTo(STATUS)] val isBoo: R|kotlin/Boolean|
                public [ResolvedTo(STATUS)] [ContainingClassKey=Foo2] get(): R|kotlin/Boolean|

        }

        public abstract [ResolvedTo(STATUS)] class Usage : R|Foo2| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=Usage] constructor(): R|Usage| {
                super<R|kotlin/Any|>()
            }

            public open override [ResolvedTo(STATUS)] fun foo(): R|kotlin/Unit| {
            }

        }


BODY_RESOLVE:
FILE: [ResolvedTo(IMPORTS)] hierarchyWithOverrideScript.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public abstract [ResolvedTo(STATUS)] interface Foo1 : R|kotlin/Any| {
            public abstract [ResolvedTo(STATUS)] fun foo(): R|kotlin/Unit|

            public abstract [ResolvedTo(STATUS)] fun bar(): R|kotlin/Unit|

            public abstract [ResolvedTo(STATUS)] val str: R|kotlin/String|
                public [ResolvedTo(STATUS)] [ContainingClassKey=Foo1] get(): R|kotlin/String|

        }

        public abstract [ResolvedTo(STATUS)] interface Foo2 : R|Foo1| {
            public abstract [ResolvedTo(STATUS)] fun foo([ResolvedTo(STATUS)] i: R|kotlin/Int|): R|kotlin/Unit|

            public abstract [ResolvedTo(STATUS)] fun bar([ResolvedTo(STATUS)] s: R|kotlin/String|): R|kotlin/Unit|

            public abstract [ResolvedTo(STATUS)] val isBoo: R|kotlin/Boolean|
                public [ResolvedTo(STATUS)] [ContainingClassKey=Foo2] get(): R|kotlin/Boolean|

        }

        public abstract [ResolvedTo(STATUS)] class Usage : R|Foo2| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=Usage] constructor(): R|Usage| {
                super<R|kotlin/Any|>()
            }

            public open override [ResolvedTo(STATUS)] fun foo(): R|kotlin/Unit| {
            }

        }


FILE RAW TO BODY:
FILE: [ResolvedTo(IMPORTS)] hierarchyWithOverrideScript.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public abstract [ResolvedTo(STATUS)] interface Foo1 : R|kotlin/Any| {
            public abstract [ResolvedTo(STATUS)] fun foo(): R|kotlin/Unit|

            public abstract [ResolvedTo(STATUS)] fun bar(): R|kotlin/Unit|

            public abstract [ResolvedTo(STATUS)] val str: R|kotlin/String|
                public [ResolvedTo(STATUS)] [ContainingClassKey=Foo1] get(): R|kotlin/String|

        }

        public abstract [ResolvedTo(STATUS)] interface Foo2 : R|Foo1| {
            public abstract [ResolvedTo(STATUS)] fun foo([ResolvedTo(STATUS)] i: R|kotlin/Int|): R|kotlin/Unit|

            public abstract [ResolvedTo(STATUS)] fun bar([ResolvedTo(STATUS)] s: R|kotlin/String|): R|kotlin/Unit|

            public abstract [ResolvedTo(STATUS)] val isBoo: R|kotlin/Boolean|
                public [ResolvedTo(STATUS)] [ContainingClassKey=Foo2] get(): R|kotlin/Boolean|

        }

        public abstract [ResolvedTo(STATUS)] class Usage : R|Foo2| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=Usage] constructor(): R|Usage| {
                super<R|kotlin/Any|>()
            }

            public open override [ResolvedTo(STATUS)] fun foo(): R|kotlin/Unit| {
            }

        }


RAW_FIR:
FILE: [ResolvedTo(IMPORTS)] lambdaAsSAMInterfaceScript.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public final [ResolvedTo(STATUS)] class Arg : R|kotlin/Any| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=Arg] constructor(): R|foo/Arg| {
                super<R|kotlin/Any|>()
            }

        }

        public abstract fun [ResolvedTo(STATUS)] interface Foo : R|kotlin/Any| {
            public abstract [ResolvedTo(STATUS)] fun foo([ResolvedTo(STATUS)] a: R|foo/Arg|): R|foo/Arg|

        }

        public final [ResolvedTo(RAW_FIR)] fun testMe([ResolvedTo(RAW_FIR)] f: R|foo/Foo|): R|kotlin/Unit| {
        }

        public final [ResolvedTo(RAW_FIR)] fun resolveMe(): R|kotlin/Unit| {
            R|foo/testMe|(<L> = [ResolvedTo(RAW_FIR)] [MatchingParameterFunctionTypeKey=foo/Foo] testMe@fun <anonymous>([ResolvedTo(RAW_FIR)] b: R|foo/Arg|): R|foo/Arg| <inline=NoInline>  {
                ^ R|<local>/b|
            }
            )
        }


IMPORTS:
FILE: [ResolvedTo(IMPORTS)] lambdaAsSAMInterfaceScript.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public final [ResolvedTo(STATUS)] class Arg : R|kotlin/Any| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=Arg] constructor(): R|foo/Arg| {
                super<R|kotlin/Any|>()
            }

        }

        public abstract fun [ResolvedTo(STATUS)] interface Foo : R|kotlin/Any| {
            public abstract [ResolvedTo(STATUS)] fun foo([ResolvedTo(STATUS)] a: R|foo/Arg|): R|foo/Arg|

        }

        public final [ResolvedTo(RAW_FIR)] fun testMe([ResolvedTo(RAW_FIR)] f: R|foo/Foo|): R|kotlin/Unit| {
        }

        public final [ResolvedTo(RAW_FIR)] fun resolveMe(): R|kotlin/Unit| {
            R|foo/testMe|(<L> = [ResolvedTo(RAW_FIR)] [MatchingParameterFunctionTypeKey=foo/Foo] testMe@fun <anonymous>([ResolvedTo(RAW_FIR)] b: R|foo/Arg|): R|foo/Arg| <inline=NoInline>  {
                ^ R|<local>/b|
            }
            )
        }


COMPILER_REQUIRED_ANNOTATIONS:
FILE: [ResolvedTo(IMPORTS)] lambdaAsSAMInterfaceScript.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public final [ResolvedTo(STATUS)] class Arg : R|kotlin/Any| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=Arg] constructor(): R|foo/Arg| {
                super<R|kotlin/Any|>()
            }

        }

        public abstract fun [ResolvedTo(STATUS)] interface Foo : R|kotlin/Any| {
            public abstract [ResolvedTo(STATUS)] fun foo([ResolvedTo(STATUS)] a: R|foo/Arg|): R|foo/Arg|

        }

        public final [ResolvedTo(RAW_FIR)] fun testMe([ResolvedTo(RAW_FIR)] f: R|foo/Foo|): R|kotlin/Unit| {
        }

        public final [ResolvedTo(RAW_FIR)] fun resolveMe(): R|kotlin/Unit| {
            R|foo/testMe|(<L> = [ResolvedTo(RAW_FIR)] [MatchingParameterFunctionTypeKey=foo/Foo] testMe@fun <anonymous>([ResolvedTo(RAW_FIR)] b: R|foo/Arg|): R|foo/Arg| <inline=NoInline>  {
                ^ R|<local>/b|
            }
            )
        }


COMPANION_GENERATION:
FILE: [ResolvedTo(IMPORTS)] lambdaAsSAMInterfaceScript.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public final [ResolvedTo(STATUS)] class Arg : R|kotlin/Any| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=Arg] constructor(): R|foo/Arg| {
                super<R|kotlin/Any|>()
            }

        }

        public abstract fun [ResolvedTo(STATUS)] interface Foo : R|kotlin/Any| {
            public abstract [ResolvedTo(STATUS)] fun foo([ResolvedTo(STATUS)] a: R|foo/Arg|): R|foo/Arg|

        }

        public final [ResolvedTo(RAW_FIR)] fun testMe([ResolvedTo(RAW_FIR)] f: R|foo/Foo|): R|kotlin/Unit| {
        }

        public final [ResolvedTo(RAW_FIR)] fun resolveMe(): R|kotlin/Unit| {
            R|foo/testMe|(<L> = [ResolvedTo(RAW_FIR)] [MatchingParameterFunctionTypeKey=foo/Foo] testMe@fun <anonymous>([ResolvedTo(RAW_FIR)] b: R|foo/Arg|): R|foo/Arg| <inline=NoInline>  {
                ^ R|<local>/b|
            }
            )
        }


SUPER_TYPES:
FILE: [ResolvedTo(IMPORTS)] lambdaAsSAMInterfaceScript.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public final [ResolvedTo(STATUS)] class Arg : R|kotlin/Any| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=Arg] constructor(): R|foo/Arg| {
                super<R|kotlin/Any|>()
            }

        }

        public abstract fun [ResolvedTo(STATUS)] interface Foo : R|kotlin/Any| {
            public abstract [ResolvedTo(STATUS)] fun foo([ResolvedTo(STATUS)] a: R|foo/Arg|): R|foo/Arg|

        }

        public final [ResolvedTo(RAW_FIR)] fun testMe([ResolvedTo(RAW_FIR)] f: R|foo/Foo|): R|kotlin/Unit| {
        }

        public final [ResolvedTo(RAW_FIR)] fun resolveMe(): R|kotlin/Unit| {
            R|foo/testMe|(<L> = [ResolvedTo(RAW_FIR)] [MatchingParameterFunctionTypeKey=foo/Foo] testMe@fun <anonymous>([ResolvedTo(RAW_FIR)] b: R|foo/Arg|): R|foo/Arg| <inline=NoInline>  {
                ^ R|<local>/b|
            }
            )
        }


TYPES:
FILE: [ResolvedTo(IMPORTS)] lambdaAsSAMInterfaceScript.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public final [ResolvedTo(STATUS)] class Arg : R|kotlin/Any| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=Arg] constructor(): R|foo/Arg| {
                super<R|kotlin/Any|>()
            }

        }

        public abstract fun [ResolvedTo(STATUS)] interface Foo : R|kotlin/Any| {
            public abstract [ResolvedTo(STATUS)] fun foo([ResolvedTo(STATUS)] a: R|foo/Arg|): R|foo/Arg|

        }

        public final [ResolvedTo(RAW_FIR)] fun testMe([ResolvedTo(RAW_FIR)] f: R|foo/Foo|): R|kotlin/Unit| {
        }

        public final [ResolvedTo(RAW_FIR)] fun resolveMe(): R|kotlin/Unit| {
            R|foo/testMe|(<L> = [ResolvedTo(RAW_FIR)] [MatchingParameterFunctionTypeKey=foo/Foo] testMe@fun <anonymous>([ResolvedTo(RAW_FIR)] b: R|foo/Arg|): R|foo/Arg| <inline=NoInline>  {
                ^ R|<local>/b|
            }
            )
        }


STATUS:
FILE: [ResolvedTo(IMPORTS)] lambdaAsSAMInterfaceScript.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public final [ResolvedTo(STATUS)] class Arg : R|kotlin/Any| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=Arg] constructor(): R|foo/Arg| {
                super<R|kotlin/Any|>()
            }

        }

        public abstract fun [ResolvedTo(STATUS)] interface Foo : R|kotlin/Any| {
            public abstract [ResolvedTo(STATUS)] fun foo([ResolvedTo(STATUS)] a: R|foo/Arg|): R|foo/Arg|

        }

        public final [ResolvedTo(RAW_FIR)] fun testMe([ResolvedTo(RAW_FIR)] f: R|foo/Foo|): R|kotlin/Unit| {
        }

        public final [ResolvedTo(RAW_FIR)] fun resolveMe(): R|kotlin/Unit| {
            R|foo/testMe|(<L> = [ResolvedTo(RAW_FIR)] [MatchingParameterFunctionTypeKey=foo/Foo] testMe@fun <anonymous>([ResolvedTo(RAW_FIR)] b: R|foo/Arg|): R|foo/Arg| <inline=NoInline>  {
                ^ R|<local>/b|
            }
            )
        }


EXPECT_ACTUAL_MATCHING:
FILE: [ResolvedTo(IMPORTS)] lambdaAsSAMInterfaceScript.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public final [ResolvedTo(STATUS)] class Arg : R|kotlin/Any| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=Arg] constructor(): R|foo/Arg| {
                super<R|kotlin/Any|>()
            }

        }

        public abstract fun [ResolvedTo(STATUS)] interface Foo : R|kotlin/Any| {
            public abstract [ResolvedTo(STATUS)] fun foo([ResolvedTo(STATUS)] a: R|foo/Arg|): R|foo/Arg|

        }

        public final [ResolvedTo(RAW_FIR)] fun testMe([ResolvedTo(RAW_FIR)] f: R|foo/Foo|): R|kotlin/Unit| {
        }

        public final [ResolvedTo(RAW_FIR)] fun resolveMe(): R|kotlin/Unit| {
            R|foo/testMe|(<L> = [ResolvedTo(RAW_FIR)] [MatchingParameterFunctionTypeKey=foo/Foo] testMe@fun <anonymous>([ResolvedTo(RAW_FIR)] b: R|foo/Arg|): R|foo/Arg| <inline=NoInline>  {
                ^ R|<local>/b|
            }
            )
        }


ARGUMENTS_OF_ANNOTATIONS:
FILE: [ResolvedTo(IMPORTS)] lambdaAsSAMInterfaceScript.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public final [ResolvedTo(STATUS)] class Arg : R|kotlin/Any| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=Arg] constructor(): R|foo/Arg| {
                super<R|kotlin/Any|>()
            }

        }

        public abstract fun [ResolvedTo(STATUS)] interface Foo : R|kotlin/Any| {
            public abstract [ResolvedTo(STATUS)] fun foo([ResolvedTo(STATUS)] a: R|foo/Arg|): R|foo/Arg|

        }

        public final [ResolvedTo(RAW_FIR)] fun testMe([ResolvedTo(RAW_FIR)] f: R|foo/Foo|): R|kotlin/Unit| {
        }

        public final [ResolvedTo(RAW_FIR)] fun resolveMe(): R|kotlin/Unit| {
            R|foo/testMe|(<L> = [ResolvedTo(RAW_FIR)] [MatchingParameterFunctionTypeKey=foo/Foo] testMe@fun <anonymous>([ResolvedTo(RAW_FIR)] b: R|foo/Arg|): R|foo/Arg| <inline=NoInline>  {
                ^ R|<local>/b|
            }
            )
        }


CONTRACTS:
FILE: [ResolvedTo(IMPORTS)] lambdaAsSAMInterfaceScript.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public final [ResolvedTo(STATUS)] class Arg : R|kotlin/Any| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=Arg] constructor(): R|foo/Arg| {
                super<R|kotlin/Any|>()
            }

        }

        public abstract fun [ResolvedTo(STATUS)] interface Foo : R|kotlin/Any| {
            public abstract [ResolvedTo(STATUS)] fun foo([ResolvedTo(STATUS)] a: R|foo/Arg|): R|foo/Arg|

        }

        public final [ResolvedTo(RAW_FIR)] fun testMe([ResolvedTo(RAW_FIR)] f: R|foo/Foo|): R|kotlin/Unit| {
        }

        public final [ResolvedTo(RAW_FIR)] fun resolveMe(): R|kotlin/Unit| {
            R|foo/testMe|(<L> = [ResolvedTo(RAW_FIR)] [MatchingParameterFunctionTypeKey=foo/Foo] testMe@fun <anonymous>([ResolvedTo(RAW_FIR)] b: R|foo/Arg|): R|foo/Arg| <inline=NoInline>  {
                ^ R|<local>/b|
            }
            )
        }


IMPLICIT_TYPES_BODY_RESOLVE:
FILE: [ResolvedTo(IMPORTS)] lambdaAsSAMInterfaceScript.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public final [ResolvedTo(STATUS)] class Arg : R|kotlin/Any| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=Arg] constructor(): R|foo/Arg| {
                super<R|kotlin/Any|>()
            }

        }

        public abstract fun [ResolvedTo(STATUS)] interface Foo : R|kotlin/Any| {
            public abstract [ResolvedTo(STATUS)] fun foo([ResolvedTo(STATUS)] a: R|foo/Arg|): R|foo/Arg|

        }

        public final [ResolvedTo(RAW_FIR)] fun testMe([ResolvedTo(RAW_FIR)] f: R|foo/Foo|): R|kotlin/Unit| {
        }

        public final [ResolvedTo(RAW_FIR)] fun resolveMe(): R|kotlin/Unit| {
            R|foo/testMe|(<L> = [ResolvedTo(RAW_FIR)] [MatchingParameterFunctionTypeKey=foo/Foo] testMe@fun <anonymous>([ResolvedTo(RAW_FIR)] b: R|foo/Arg|): R|foo/Arg| <inline=NoInline>  {
                ^ R|<local>/b|
            }
            )
        }


ANNOTATIONS_ARGUMENTS_MAPPING:
FILE: [ResolvedTo(IMPORTS)] lambdaAsSAMInterfaceScript.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public final [ResolvedTo(STATUS)] class Arg : R|kotlin/Any| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=Arg] constructor(): R|foo/Arg| {
                super<R|kotlin/Any|>()
            }

        }

        public abstract fun [ResolvedTo(STATUS)] interface Foo : R|kotlin/Any| {
            public abstract [ResolvedTo(STATUS)] fun foo([ResolvedTo(STATUS)] a: R|foo/Arg|): R|foo/Arg|

        }

        public final [ResolvedTo(RAW_FIR)] fun testMe([ResolvedTo(RAW_FIR)] f: R|foo/Foo|): R|kotlin/Unit| {
        }

        public final [ResolvedTo(RAW_FIR)] fun resolveMe(): R|kotlin/Unit| {
            R|foo/testMe|(<L> = [ResolvedTo(RAW_FIR)] [MatchingParameterFunctionTypeKey=foo/Foo] testMe@fun <anonymous>([ResolvedTo(RAW_FIR)] b: R|foo/Arg|): R|foo/Arg| <inline=NoInline>  {
                ^ R|<local>/b|
            }
            )
        }


BODY_RESOLVE:
FILE: [ResolvedTo(IMPORTS)] lambdaAsSAMInterfaceScript.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public final [ResolvedTo(STATUS)] class Arg : R|kotlin/Any| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=Arg] constructor(): R|foo/Arg| {
                super<R|kotlin/Any|>()
            }

        }

        public abstract fun [ResolvedTo(STATUS)] interface Foo : R|kotlin/Any| {
            public abstract [ResolvedTo(STATUS)] fun foo([ResolvedTo(STATUS)] a: R|foo/Arg|): R|foo/Arg|

        }

        public final [ResolvedTo(RAW_FIR)] fun testMe([ResolvedTo(RAW_FIR)] f: R|foo/Foo|): R|kotlin/Unit| {
        }

        public final [ResolvedTo(RAW_FIR)] fun resolveMe(): R|kotlin/Unit| {
            R|foo/testMe|(<L> = [ResolvedTo(RAW_FIR)] [MatchingParameterFunctionTypeKey=foo/Foo] testMe@fun <anonymous>([ResolvedTo(RAW_FIR)] b: R|foo/Arg|): R|foo/Arg| <inline=NoInline>  {
                ^ R|<local>/b|
            }
            )
        }


FILE RAW TO BODY:
FILE: [ResolvedTo(IMPORTS)] lambdaAsSAMInterfaceScript.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public final [ResolvedTo(STATUS)] class Arg : R|kotlin/Any| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=Arg] constructor(): R|foo/Arg| {
                super<R|kotlin/Any|>()
            }

        }

        public abstract fun [ResolvedTo(STATUS)] interface Foo : R|kotlin/Any| {
            public abstract [ResolvedTo(STATUS)] fun foo([ResolvedTo(STATUS)] a: R|foo/Arg|): R|foo/Arg|

        }

        public final [ResolvedTo(RAW_FIR)] fun testMe([ResolvedTo(RAW_FIR)] f: R|foo/Foo|): R|kotlin/Unit| {
        }

        public final [ResolvedTo(RAW_FIR)] fun resolveMe(): R|kotlin/Unit| {
            R|foo/testMe|(<L> = [ResolvedTo(RAW_FIR)] [MatchingParameterFunctionTypeKey=foo/Foo] testMe@fun <anonymous>([ResolvedTo(RAW_FIR)] b: R|foo/Arg|): R|foo/Arg| <inline=NoInline>  {
                ^ R|<local>/b|
            }
            )
        }


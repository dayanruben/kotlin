RAW_FIR:
FILE: [ResolvedTo(IMPORTS)] lazyPropertyScript.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public final [ResolvedTo(STATUS)] class LazyDelegate<[ResolvedTo(STATUS)] T> : R|kotlin/Any| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=LazyDelegate] constructor<[ResolvedTo(STATUS)] T>([ResolvedTo(STATUS)] [CorrespondingProperty=/LazyDelegate.value] value: R|T|): R|LazyDelegate<T>| {
                super<R|kotlin/Any|>()
            }

            public final [ResolvedTo(STATUS)] [IsFromPrimaryConstructor=true] val value: R|T| = R|<local>/value|
                public [ResolvedTo(STATUS)] [ContainingClassKey=LazyDelegate] get(): R|T|

            public final operator [ResolvedTo(STATUS)] fun getValue([ResolvedTo(STATUS)] thisRef: R|kotlin/Any?|, [ResolvedTo(STATUS)] property: R|kotlin/reflect/KProperty<*>|): R|T| {
                ^getValue this@R|/LazyDelegate|.R|/LazyDelegate.value|
            }

        }

        public final [ResolvedTo(RAW_FIR)] fun <[ResolvedTo(RAW_FIR)] T> lazy([ResolvedTo(RAW_FIR)] block: R|() -> T|): R|LazyDelegate<T>| {
            ^lazy R|SubstitutionOverride</LazyDelegate.LazyDelegate>|<R|T|>(R|<local>/block|.R|SubstitutionOverride<kotlin/Function0.invoke: R|T|>|())
        }

        public final [ResolvedTo(RAW_FIR)] fun getAny(): R|kotlin/Any?| {
            ^getAny Null(null)
        }

        public final [ResolvedTo(RAW_FIR)] fun <[ResolvedTo(RAW_FIR)] Q> materialize(): R|Q| {
            ^materialize Null(null)!!
        }

        public final [ResolvedTo(STATUS)] class Test : R|kotlin/Any| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=Test] constructor(): R|Test| {
                super<R|kotlin/Any|>()
            }

            public final [ResolvedTo(STATUS)] val resolveMe: R|kotlin/String|by R|/lazy|<R|kotlin/String|>(<L> = [ResolvedTo(RAW_FIR)] [MatchingParameterFunctionTypeKey=kotlin/Function0<T>] lazy@fun <anonymous>(): R|kotlin/String| <inline=NoInline>  {
                ^ R|/materialize|<R|kotlin/String|>()
            }
            )
                public [ResolvedTo(STATUS)] [ContainingClassKey=Test] get(): R|kotlin/String| {
                    ^ this@R|/Test|.D|/Test.resolveMe|.R|SubstitutionOverride</LazyDelegate.getValue: R|Stub (chain inference): TypeVariable(_T)|>|(this@R|/Test|, ::R|/Test.resolveMe|)
                }

        }


IMPORTS:
FILE: [ResolvedTo(IMPORTS)] lazyPropertyScript.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public final [ResolvedTo(STATUS)] class LazyDelegate<[ResolvedTo(STATUS)] T> : R|kotlin/Any| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=LazyDelegate] constructor<[ResolvedTo(STATUS)] T>([ResolvedTo(STATUS)] [CorrespondingProperty=/LazyDelegate.value] value: R|T|): R|LazyDelegate<T>| {
                super<R|kotlin/Any|>()
            }

            public final [ResolvedTo(STATUS)] [IsFromPrimaryConstructor=true] val value: R|T| = R|<local>/value|
                public [ResolvedTo(STATUS)] [ContainingClassKey=LazyDelegate] get(): R|T|

            public final operator [ResolvedTo(STATUS)] fun getValue([ResolvedTo(STATUS)] thisRef: R|kotlin/Any?|, [ResolvedTo(STATUS)] property: R|kotlin/reflect/KProperty<*>|): R|T| {
                ^getValue this@R|/LazyDelegate|.R|/LazyDelegate.value|
            }

        }

        public final [ResolvedTo(RAW_FIR)] fun <[ResolvedTo(RAW_FIR)] T> lazy([ResolvedTo(RAW_FIR)] block: R|() -> T|): R|LazyDelegate<T>| {
            ^lazy R|SubstitutionOverride</LazyDelegate.LazyDelegate>|<R|T|>(R|<local>/block|.R|SubstitutionOverride<kotlin/Function0.invoke: R|T|>|())
        }

        public final [ResolvedTo(RAW_FIR)] fun getAny(): R|kotlin/Any?| {
            ^getAny Null(null)
        }

        public final [ResolvedTo(RAW_FIR)] fun <[ResolvedTo(RAW_FIR)] Q> materialize(): R|Q| {
            ^materialize Null(null)!!
        }

        public final [ResolvedTo(STATUS)] class Test : R|kotlin/Any| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=Test] constructor(): R|Test| {
                super<R|kotlin/Any|>()
            }

            public final [ResolvedTo(STATUS)] val resolveMe: R|kotlin/String|by R|/lazy|<R|kotlin/String|>(<L> = [ResolvedTo(RAW_FIR)] [MatchingParameterFunctionTypeKey=kotlin/Function0<T>] lazy@fun <anonymous>(): R|kotlin/String| <inline=NoInline>  {
                ^ R|/materialize|<R|kotlin/String|>()
            }
            )
                public [ResolvedTo(STATUS)] [ContainingClassKey=Test] get(): R|kotlin/String| {
                    ^ this@R|/Test|.D|/Test.resolveMe|.R|SubstitutionOverride</LazyDelegate.getValue: R|Stub (chain inference): TypeVariable(_T)|>|(this@R|/Test|, ::R|/Test.resolveMe|)
                }

        }


COMPILER_REQUIRED_ANNOTATIONS:
FILE: [ResolvedTo(IMPORTS)] lazyPropertyScript.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public final [ResolvedTo(STATUS)] class LazyDelegate<[ResolvedTo(STATUS)] T> : R|kotlin/Any| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=LazyDelegate] constructor<[ResolvedTo(STATUS)] T>([ResolvedTo(STATUS)] [CorrespondingProperty=/LazyDelegate.value] value: R|T|): R|LazyDelegate<T>| {
                super<R|kotlin/Any|>()
            }

            public final [ResolvedTo(STATUS)] [IsFromPrimaryConstructor=true] val value: R|T| = R|<local>/value|
                public [ResolvedTo(STATUS)] [ContainingClassKey=LazyDelegate] get(): R|T|

            public final operator [ResolvedTo(STATUS)] fun getValue([ResolvedTo(STATUS)] thisRef: R|kotlin/Any?|, [ResolvedTo(STATUS)] property: R|kotlin/reflect/KProperty<*>|): R|T| {
                ^getValue this@R|/LazyDelegate|.R|/LazyDelegate.value|
            }

        }

        public final [ResolvedTo(RAW_FIR)] fun <[ResolvedTo(RAW_FIR)] T> lazy([ResolvedTo(RAW_FIR)] block: R|() -> T|): R|LazyDelegate<T>| {
            ^lazy R|SubstitutionOverride</LazyDelegate.LazyDelegate>|<R|T|>(R|<local>/block|.R|SubstitutionOverride<kotlin/Function0.invoke: R|T|>|())
        }

        public final [ResolvedTo(RAW_FIR)] fun getAny(): R|kotlin/Any?| {
            ^getAny Null(null)
        }

        public final [ResolvedTo(RAW_FIR)] fun <[ResolvedTo(RAW_FIR)] Q> materialize(): R|Q| {
            ^materialize Null(null)!!
        }

        public final [ResolvedTo(STATUS)] class Test : R|kotlin/Any| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=Test] constructor(): R|Test| {
                super<R|kotlin/Any|>()
            }

            public final [ResolvedTo(STATUS)] val resolveMe: R|kotlin/String|by R|/lazy|<R|kotlin/String|>(<L> = [ResolvedTo(RAW_FIR)] [MatchingParameterFunctionTypeKey=kotlin/Function0<T>] lazy@fun <anonymous>(): R|kotlin/String| <inline=NoInline>  {
                ^ R|/materialize|<R|kotlin/String|>()
            }
            )
                public [ResolvedTo(STATUS)] [ContainingClassKey=Test] get(): R|kotlin/String| {
                    ^ this@R|/Test|.D|/Test.resolveMe|.R|SubstitutionOverride</LazyDelegate.getValue: R|Stub (chain inference): TypeVariable(_T)|>|(this@R|/Test|, ::R|/Test.resolveMe|)
                }

        }


COMPANION_GENERATION:
FILE: [ResolvedTo(IMPORTS)] lazyPropertyScript.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public final [ResolvedTo(STATUS)] class LazyDelegate<[ResolvedTo(STATUS)] T> : R|kotlin/Any| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=LazyDelegate] constructor<[ResolvedTo(STATUS)] T>([ResolvedTo(STATUS)] [CorrespondingProperty=/LazyDelegate.value] value: R|T|): R|LazyDelegate<T>| {
                super<R|kotlin/Any|>()
            }

            public final [ResolvedTo(STATUS)] [IsFromPrimaryConstructor=true] val value: R|T| = R|<local>/value|
                public [ResolvedTo(STATUS)] [ContainingClassKey=LazyDelegate] get(): R|T|

            public final operator [ResolvedTo(STATUS)] fun getValue([ResolvedTo(STATUS)] thisRef: R|kotlin/Any?|, [ResolvedTo(STATUS)] property: R|kotlin/reflect/KProperty<*>|): R|T| {
                ^getValue this@R|/LazyDelegate|.R|/LazyDelegate.value|
            }

        }

        public final [ResolvedTo(RAW_FIR)] fun <[ResolvedTo(RAW_FIR)] T> lazy([ResolvedTo(RAW_FIR)] block: R|() -> T|): R|LazyDelegate<T>| {
            ^lazy R|SubstitutionOverride</LazyDelegate.LazyDelegate>|<R|T|>(R|<local>/block|.R|SubstitutionOverride<kotlin/Function0.invoke: R|T|>|())
        }

        public final [ResolvedTo(RAW_FIR)] fun getAny(): R|kotlin/Any?| {
            ^getAny Null(null)
        }

        public final [ResolvedTo(RAW_FIR)] fun <[ResolvedTo(RAW_FIR)] Q> materialize(): R|Q| {
            ^materialize Null(null)!!
        }

        public final [ResolvedTo(STATUS)] class Test : R|kotlin/Any| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=Test] constructor(): R|Test| {
                super<R|kotlin/Any|>()
            }

            public final [ResolvedTo(STATUS)] val resolveMe: R|kotlin/String|by R|/lazy|<R|kotlin/String|>(<L> = [ResolvedTo(RAW_FIR)] [MatchingParameterFunctionTypeKey=kotlin/Function0<T>] lazy@fun <anonymous>(): R|kotlin/String| <inline=NoInline>  {
                ^ R|/materialize|<R|kotlin/String|>()
            }
            )
                public [ResolvedTo(STATUS)] [ContainingClassKey=Test] get(): R|kotlin/String| {
                    ^ this@R|/Test|.D|/Test.resolveMe|.R|SubstitutionOverride</LazyDelegate.getValue: R|Stub (chain inference): TypeVariable(_T)|>|(this@R|/Test|, ::R|/Test.resolveMe|)
                }

        }


SUPER_TYPES:
FILE: [ResolvedTo(IMPORTS)] lazyPropertyScript.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public final [ResolvedTo(STATUS)] class LazyDelegate<[ResolvedTo(STATUS)] T> : R|kotlin/Any| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=LazyDelegate] constructor<[ResolvedTo(STATUS)] T>([ResolvedTo(STATUS)] [CorrespondingProperty=/LazyDelegate.value] value: R|T|): R|LazyDelegate<T>| {
                super<R|kotlin/Any|>()
            }

            public final [ResolvedTo(STATUS)] [IsFromPrimaryConstructor=true] val value: R|T| = R|<local>/value|
                public [ResolvedTo(STATUS)] [ContainingClassKey=LazyDelegate] get(): R|T|

            public final operator [ResolvedTo(STATUS)] fun getValue([ResolvedTo(STATUS)] thisRef: R|kotlin/Any?|, [ResolvedTo(STATUS)] property: R|kotlin/reflect/KProperty<*>|): R|T| {
                ^getValue this@R|/LazyDelegate|.R|/LazyDelegate.value|
            }

        }

        public final [ResolvedTo(RAW_FIR)] fun <[ResolvedTo(RAW_FIR)] T> lazy([ResolvedTo(RAW_FIR)] block: R|() -> T|): R|LazyDelegate<T>| {
            ^lazy R|SubstitutionOverride</LazyDelegate.LazyDelegate>|<R|T|>(R|<local>/block|.R|SubstitutionOverride<kotlin/Function0.invoke: R|T|>|())
        }

        public final [ResolvedTo(RAW_FIR)] fun getAny(): R|kotlin/Any?| {
            ^getAny Null(null)
        }

        public final [ResolvedTo(RAW_FIR)] fun <[ResolvedTo(RAW_FIR)] Q> materialize(): R|Q| {
            ^materialize Null(null)!!
        }

        public final [ResolvedTo(STATUS)] class Test : R|kotlin/Any| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=Test] constructor(): R|Test| {
                super<R|kotlin/Any|>()
            }

            public final [ResolvedTo(STATUS)] val resolveMe: R|kotlin/String|by R|/lazy|<R|kotlin/String|>(<L> = [ResolvedTo(RAW_FIR)] [MatchingParameterFunctionTypeKey=kotlin/Function0<T>] lazy@fun <anonymous>(): R|kotlin/String| <inline=NoInline>  {
                ^ R|/materialize|<R|kotlin/String|>()
            }
            )
                public [ResolvedTo(STATUS)] [ContainingClassKey=Test] get(): R|kotlin/String| {
                    ^ this@R|/Test|.D|/Test.resolveMe|.R|SubstitutionOverride</LazyDelegate.getValue: R|Stub (chain inference): TypeVariable(_T)|>|(this@R|/Test|, ::R|/Test.resolveMe|)
                }

        }


TYPES:
FILE: [ResolvedTo(IMPORTS)] lazyPropertyScript.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public final [ResolvedTo(STATUS)] class LazyDelegate<[ResolvedTo(STATUS)] T> : R|kotlin/Any| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=LazyDelegate] constructor<[ResolvedTo(STATUS)] T>([ResolvedTo(STATUS)] [CorrespondingProperty=/LazyDelegate.value] value: R|T|): R|LazyDelegate<T>| {
                super<R|kotlin/Any|>()
            }

            public final [ResolvedTo(STATUS)] [IsFromPrimaryConstructor=true] val value: R|T| = R|<local>/value|
                public [ResolvedTo(STATUS)] [ContainingClassKey=LazyDelegate] get(): R|T|

            public final operator [ResolvedTo(STATUS)] fun getValue([ResolvedTo(STATUS)] thisRef: R|kotlin/Any?|, [ResolvedTo(STATUS)] property: R|kotlin/reflect/KProperty<*>|): R|T| {
                ^getValue this@R|/LazyDelegate|.R|/LazyDelegate.value|
            }

        }

        public final [ResolvedTo(RAW_FIR)] fun <[ResolvedTo(RAW_FIR)] T> lazy([ResolvedTo(RAW_FIR)] block: R|() -> T|): R|LazyDelegate<T>| {
            ^lazy R|SubstitutionOverride</LazyDelegate.LazyDelegate>|<R|T|>(R|<local>/block|.R|SubstitutionOverride<kotlin/Function0.invoke: R|T|>|())
        }

        public final [ResolvedTo(RAW_FIR)] fun getAny(): R|kotlin/Any?| {
            ^getAny Null(null)
        }

        public final [ResolvedTo(RAW_FIR)] fun <[ResolvedTo(RAW_FIR)] Q> materialize(): R|Q| {
            ^materialize Null(null)!!
        }

        public final [ResolvedTo(STATUS)] class Test : R|kotlin/Any| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=Test] constructor(): R|Test| {
                super<R|kotlin/Any|>()
            }

            public final [ResolvedTo(STATUS)] val resolveMe: R|kotlin/String|by R|/lazy|<R|kotlin/String|>(<L> = [ResolvedTo(RAW_FIR)] [MatchingParameterFunctionTypeKey=kotlin/Function0<T>] lazy@fun <anonymous>(): R|kotlin/String| <inline=NoInline>  {
                ^ R|/materialize|<R|kotlin/String|>()
            }
            )
                public [ResolvedTo(STATUS)] [ContainingClassKey=Test] get(): R|kotlin/String| {
                    ^ this@R|/Test|.D|/Test.resolveMe|.R|SubstitutionOverride</LazyDelegate.getValue: R|Stub (chain inference): TypeVariable(_T)|>|(this@R|/Test|, ::R|/Test.resolveMe|)
                }

        }


STATUS:
FILE: [ResolvedTo(IMPORTS)] lazyPropertyScript.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public final [ResolvedTo(STATUS)] class LazyDelegate<[ResolvedTo(STATUS)] T> : R|kotlin/Any| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=LazyDelegate] constructor<[ResolvedTo(STATUS)] T>([ResolvedTo(STATUS)] [CorrespondingProperty=/LazyDelegate.value] value: R|T|): R|LazyDelegate<T>| {
                super<R|kotlin/Any|>()
            }

            public final [ResolvedTo(STATUS)] [IsFromPrimaryConstructor=true] val value: R|T| = R|<local>/value|
                public [ResolvedTo(STATUS)] [ContainingClassKey=LazyDelegate] get(): R|T|

            public final operator [ResolvedTo(STATUS)] fun getValue([ResolvedTo(STATUS)] thisRef: R|kotlin/Any?|, [ResolvedTo(STATUS)] property: R|kotlin/reflect/KProperty<*>|): R|T| {
                ^getValue this@R|/LazyDelegate|.R|/LazyDelegate.value|
            }

        }

        public final [ResolvedTo(RAW_FIR)] fun <[ResolvedTo(RAW_FIR)] T> lazy([ResolvedTo(RAW_FIR)] block: R|() -> T|): R|LazyDelegate<T>| {
            ^lazy R|SubstitutionOverride</LazyDelegate.LazyDelegate>|<R|T|>(R|<local>/block|.R|SubstitutionOverride<kotlin/Function0.invoke: R|T|>|())
        }

        public final [ResolvedTo(RAW_FIR)] fun getAny(): R|kotlin/Any?| {
            ^getAny Null(null)
        }

        public final [ResolvedTo(RAW_FIR)] fun <[ResolvedTo(RAW_FIR)] Q> materialize(): R|Q| {
            ^materialize Null(null)!!
        }

        public final [ResolvedTo(STATUS)] class Test : R|kotlin/Any| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=Test] constructor(): R|Test| {
                super<R|kotlin/Any|>()
            }

            public final [ResolvedTo(STATUS)] val resolveMe: R|kotlin/String|by R|/lazy|<R|kotlin/String|>(<L> = [ResolvedTo(RAW_FIR)] [MatchingParameterFunctionTypeKey=kotlin/Function0<T>] lazy@fun <anonymous>(): R|kotlin/String| <inline=NoInline>  {
                ^ R|/materialize|<R|kotlin/String|>()
            }
            )
                public [ResolvedTo(STATUS)] [ContainingClassKey=Test] get(): R|kotlin/String| {
                    ^ this@R|/Test|.D|/Test.resolveMe|.R|SubstitutionOverride</LazyDelegate.getValue: R|Stub (chain inference): TypeVariable(_T)|>|(this@R|/Test|, ::R|/Test.resolveMe|)
                }

        }


EXPECT_ACTUAL_MATCHING:
FILE: [ResolvedTo(IMPORTS)] lazyPropertyScript.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public final [ResolvedTo(STATUS)] class LazyDelegate<[ResolvedTo(STATUS)] T> : R|kotlin/Any| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=LazyDelegate] constructor<[ResolvedTo(STATUS)] T>([ResolvedTo(STATUS)] [CorrespondingProperty=/LazyDelegate.value] value: R|T|): R|LazyDelegate<T>| {
                super<R|kotlin/Any|>()
            }

            public final [ResolvedTo(STATUS)] [IsFromPrimaryConstructor=true] val value: R|T| = R|<local>/value|
                public [ResolvedTo(STATUS)] [ContainingClassKey=LazyDelegate] get(): R|T|

            public final operator [ResolvedTo(STATUS)] fun getValue([ResolvedTo(STATUS)] thisRef: R|kotlin/Any?|, [ResolvedTo(STATUS)] property: R|kotlin/reflect/KProperty<*>|): R|T| {
                ^getValue this@R|/LazyDelegate|.R|/LazyDelegate.value|
            }

        }

        public final [ResolvedTo(RAW_FIR)] fun <[ResolvedTo(RAW_FIR)] T> lazy([ResolvedTo(RAW_FIR)] block: R|() -> T|): R|LazyDelegate<T>| {
            ^lazy R|SubstitutionOverride</LazyDelegate.LazyDelegate>|<R|T|>(R|<local>/block|.R|SubstitutionOverride<kotlin/Function0.invoke: R|T|>|())
        }

        public final [ResolvedTo(RAW_FIR)] fun getAny(): R|kotlin/Any?| {
            ^getAny Null(null)
        }

        public final [ResolvedTo(RAW_FIR)] fun <[ResolvedTo(RAW_FIR)] Q> materialize(): R|Q| {
            ^materialize Null(null)!!
        }

        public final [ResolvedTo(STATUS)] class Test : R|kotlin/Any| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=Test] constructor(): R|Test| {
                super<R|kotlin/Any|>()
            }

            public final [ResolvedTo(STATUS)] val resolveMe: R|kotlin/String|by R|/lazy|<R|kotlin/String|>(<L> = [ResolvedTo(RAW_FIR)] [MatchingParameterFunctionTypeKey=kotlin/Function0<T>] lazy@fun <anonymous>(): R|kotlin/String| <inline=NoInline>  {
                ^ R|/materialize|<R|kotlin/String|>()
            }
            )
                public [ResolvedTo(STATUS)] [ContainingClassKey=Test] get(): R|kotlin/String| {
                    ^ this@R|/Test|.D|/Test.resolveMe|.R|SubstitutionOverride</LazyDelegate.getValue: R|Stub (chain inference): TypeVariable(_T)|>|(this@R|/Test|, ::R|/Test.resolveMe|)
                }

        }


ARGUMENTS_OF_ANNOTATIONS:
FILE: [ResolvedTo(IMPORTS)] lazyPropertyScript.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public final [ResolvedTo(STATUS)] class LazyDelegate<[ResolvedTo(STATUS)] T> : R|kotlin/Any| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=LazyDelegate] constructor<[ResolvedTo(STATUS)] T>([ResolvedTo(STATUS)] [CorrespondingProperty=/LazyDelegate.value] value: R|T|): R|LazyDelegate<T>| {
                super<R|kotlin/Any|>()
            }

            public final [ResolvedTo(STATUS)] [IsFromPrimaryConstructor=true] val value: R|T| = R|<local>/value|
                public [ResolvedTo(STATUS)] [ContainingClassKey=LazyDelegate] get(): R|T|

            public final operator [ResolvedTo(STATUS)] fun getValue([ResolvedTo(STATUS)] thisRef: R|kotlin/Any?|, [ResolvedTo(STATUS)] property: R|kotlin/reflect/KProperty<*>|): R|T| {
                ^getValue this@R|/LazyDelegate|.R|/LazyDelegate.value|
            }

        }

        public final [ResolvedTo(RAW_FIR)] fun <[ResolvedTo(RAW_FIR)] T> lazy([ResolvedTo(RAW_FIR)] block: R|() -> T|): R|LazyDelegate<T>| {
            ^lazy R|SubstitutionOverride</LazyDelegate.LazyDelegate>|<R|T|>(R|<local>/block|.R|SubstitutionOverride<kotlin/Function0.invoke: R|T|>|())
        }

        public final [ResolvedTo(RAW_FIR)] fun getAny(): R|kotlin/Any?| {
            ^getAny Null(null)
        }

        public final [ResolvedTo(RAW_FIR)] fun <[ResolvedTo(RAW_FIR)] Q> materialize(): R|Q| {
            ^materialize Null(null)!!
        }

        public final [ResolvedTo(STATUS)] class Test : R|kotlin/Any| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=Test] constructor(): R|Test| {
                super<R|kotlin/Any|>()
            }

            public final [ResolvedTo(STATUS)] val resolveMe: R|kotlin/String|by R|/lazy|<R|kotlin/String|>(<L> = [ResolvedTo(RAW_FIR)] [MatchingParameterFunctionTypeKey=kotlin/Function0<T>] lazy@fun <anonymous>(): R|kotlin/String| <inline=NoInline>  {
                ^ R|/materialize|<R|kotlin/String|>()
            }
            )
                public [ResolvedTo(STATUS)] [ContainingClassKey=Test] get(): R|kotlin/String| {
                    ^ this@R|/Test|.D|/Test.resolveMe|.R|SubstitutionOverride</LazyDelegate.getValue: R|Stub (chain inference): TypeVariable(_T)|>|(this@R|/Test|, ::R|/Test.resolveMe|)
                }

        }


CONTRACTS:
FILE: [ResolvedTo(IMPORTS)] lazyPropertyScript.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public final [ResolvedTo(STATUS)] class LazyDelegate<[ResolvedTo(STATUS)] T> : R|kotlin/Any| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=LazyDelegate] constructor<[ResolvedTo(STATUS)] T>([ResolvedTo(STATUS)] [CorrespondingProperty=/LazyDelegate.value] value: R|T|): R|LazyDelegate<T>| {
                super<R|kotlin/Any|>()
            }

            public final [ResolvedTo(STATUS)] [IsFromPrimaryConstructor=true] val value: R|T| = R|<local>/value|
                public [ResolvedTo(STATUS)] [ContainingClassKey=LazyDelegate] get(): R|T|

            public final operator [ResolvedTo(STATUS)] fun getValue([ResolvedTo(STATUS)] thisRef: R|kotlin/Any?|, [ResolvedTo(STATUS)] property: R|kotlin/reflect/KProperty<*>|): R|T| {
                ^getValue this@R|/LazyDelegate|.R|/LazyDelegate.value|
            }

        }

        public final [ResolvedTo(RAW_FIR)] fun <[ResolvedTo(RAW_FIR)] T> lazy([ResolvedTo(RAW_FIR)] block: R|() -> T|): R|LazyDelegate<T>| {
            ^lazy R|SubstitutionOverride</LazyDelegate.LazyDelegate>|<R|T|>(R|<local>/block|.R|SubstitutionOverride<kotlin/Function0.invoke: R|T|>|())
        }

        public final [ResolvedTo(RAW_FIR)] fun getAny(): R|kotlin/Any?| {
            ^getAny Null(null)
        }

        public final [ResolvedTo(RAW_FIR)] fun <[ResolvedTo(RAW_FIR)] Q> materialize(): R|Q| {
            ^materialize Null(null)!!
        }

        public final [ResolvedTo(STATUS)] class Test : R|kotlin/Any| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=Test] constructor(): R|Test| {
                super<R|kotlin/Any|>()
            }

            public final [ResolvedTo(STATUS)] val resolveMe: R|kotlin/String|by R|/lazy|<R|kotlin/String|>(<L> = [ResolvedTo(RAW_FIR)] [MatchingParameterFunctionTypeKey=kotlin/Function0<T>] lazy@fun <anonymous>(): R|kotlin/String| <inline=NoInline>  {
                ^ R|/materialize|<R|kotlin/String|>()
            }
            )
                public [ResolvedTo(STATUS)] [ContainingClassKey=Test] get(): R|kotlin/String| {
                    ^ this@R|/Test|.D|/Test.resolveMe|.R|SubstitutionOverride</LazyDelegate.getValue: R|Stub (chain inference): TypeVariable(_T)|>|(this@R|/Test|, ::R|/Test.resolveMe|)
                }

        }


IMPLICIT_TYPES_BODY_RESOLVE:
FILE: [ResolvedTo(IMPORTS)] lazyPropertyScript.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public final [ResolvedTo(STATUS)] class LazyDelegate<[ResolvedTo(STATUS)] T> : R|kotlin/Any| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=LazyDelegate] constructor<[ResolvedTo(STATUS)] T>([ResolvedTo(STATUS)] [CorrespondingProperty=/LazyDelegate.value] value: R|T|): R|LazyDelegate<T>| {
                super<R|kotlin/Any|>()
            }

            public final [ResolvedTo(STATUS)] [IsFromPrimaryConstructor=true] val value: R|T| = R|<local>/value|
                public [ResolvedTo(STATUS)] [ContainingClassKey=LazyDelegate] get(): R|T|

            public final operator [ResolvedTo(STATUS)] fun getValue([ResolvedTo(STATUS)] thisRef: R|kotlin/Any?|, [ResolvedTo(STATUS)] property: R|kotlin/reflect/KProperty<*>|): R|T| {
                ^getValue this@R|/LazyDelegate|.R|/LazyDelegate.value|
            }

        }

        public final [ResolvedTo(RAW_FIR)] fun <[ResolvedTo(RAW_FIR)] T> lazy([ResolvedTo(RAW_FIR)] block: R|() -> T|): R|LazyDelegate<T>| {
            ^lazy R|SubstitutionOverride</LazyDelegate.LazyDelegate>|<R|T|>(R|<local>/block|.R|SubstitutionOverride<kotlin/Function0.invoke: R|T|>|())
        }

        public final [ResolvedTo(RAW_FIR)] fun getAny(): R|kotlin/Any?| {
            ^getAny Null(null)
        }

        public final [ResolvedTo(RAW_FIR)] fun <[ResolvedTo(RAW_FIR)] Q> materialize(): R|Q| {
            ^materialize Null(null)!!
        }

        public final [ResolvedTo(STATUS)] class Test : R|kotlin/Any| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=Test] constructor(): R|Test| {
                super<R|kotlin/Any|>()
            }

            public final [ResolvedTo(STATUS)] val resolveMe: R|kotlin/String|by R|/lazy|<R|kotlin/String|>(<L> = [ResolvedTo(RAW_FIR)] [MatchingParameterFunctionTypeKey=kotlin/Function0<T>] lazy@fun <anonymous>(): R|kotlin/String| <inline=NoInline>  {
                ^ R|/materialize|<R|kotlin/String|>()
            }
            )
                public [ResolvedTo(STATUS)] [ContainingClassKey=Test] get(): R|kotlin/String| {
                    ^ this@R|/Test|.D|/Test.resolveMe|.R|SubstitutionOverride</LazyDelegate.getValue: R|Stub (chain inference): TypeVariable(_T)|>|(this@R|/Test|, ::R|/Test.resolveMe|)
                }

        }


ANNOTATIONS_ARGUMENTS_MAPPING:
FILE: [ResolvedTo(IMPORTS)] lazyPropertyScript.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public final [ResolvedTo(STATUS)] class LazyDelegate<[ResolvedTo(STATUS)] T> : R|kotlin/Any| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=LazyDelegate] constructor<[ResolvedTo(STATUS)] T>([ResolvedTo(STATUS)] [CorrespondingProperty=/LazyDelegate.value] value: R|T|): R|LazyDelegate<T>| {
                super<R|kotlin/Any|>()
            }

            public final [ResolvedTo(STATUS)] [IsFromPrimaryConstructor=true] val value: R|T| = R|<local>/value|
                public [ResolvedTo(STATUS)] [ContainingClassKey=LazyDelegate] get(): R|T|

            public final operator [ResolvedTo(STATUS)] fun getValue([ResolvedTo(STATUS)] thisRef: R|kotlin/Any?|, [ResolvedTo(STATUS)] property: R|kotlin/reflect/KProperty<*>|): R|T| {
                ^getValue this@R|/LazyDelegate|.R|/LazyDelegate.value|
            }

        }

        public final [ResolvedTo(RAW_FIR)] fun <[ResolvedTo(RAW_FIR)] T> lazy([ResolvedTo(RAW_FIR)] block: R|() -> T|): R|LazyDelegate<T>| {
            ^lazy R|SubstitutionOverride</LazyDelegate.LazyDelegate>|<R|T|>(R|<local>/block|.R|SubstitutionOverride<kotlin/Function0.invoke: R|T|>|())
        }

        public final [ResolvedTo(RAW_FIR)] fun getAny(): R|kotlin/Any?| {
            ^getAny Null(null)
        }

        public final [ResolvedTo(RAW_FIR)] fun <[ResolvedTo(RAW_FIR)] Q> materialize(): R|Q| {
            ^materialize Null(null)!!
        }

        public final [ResolvedTo(STATUS)] class Test : R|kotlin/Any| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=Test] constructor(): R|Test| {
                super<R|kotlin/Any|>()
            }

            public final [ResolvedTo(STATUS)] val resolveMe: R|kotlin/String|by R|/lazy|<R|kotlin/String|>(<L> = [ResolvedTo(RAW_FIR)] [MatchingParameterFunctionTypeKey=kotlin/Function0<T>] lazy@fun <anonymous>(): R|kotlin/String| <inline=NoInline>  {
                ^ R|/materialize|<R|kotlin/String|>()
            }
            )
                public [ResolvedTo(STATUS)] [ContainingClassKey=Test] get(): R|kotlin/String| {
                    ^ this@R|/Test|.D|/Test.resolveMe|.R|SubstitutionOverride</LazyDelegate.getValue: R|Stub (chain inference): TypeVariable(_T)|>|(this@R|/Test|, ::R|/Test.resolveMe|)
                }

        }


BODY_RESOLVE:
FILE: [ResolvedTo(IMPORTS)] lazyPropertyScript.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public final [ResolvedTo(STATUS)] class LazyDelegate<[ResolvedTo(STATUS)] T> : R|kotlin/Any| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=LazyDelegate] constructor<[ResolvedTo(STATUS)] T>([ResolvedTo(STATUS)] [CorrespondingProperty=/LazyDelegate.value] value: R|T|): R|LazyDelegate<T>| {
                super<R|kotlin/Any|>()
            }

            public final [ResolvedTo(STATUS)] [IsFromPrimaryConstructor=true] val value: R|T| = R|<local>/value|
                public [ResolvedTo(STATUS)] [ContainingClassKey=LazyDelegate] get(): R|T|

            public final operator [ResolvedTo(STATUS)] fun getValue([ResolvedTo(STATUS)] thisRef: R|kotlin/Any?|, [ResolvedTo(STATUS)] property: R|kotlin/reflect/KProperty<*>|): R|T| {
                ^getValue this@R|/LazyDelegate|.R|/LazyDelegate.value|
            }

        }

        public final [ResolvedTo(RAW_FIR)] fun <[ResolvedTo(RAW_FIR)] T> lazy([ResolvedTo(RAW_FIR)] block: R|() -> T|): R|LazyDelegate<T>| {
            ^lazy R|SubstitutionOverride</LazyDelegate.LazyDelegate>|<R|T|>(R|<local>/block|.R|SubstitutionOverride<kotlin/Function0.invoke: R|T|>|())
        }

        public final [ResolvedTo(RAW_FIR)] fun getAny(): R|kotlin/Any?| {
            ^getAny Null(null)
        }

        public final [ResolvedTo(RAW_FIR)] fun <[ResolvedTo(RAW_FIR)] Q> materialize(): R|Q| {
            ^materialize Null(null)!!
        }

        public final [ResolvedTo(STATUS)] class Test : R|kotlin/Any| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=Test] constructor(): R|Test| {
                super<R|kotlin/Any|>()
            }

            public final [ResolvedTo(STATUS)] val resolveMe: R|kotlin/String|by R|/lazy|<R|kotlin/String|>(<L> = [ResolvedTo(RAW_FIR)] [MatchingParameterFunctionTypeKey=kotlin/Function0<T>] lazy@fun <anonymous>(): R|kotlin/String| <inline=NoInline>  {
                ^ R|/materialize|<R|kotlin/String|>()
            }
            )
                public [ResolvedTo(STATUS)] [ContainingClassKey=Test] get(): R|kotlin/String| {
                    ^ this@R|/Test|.D|/Test.resolveMe|.R|SubstitutionOverride</LazyDelegate.getValue: R|Stub (chain inference): TypeVariable(_T)|>|(this@R|/Test|, ::R|/Test.resolveMe|)
                }

        }


FILE RAW TO BODY:
FILE: [ResolvedTo(IMPORTS)] lazyPropertyScript.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public final [ResolvedTo(STATUS)] class LazyDelegate<[ResolvedTo(STATUS)] T> : R|kotlin/Any| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=LazyDelegate] constructor<[ResolvedTo(STATUS)] T>([ResolvedTo(STATUS)] [CorrespondingProperty=/LazyDelegate.value] value: R|T|): R|LazyDelegate<T>| {
                super<R|kotlin/Any|>()
            }

            public final [ResolvedTo(STATUS)] [IsFromPrimaryConstructor=true] val value: R|T| = R|<local>/value|
                public [ResolvedTo(STATUS)] [ContainingClassKey=LazyDelegate] get(): R|T|

            public final operator [ResolvedTo(STATUS)] fun getValue([ResolvedTo(STATUS)] thisRef: R|kotlin/Any?|, [ResolvedTo(STATUS)] property: R|kotlin/reflect/KProperty<*>|): R|T| {
                ^getValue this@R|/LazyDelegate|.R|/LazyDelegate.value|
            }

        }

        public final [ResolvedTo(RAW_FIR)] fun <[ResolvedTo(RAW_FIR)] T> lazy([ResolvedTo(RAW_FIR)] block: R|() -> T|): R|LazyDelegate<T>| {
            ^lazy R|SubstitutionOverride</LazyDelegate.LazyDelegate>|<R|T|>(R|<local>/block|.R|SubstitutionOverride<kotlin/Function0.invoke: R|T|>|())
        }

        public final [ResolvedTo(RAW_FIR)] fun getAny(): R|kotlin/Any?| {
            ^getAny Null(null)
        }

        public final [ResolvedTo(RAW_FIR)] fun <[ResolvedTo(RAW_FIR)] Q> materialize(): R|Q| {
            ^materialize Null(null)!!
        }

        public final [ResolvedTo(STATUS)] class Test : R|kotlin/Any| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=Test] constructor(): R|Test| {
                super<R|kotlin/Any|>()
            }

            public final [ResolvedTo(STATUS)] val resolveMe: R|kotlin/String|by R|/lazy|<R|kotlin/String|>(<L> = [ResolvedTo(RAW_FIR)] [MatchingParameterFunctionTypeKey=kotlin/Function0<T>] lazy@fun <anonymous>(): R|kotlin/String| <inline=NoInline>  {
                ^ R|/materialize|<R|kotlin/String|>()
            }
            )
                public [ResolvedTo(STATUS)] [ContainingClassKey=Test] get(): R|kotlin/String| {
                    ^ this@R|/Test|.D|/Test.resolveMe|.R|SubstitutionOverride</LazyDelegate.getValue: R|Stub (chain inference): TypeVariable(_T)|>|(this@R|/Test|, ::R|/Test.resolveMe|)
                }

        }


RAW_FIR:
FILE: [ResolvedTo(IMPORTS)] localNestedClassScript.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public open [ResolvedTo(STATUS)] class TopLevelClass : R|kotlin/Any| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=TopLevelClass] constructor(): R|TopLevelClass| {
                super<R|kotlin/Any|>()
            }

            public open [ResolvedTo(STATUS)] fun foo([ResolvedTo(STATUS)] i: R|kotlin/Int|): R|kotlin/Unit| {
            }

            public open [ResolvedTo(STATUS)] fun boo([ResolvedTo(STATUS)] b: R|kotlin/String|): R|kotlin/Unit| {
            }

        }

        public open [ResolvedTo(STATUS)] class AnotherTopLevelClass : R|TopLevelClass| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=AnotherTopLevelClass] constructor(): R|AnotherTopLevelClass| {
                super<R|TopLevelClass|>()
            }

            public open override [ResolvedTo(STATUS)] fun foo([ResolvedTo(STATUS)] i: R|kotlin/Int|): R|kotlin/Unit| {
            }

        }

        public final [ResolvedTo(RAW_FIR)] fun resolveMe(): R|kotlin/Unit| {
            local final [ResolvedTo(RAW_FIR)] class LocalClass : R|AnotherTopLevelClass| {
                public [ResolvedTo(RAW_FIR)] [ContainingClassKey=LocalClass] constructor(): R|LocalClass| {
                    super<R|AnotherTopLevelClass|>()
                }

                public open override [ResolvedTo(RAW_FIR)] fun foo([ResolvedTo(RAW_FIR)] i: R|kotlin/Int|): R|kotlin/Unit| {
                }

                local final [ResolvedTo(RAW_FIR)] [ContainingClassKey=LocalClass] class NestedLocalClass : R|kotlin/Any| {
                    public [ResolvedTo(RAW_FIR)] [ContainingClassKey=NestedLocalClass] constructor(): R|LocalClass.NestedLocalClass| {
                        super<R|kotlin/Any|>()
                    }

                }

            }

        }


IMPORTS:
FILE: [ResolvedTo(IMPORTS)] localNestedClassScript.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public open [ResolvedTo(STATUS)] class TopLevelClass : R|kotlin/Any| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=TopLevelClass] constructor(): R|TopLevelClass| {
                super<R|kotlin/Any|>()
            }

            public open [ResolvedTo(STATUS)] fun foo([ResolvedTo(STATUS)] i: R|kotlin/Int|): R|kotlin/Unit| {
            }

            public open [ResolvedTo(STATUS)] fun boo([ResolvedTo(STATUS)] b: R|kotlin/String|): R|kotlin/Unit| {
            }

        }

        public open [ResolvedTo(STATUS)] class AnotherTopLevelClass : R|TopLevelClass| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=AnotherTopLevelClass] constructor(): R|AnotherTopLevelClass| {
                super<R|TopLevelClass|>()
            }

            public open override [ResolvedTo(STATUS)] fun foo([ResolvedTo(STATUS)] i: R|kotlin/Int|): R|kotlin/Unit| {
            }

        }

        public final [ResolvedTo(RAW_FIR)] fun resolveMe(): R|kotlin/Unit| {
            local final [ResolvedTo(RAW_FIR)] class LocalClass : R|AnotherTopLevelClass| {
                public [ResolvedTo(RAW_FIR)] [ContainingClassKey=LocalClass] constructor(): R|LocalClass| {
                    super<R|AnotherTopLevelClass|>()
                }

                public open override [ResolvedTo(RAW_FIR)] fun foo([ResolvedTo(RAW_FIR)] i: R|kotlin/Int|): R|kotlin/Unit| {
                }

                local final [ResolvedTo(RAW_FIR)] [ContainingClassKey=LocalClass] class NestedLocalClass : R|kotlin/Any| {
                    public [ResolvedTo(RAW_FIR)] [ContainingClassKey=NestedLocalClass] constructor(): R|LocalClass.NestedLocalClass| {
                        super<R|kotlin/Any|>()
                    }

                }

            }

        }


COMPILER_REQUIRED_ANNOTATIONS:
FILE: [ResolvedTo(IMPORTS)] localNestedClassScript.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public open [ResolvedTo(STATUS)] class TopLevelClass : R|kotlin/Any| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=TopLevelClass] constructor(): R|TopLevelClass| {
                super<R|kotlin/Any|>()
            }

            public open [ResolvedTo(STATUS)] fun foo([ResolvedTo(STATUS)] i: R|kotlin/Int|): R|kotlin/Unit| {
            }

            public open [ResolvedTo(STATUS)] fun boo([ResolvedTo(STATUS)] b: R|kotlin/String|): R|kotlin/Unit| {
            }

        }

        public open [ResolvedTo(STATUS)] class AnotherTopLevelClass : R|TopLevelClass| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=AnotherTopLevelClass] constructor(): R|AnotherTopLevelClass| {
                super<R|TopLevelClass|>()
            }

            public open override [ResolvedTo(STATUS)] fun foo([ResolvedTo(STATUS)] i: R|kotlin/Int|): R|kotlin/Unit| {
            }

        }

        public final [ResolvedTo(RAW_FIR)] fun resolveMe(): R|kotlin/Unit| {
            local final [ResolvedTo(RAW_FIR)] class LocalClass : R|AnotherTopLevelClass| {
                public [ResolvedTo(RAW_FIR)] [ContainingClassKey=LocalClass] constructor(): R|LocalClass| {
                    super<R|AnotherTopLevelClass|>()
                }

                public open override [ResolvedTo(RAW_FIR)] fun foo([ResolvedTo(RAW_FIR)] i: R|kotlin/Int|): R|kotlin/Unit| {
                }

                local final [ResolvedTo(RAW_FIR)] [ContainingClassKey=LocalClass] class NestedLocalClass : R|kotlin/Any| {
                    public [ResolvedTo(RAW_FIR)] [ContainingClassKey=NestedLocalClass] constructor(): R|LocalClass.NestedLocalClass| {
                        super<R|kotlin/Any|>()
                    }

                }

            }

        }


COMPANION_GENERATION:
FILE: [ResolvedTo(IMPORTS)] localNestedClassScript.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public open [ResolvedTo(STATUS)] class TopLevelClass : R|kotlin/Any| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=TopLevelClass] constructor(): R|TopLevelClass| {
                super<R|kotlin/Any|>()
            }

            public open [ResolvedTo(STATUS)] fun foo([ResolvedTo(STATUS)] i: R|kotlin/Int|): R|kotlin/Unit| {
            }

            public open [ResolvedTo(STATUS)] fun boo([ResolvedTo(STATUS)] b: R|kotlin/String|): R|kotlin/Unit| {
            }

        }

        public open [ResolvedTo(STATUS)] class AnotherTopLevelClass : R|TopLevelClass| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=AnotherTopLevelClass] constructor(): R|AnotherTopLevelClass| {
                super<R|TopLevelClass|>()
            }

            public open override [ResolvedTo(STATUS)] fun foo([ResolvedTo(STATUS)] i: R|kotlin/Int|): R|kotlin/Unit| {
            }

        }

        public final [ResolvedTo(RAW_FIR)] fun resolveMe(): R|kotlin/Unit| {
            local final [ResolvedTo(RAW_FIR)] class LocalClass : R|AnotherTopLevelClass| {
                public [ResolvedTo(RAW_FIR)] [ContainingClassKey=LocalClass] constructor(): R|LocalClass| {
                    super<R|AnotherTopLevelClass|>()
                }

                public open override [ResolvedTo(RAW_FIR)] fun foo([ResolvedTo(RAW_FIR)] i: R|kotlin/Int|): R|kotlin/Unit| {
                }

                local final [ResolvedTo(RAW_FIR)] [ContainingClassKey=LocalClass] class NestedLocalClass : R|kotlin/Any| {
                    public [ResolvedTo(RAW_FIR)] [ContainingClassKey=NestedLocalClass] constructor(): R|LocalClass.NestedLocalClass| {
                        super<R|kotlin/Any|>()
                    }

                }

            }

        }


SUPER_TYPES:
FILE: [ResolvedTo(IMPORTS)] localNestedClassScript.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public open [ResolvedTo(STATUS)] class TopLevelClass : R|kotlin/Any| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=TopLevelClass] constructor(): R|TopLevelClass| {
                super<R|kotlin/Any|>()
            }

            public open [ResolvedTo(STATUS)] fun foo([ResolvedTo(STATUS)] i: R|kotlin/Int|): R|kotlin/Unit| {
            }

            public open [ResolvedTo(STATUS)] fun boo([ResolvedTo(STATUS)] b: R|kotlin/String|): R|kotlin/Unit| {
            }

        }

        public open [ResolvedTo(STATUS)] class AnotherTopLevelClass : R|TopLevelClass| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=AnotherTopLevelClass] constructor(): R|AnotherTopLevelClass| {
                super<R|TopLevelClass|>()
            }

            public open override [ResolvedTo(STATUS)] fun foo([ResolvedTo(STATUS)] i: R|kotlin/Int|): R|kotlin/Unit| {
            }

        }

        public final [ResolvedTo(RAW_FIR)] fun resolveMe(): R|kotlin/Unit| {
            local final [ResolvedTo(RAW_FIR)] class LocalClass : R|AnotherTopLevelClass| {
                public [ResolvedTo(RAW_FIR)] [ContainingClassKey=LocalClass] constructor(): R|LocalClass| {
                    super<R|AnotherTopLevelClass|>()
                }

                public open override [ResolvedTo(RAW_FIR)] fun foo([ResolvedTo(RAW_FIR)] i: R|kotlin/Int|): R|kotlin/Unit| {
                }

                local final [ResolvedTo(RAW_FIR)] [ContainingClassKey=LocalClass] class NestedLocalClass : R|kotlin/Any| {
                    public [ResolvedTo(RAW_FIR)] [ContainingClassKey=NestedLocalClass] constructor(): R|LocalClass.NestedLocalClass| {
                        super<R|kotlin/Any|>()
                    }

                }

            }

        }


TYPES:
FILE: [ResolvedTo(IMPORTS)] localNestedClassScript.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public open [ResolvedTo(STATUS)] class TopLevelClass : R|kotlin/Any| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=TopLevelClass] constructor(): R|TopLevelClass| {
                super<R|kotlin/Any|>()
            }

            public open [ResolvedTo(STATUS)] fun foo([ResolvedTo(STATUS)] i: R|kotlin/Int|): R|kotlin/Unit| {
            }

            public open [ResolvedTo(STATUS)] fun boo([ResolvedTo(STATUS)] b: R|kotlin/String|): R|kotlin/Unit| {
            }

        }

        public open [ResolvedTo(STATUS)] class AnotherTopLevelClass : R|TopLevelClass| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=AnotherTopLevelClass] constructor(): R|AnotherTopLevelClass| {
                super<R|TopLevelClass|>()
            }

            public open override [ResolvedTo(STATUS)] fun foo([ResolvedTo(STATUS)] i: R|kotlin/Int|): R|kotlin/Unit| {
            }

        }

        public final [ResolvedTo(RAW_FIR)] fun resolveMe(): R|kotlin/Unit| {
            local final [ResolvedTo(RAW_FIR)] class LocalClass : R|AnotherTopLevelClass| {
                public [ResolvedTo(RAW_FIR)] [ContainingClassKey=LocalClass] constructor(): R|LocalClass| {
                    super<R|AnotherTopLevelClass|>()
                }

                public open override [ResolvedTo(RAW_FIR)] fun foo([ResolvedTo(RAW_FIR)] i: R|kotlin/Int|): R|kotlin/Unit| {
                }

                local final [ResolvedTo(RAW_FIR)] [ContainingClassKey=LocalClass] class NestedLocalClass : R|kotlin/Any| {
                    public [ResolvedTo(RAW_FIR)] [ContainingClassKey=NestedLocalClass] constructor(): R|LocalClass.NestedLocalClass| {
                        super<R|kotlin/Any|>()
                    }

                }

            }

        }


STATUS:
FILE: [ResolvedTo(IMPORTS)] localNestedClassScript.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public open [ResolvedTo(STATUS)] class TopLevelClass : R|kotlin/Any| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=TopLevelClass] constructor(): R|TopLevelClass| {
                super<R|kotlin/Any|>()
            }

            public open [ResolvedTo(STATUS)] fun foo([ResolvedTo(STATUS)] i: R|kotlin/Int|): R|kotlin/Unit| {
            }

            public open [ResolvedTo(STATUS)] fun boo([ResolvedTo(STATUS)] b: R|kotlin/String|): R|kotlin/Unit| {
            }

        }

        public open [ResolvedTo(STATUS)] class AnotherTopLevelClass : R|TopLevelClass| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=AnotherTopLevelClass] constructor(): R|AnotherTopLevelClass| {
                super<R|TopLevelClass|>()
            }

            public open override [ResolvedTo(STATUS)] fun foo([ResolvedTo(STATUS)] i: R|kotlin/Int|): R|kotlin/Unit| {
            }

        }

        public final [ResolvedTo(RAW_FIR)] fun resolveMe(): R|kotlin/Unit| {
            local final [ResolvedTo(RAW_FIR)] class LocalClass : R|AnotherTopLevelClass| {
                public [ResolvedTo(RAW_FIR)] [ContainingClassKey=LocalClass] constructor(): R|LocalClass| {
                    super<R|AnotherTopLevelClass|>()
                }

                public open override [ResolvedTo(RAW_FIR)] fun foo([ResolvedTo(RAW_FIR)] i: R|kotlin/Int|): R|kotlin/Unit| {
                }

                local final [ResolvedTo(RAW_FIR)] [ContainingClassKey=LocalClass] class NestedLocalClass : R|kotlin/Any| {
                    public [ResolvedTo(RAW_FIR)] [ContainingClassKey=NestedLocalClass] constructor(): R|LocalClass.NestedLocalClass| {
                        super<R|kotlin/Any|>()
                    }

                }

            }

        }


EXPECT_ACTUAL_MATCHING:
FILE: [ResolvedTo(IMPORTS)] localNestedClassScript.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public open [ResolvedTo(STATUS)] class TopLevelClass : R|kotlin/Any| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=TopLevelClass] constructor(): R|TopLevelClass| {
                super<R|kotlin/Any|>()
            }

            public open [ResolvedTo(STATUS)] fun foo([ResolvedTo(STATUS)] i: R|kotlin/Int|): R|kotlin/Unit| {
            }

            public open [ResolvedTo(STATUS)] fun boo([ResolvedTo(STATUS)] b: R|kotlin/String|): R|kotlin/Unit| {
            }

        }

        public open [ResolvedTo(STATUS)] class AnotherTopLevelClass : R|TopLevelClass| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=AnotherTopLevelClass] constructor(): R|AnotherTopLevelClass| {
                super<R|TopLevelClass|>()
            }

            public open override [ResolvedTo(STATUS)] fun foo([ResolvedTo(STATUS)] i: R|kotlin/Int|): R|kotlin/Unit| {
            }

        }

        public final [ResolvedTo(RAW_FIR)] fun resolveMe(): R|kotlin/Unit| {
            local final [ResolvedTo(RAW_FIR)] class LocalClass : R|AnotherTopLevelClass| {
                public [ResolvedTo(RAW_FIR)] [ContainingClassKey=LocalClass] constructor(): R|LocalClass| {
                    super<R|AnotherTopLevelClass|>()
                }

                public open override [ResolvedTo(RAW_FIR)] fun foo([ResolvedTo(RAW_FIR)] i: R|kotlin/Int|): R|kotlin/Unit| {
                }

                local final [ResolvedTo(RAW_FIR)] [ContainingClassKey=LocalClass] class NestedLocalClass : R|kotlin/Any| {
                    public [ResolvedTo(RAW_FIR)] [ContainingClassKey=NestedLocalClass] constructor(): R|LocalClass.NestedLocalClass| {
                        super<R|kotlin/Any|>()
                    }

                }

            }

        }


ARGUMENTS_OF_ANNOTATIONS:
FILE: [ResolvedTo(IMPORTS)] localNestedClassScript.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public open [ResolvedTo(STATUS)] class TopLevelClass : R|kotlin/Any| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=TopLevelClass] constructor(): R|TopLevelClass| {
                super<R|kotlin/Any|>()
            }

            public open [ResolvedTo(STATUS)] fun foo([ResolvedTo(STATUS)] i: R|kotlin/Int|): R|kotlin/Unit| {
            }

            public open [ResolvedTo(STATUS)] fun boo([ResolvedTo(STATUS)] b: R|kotlin/String|): R|kotlin/Unit| {
            }

        }

        public open [ResolvedTo(STATUS)] class AnotherTopLevelClass : R|TopLevelClass| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=AnotherTopLevelClass] constructor(): R|AnotherTopLevelClass| {
                super<R|TopLevelClass|>()
            }

            public open override [ResolvedTo(STATUS)] fun foo([ResolvedTo(STATUS)] i: R|kotlin/Int|): R|kotlin/Unit| {
            }

        }

        public final [ResolvedTo(RAW_FIR)] fun resolveMe(): R|kotlin/Unit| {
            local final [ResolvedTo(RAW_FIR)] class LocalClass : R|AnotherTopLevelClass| {
                public [ResolvedTo(RAW_FIR)] [ContainingClassKey=LocalClass] constructor(): R|LocalClass| {
                    super<R|AnotherTopLevelClass|>()
                }

                public open override [ResolvedTo(RAW_FIR)] fun foo([ResolvedTo(RAW_FIR)] i: R|kotlin/Int|): R|kotlin/Unit| {
                }

                local final [ResolvedTo(RAW_FIR)] [ContainingClassKey=LocalClass] class NestedLocalClass : R|kotlin/Any| {
                    public [ResolvedTo(RAW_FIR)] [ContainingClassKey=NestedLocalClass] constructor(): R|LocalClass.NestedLocalClass| {
                        super<R|kotlin/Any|>()
                    }

                }

            }

        }


CONTRACTS:
FILE: [ResolvedTo(IMPORTS)] localNestedClassScript.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public open [ResolvedTo(STATUS)] class TopLevelClass : R|kotlin/Any| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=TopLevelClass] constructor(): R|TopLevelClass| {
                super<R|kotlin/Any|>()
            }

            public open [ResolvedTo(STATUS)] fun foo([ResolvedTo(STATUS)] i: R|kotlin/Int|): R|kotlin/Unit| {
            }

            public open [ResolvedTo(STATUS)] fun boo([ResolvedTo(STATUS)] b: R|kotlin/String|): R|kotlin/Unit| {
            }

        }

        public open [ResolvedTo(STATUS)] class AnotherTopLevelClass : R|TopLevelClass| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=AnotherTopLevelClass] constructor(): R|AnotherTopLevelClass| {
                super<R|TopLevelClass|>()
            }

            public open override [ResolvedTo(STATUS)] fun foo([ResolvedTo(STATUS)] i: R|kotlin/Int|): R|kotlin/Unit| {
            }

        }

        public final [ResolvedTo(RAW_FIR)] fun resolveMe(): R|kotlin/Unit| {
            local final [ResolvedTo(RAW_FIR)] class LocalClass : R|AnotherTopLevelClass| {
                public [ResolvedTo(RAW_FIR)] [ContainingClassKey=LocalClass] constructor(): R|LocalClass| {
                    super<R|AnotherTopLevelClass|>()
                }

                public open override [ResolvedTo(RAW_FIR)] fun foo([ResolvedTo(RAW_FIR)] i: R|kotlin/Int|): R|kotlin/Unit| {
                }

                local final [ResolvedTo(RAW_FIR)] [ContainingClassKey=LocalClass] class NestedLocalClass : R|kotlin/Any| {
                    public [ResolvedTo(RAW_FIR)] [ContainingClassKey=NestedLocalClass] constructor(): R|LocalClass.NestedLocalClass| {
                        super<R|kotlin/Any|>()
                    }

                }

            }

        }


IMPLICIT_TYPES_BODY_RESOLVE:
FILE: [ResolvedTo(IMPORTS)] localNestedClassScript.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public open [ResolvedTo(STATUS)] class TopLevelClass : R|kotlin/Any| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=TopLevelClass] constructor(): R|TopLevelClass| {
                super<R|kotlin/Any|>()
            }

            public open [ResolvedTo(STATUS)] fun foo([ResolvedTo(STATUS)] i: R|kotlin/Int|): R|kotlin/Unit| {
            }

            public open [ResolvedTo(STATUS)] fun boo([ResolvedTo(STATUS)] b: R|kotlin/String|): R|kotlin/Unit| {
            }

        }

        public open [ResolvedTo(STATUS)] class AnotherTopLevelClass : R|TopLevelClass| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=AnotherTopLevelClass] constructor(): R|AnotherTopLevelClass| {
                super<R|TopLevelClass|>()
            }

            public open override [ResolvedTo(STATUS)] fun foo([ResolvedTo(STATUS)] i: R|kotlin/Int|): R|kotlin/Unit| {
            }

        }

        public final [ResolvedTo(RAW_FIR)] fun resolveMe(): R|kotlin/Unit| {
            local final [ResolvedTo(RAW_FIR)] class LocalClass : R|AnotherTopLevelClass| {
                public [ResolvedTo(RAW_FIR)] [ContainingClassKey=LocalClass] constructor(): R|LocalClass| {
                    super<R|AnotherTopLevelClass|>()
                }

                public open override [ResolvedTo(RAW_FIR)] fun foo([ResolvedTo(RAW_FIR)] i: R|kotlin/Int|): R|kotlin/Unit| {
                }

                local final [ResolvedTo(RAW_FIR)] [ContainingClassKey=LocalClass] class NestedLocalClass : R|kotlin/Any| {
                    public [ResolvedTo(RAW_FIR)] [ContainingClassKey=NestedLocalClass] constructor(): R|LocalClass.NestedLocalClass| {
                        super<R|kotlin/Any|>()
                    }

                }

            }

        }


ANNOTATIONS_ARGUMENTS_MAPPING:
FILE: [ResolvedTo(IMPORTS)] localNestedClassScript.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public open [ResolvedTo(STATUS)] class TopLevelClass : R|kotlin/Any| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=TopLevelClass] constructor(): R|TopLevelClass| {
                super<R|kotlin/Any|>()
            }

            public open [ResolvedTo(STATUS)] fun foo([ResolvedTo(STATUS)] i: R|kotlin/Int|): R|kotlin/Unit| {
            }

            public open [ResolvedTo(STATUS)] fun boo([ResolvedTo(STATUS)] b: R|kotlin/String|): R|kotlin/Unit| {
            }

        }

        public open [ResolvedTo(STATUS)] class AnotherTopLevelClass : R|TopLevelClass| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=AnotherTopLevelClass] constructor(): R|AnotherTopLevelClass| {
                super<R|TopLevelClass|>()
            }

            public open override [ResolvedTo(STATUS)] fun foo([ResolvedTo(STATUS)] i: R|kotlin/Int|): R|kotlin/Unit| {
            }

        }

        public final [ResolvedTo(RAW_FIR)] fun resolveMe(): R|kotlin/Unit| {
            local final [ResolvedTo(RAW_FIR)] class LocalClass : R|AnotherTopLevelClass| {
                public [ResolvedTo(RAW_FIR)] [ContainingClassKey=LocalClass] constructor(): R|LocalClass| {
                    super<R|AnotherTopLevelClass|>()
                }

                public open override [ResolvedTo(RAW_FIR)] fun foo([ResolvedTo(RAW_FIR)] i: R|kotlin/Int|): R|kotlin/Unit| {
                }

                local final [ResolvedTo(RAW_FIR)] [ContainingClassKey=LocalClass] class NestedLocalClass : R|kotlin/Any| {
                    public [ResolvedTo(RAW_FIR)] [ContainingClassKey=NestedLocalClass] constructor(): R|LocalClass.NestedLocalClass| {
                        super<R|kotlin/Any|>()
                    }

                }

            }

        }


BODY_RESOLVE:
FILE: [ResolvedTo(IMPORTS)] localNestedClassScript.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public open [ResolvedTo(STATUS)] class TopLevelClass : R|kotlin/Any| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=TopLevelClass] constructor(): R|TopLevelClass| {
                super<R|kotlin/Any|>()
            }

            public open [ResolvedTo(STATUS)] fun foo([ResolvedTo(STATUS)] i: R|kotlin/Int|): R|kotlin/Unit| {
            }

            public open [ResolvedTo(STATUS)] fun boo([ResolvedTo(STATUS)] b: R|kotlin/String|): R|kotlin/Unit| {
            }

        }

        public open [ResolvedTo(STATUS)] class AnotherTopLevelClass : R|TopLevelClass| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=AnotherTopLevelClass] constructor(): R|AnotherTopLevelClass| {
                super<R|TopLevelClass|>()
            }

            public open override [ResolvedTo(STATUS)] fun foo([ResolvedTo(STATUS)] i: R|kotlin/Int|): R|kotlin/Unit| {
            }

        }

        public final [ResolvedTo(RAW_FIR)] fun resolveMe(): R|kotlin/Unit| {
            local final [ResolvedTo(RAW_FIR)] class LocalClass : R|AnotherTopLevelClass| {
                public [ResolvedTo(RAW_FIR)] [ContainingClassKey=LocalClass] constructor(): R|LocalClass| {
                    super<R|AnotherTopLevelClass|>()
                }

                public open override [ResolvedTo(RAW_FIR)] fun foo([ResolvedTo(RAW_FIR)] i: R|kotlin/Int|): R|kotlin/Unit| {
                }

                local final [ResolvedTo(RAW_FIR)] [ContainingClassKey=LocalClass] class NestedLocalClass : R|kotlin/Any| {
                    public [ResolvedTo(RAW_FIR)] [ContainingClassKey=NestedLocalClass] constructor(): R|LocalClass.NestedLocalClass| {
                        super<R|kotlin/Any|>()
                    }

                }

            }

        }


FILE RAW TO BODY:
FILE: [ResolvedTo(IMPORTS)] localNestedClassScript.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public open [ResolvedTo(STATUS)] class TopLevelClass : R|kotlin/Any| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=TopLevelClass] constructor(): R|TopLevelClass| {
                super<R|kotlin/Any|>()
            }

            public open [ResolvedTo(STATUS)] fun foo([ResolvedTo(STATUS)] i: R|kotlin/Int|): R|kotlin/Unit| {
            }

            public open [ResolvedTo(STATUS)] fun boo([ResolvedTo(STATUS)] b: R|kotlin/String|): R|kotlin/Unit| {
            }

        }

        public open [ResolvedTo(STATUS)] class AnotherTopLevelClass : R|TopLevelClass| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=AnotherTopLevelClass] constructor(): R|AnotherTopLevelClass| {
                super<R|TopLevelClass|>()
            }

            public open override [ResolvedTo(STATUS)] fun foo([ResolvedTo(STATUS)] i: R|kotlin/Int|): R|kotlin/Unit| {
            }

        }

        public final [ResolvedTo(RAW_FIR)] fun resolveMe(): R|kotlin/Unit| {
            local final [ResolvedTo(RAW_FIR)] class LocalClass : R|AnotherTopLevelClass| {
                public [ResolvedTo(RAW_FIR)] [ContainingClassKey=LocalClass] constructor(): R|LocalClass| {
                    super<R|AnotherTopLevelClass|>()
                }

                public open override [ResolvedTo(RAW_FIR)] fun foo([ResolvedTo(RAW_FIR)] i: R|kotlin/Int|): R|kotlin/Unit| {
                }

                local final [ResolvedTo(RAW_FIR)] [ContainingClassKey=LocalClass] class NestedLocalClass : R|kotlin/Any| {
                    public [ResolvedTo(RAW_FIR)] [ContainingClassKey=NestedLocalClass] constructor(): R|LocalClass.NestedLocalClass| {
                        super<R|kotlin/Any|>()
                    }

                }

            }

        }


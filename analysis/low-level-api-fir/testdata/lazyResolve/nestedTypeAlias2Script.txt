RAW_FIR:
FILE: [ResolvedTo(IMPORTS)] nestedTypeAlias2Script.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public final [ResolvedTo(STATUS)] class OuterClass<[ResolvedTo(STATUS)] T1> : R|kotlin/Any| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=OuterClass] constructor<[ResolvedTo(STATUS)] T1>(): R|OuterClass<T1>| {
                super<R|kotlin/Any|>()
            }

            public final [ResolvedTo(STATUS)] class NestedClass<[ResolvedTo(STATUS)] T2> : R|kotlin/Any| {
                public [ResolvedTo(STATUS)] [ContainingClassKey=NestedClass] constructor<[ResolvedTo(STATUS)] T2>(): R|OuterClass.NestedClass<T2>| {
                    super<R|kotlin/Any|>()
                }

            }

            public? final [ResolvedTo(RAW_FIR)] typealias NestedType<[ResolvedTo(RAW_FIR)] T> = R|OuterClass.NestedClass<T>|

        }

        public final [ResolvedTo(RAW_FIR)] typealias ON3<[ResolvedTo(RAW_FIR)] T2> = R|OuterClass.NestedType<T2>|


IMPORTS:
FILE: [ResolvedTo(IMPORTS)] nestedTypeAlias2Script.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public final [ResolvedTo(STATUS)] class OuterClass<[ResolvedTo(STATUS)] T1> : R|kotlin/Any| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=OuterClass] constructor<[ResolvedTo(STATUS)] T1>(): R|OuterClass<T1>| {
                super<R|kotlin/Any|>()
            }

            public final [ResolvedTo(STATUS)] class NestedClass<[ResolvedTo(STATUS)] T2> : R|kotlin/Any| {
                public [ResolvedTo(STATUS)] [ContainingClassKey=NestedClass] constructor<[ResolvedTo(STATUS)] T2>(): R|OuterClass.NestedClass<T2>| {
                    super<R|kotlin/Any|>()
                }

            }

            public? final [ResolvedTo(RAW_FIR)] typealias NestedType<[ResolvedTo(RAW_FIR)] T> = R|OuterClass.NestedClass<T>|

        }

        public final [ResolvedTo(RAW_FIR)] typealias ON3<[ResolvedTo(RAW_FIR)] T2> = R|OuterClass.NestedType<T2>|


COMPILER_REQUIRED_ANNOTATIONS:
FILE: [ResolvedTo(IMPORTS)] nestedTypeAlias2Script.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public final [ResolvedTo(STATUS)] class OuterClass<[ResolvedTo(STATUS)] T1> : R|kotlin/Any| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=OuterClass] constructor<[ResolvedTo(STATUS)] T1>(): R|OuterClass<T1>| {
                super<R|kotlin/Any|>()
            }

            public final [ResolvedTo(STATUS)] class NestedClass<[ResolvedTo(STATUS)] T2> : R|kotlin/Any| {
                public [ResolvedTo(STATUS)] [ContainingClassKey=NestedClass] constructor<[ResolvedTo(STATUS)] T2>(): R|OuterClass.NestedClass<T2>| {
                    super<R|kotlin/Any|>()
                }

            }

            public? final [ResolvedTo(RAW_FIR)] typealias NestedType<[ResolvedTo(RAW_FIR)] T> = R|OuterClass.NestedClass<T>|

        }

        public final [ResolvedTo(RAW_FIR)] typealias ON3<[ResolvedTo(RAW_FIR)] T2> = R|OuterClass.NestedType<T2>|


COMPANION_GENERATION:
FILE: [ResolvedTo(IMPORTS)] nestedTypeAlias2Script.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public final [ResolvedTo(STATUS)] class OuterClass<[ResolvedTo(STATUS)] T1> : R|kotlin/Any| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=OuterClass] constructor<[ResolvedTo(STATUS)] T1>(): R|OuterClass<T1>| {
                super<R|kotlin/Any|>()
            }

            public final [ResolvedTo(STATUS)] class NestedClass<[ResolvedTo(STATUS)] T2> : R|kotlin/Any| {
                public [ResolvedTo(STATUS)] [ContainingClassKey=NestedClass] constructor<[ResolvedTo(STATUS)] T2>(): R|OuterClass.NestedClass<T2>| {
                    super<R|kotlin/Any|>()
                }

            }

            public? final [ResolvedTo(RAW_FIR)] typealias NestedType<[ResolvedTo(RAW_FIR)] T> = R|OuterClass.NestedClass<T>|

        }

        public final [ResolvedTo(RAW_FIR)] typealias ON3<[ResolvedTo(RAW_FIR)] T2> = R|OuterClass.NestedType<T2>|


SUPER_TYPES:
FILE: [ResolvedTo(IMPORTS)] nestedTypeAlias2Script.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public final [ResolvedTo(STATUS)] class OuterClass<[ResolvedTo(STATUS)] T1> : R|kotlin/Any| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=OuterClass] constructor<[ResolvedTo(STATUS)] T1>(): R|OuterClass<T1>| {
                super<R|kotlin/Any|>()
            }

            public final [ResolvedTo(STATUS)] class NestedClass<[ResolvedTo(STATUS)] T2> : R|kotlin/Any| {
                public [ResolvedTo(STATUS)] [ContainingClassKey=NestedClass] constructor<[ResolvedTo(STATUS)] T2>(): R|OuterClass.NestedClass<T2>| {
                    super<R|kotlin/Any|>()
                }

            }

            public? final [ResolvedTo(RAW_FIR)] typealias NestedType<[ResolvedTo(RAW_FIR)] T> = R|OuterClass.NestedClass<T>|

        }

        public final [ResolvedTo(RAW_FIR)] typealias ON3<[ResolvedTo(RAW_FIR)] T2> = R|OuterClass.NestedType<T2>|


TYPES:
FILE: [ResolvedTo(IMPORTS)] nestedTypeAlias2Script.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public final [ResolvedTo(STATUS)] class OuterClass<[ResolvedTo(STATUS)] T1> : R|kotlin/Any| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=OuterClass] constructor<[ResolvedTo(STATUS)] T1>(): R|OuterClass<T1>| {
                super<R|kotlin/Any|>()
            }

            public final [ResolvedTo(STATUS)] class NestedClass<[ResolvedTo(STATUS)] T2> : R|kotlin/Any| {
                public [ResolvedTo(STATUS)] [ContainingClassKey=NestedClass] constructor<[ResolvedTo(STATUS)] T2>(): R|OuterClass.NestedClass<T2>| {
                    super<R|kotlin/Any|>()
                }

            }

            public? final [ResolvedTo(RAW_FIR)] typealias NestedType<[ResolvedTo(RAW_FIR)] T> = R|OuterClass.NestedClass<T>|

        }

        public final [ResolvedTo(RAW_FIR)] typealias ON3<[ResolvedTo(RAW_FIR)] T2> = R|OuterClass.NestedType<T2>|


STATUS:
FILE: [ResolvedTo(IMPORTS)] nestedTypeAlias2Script.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public final [ResolvedTo(STATUS)] class OuterClass<[ResolvedTo(STATUS)] T1> : R|kotlin/Any| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=OuterClass] constructor<[ResolvedTo(STATUS)] T1>(): R|OuterClass<T1>| {
                super<R|kotlin/Any|>()
            }

            public final [ResolvedTo(STATUS)] class NestedClass<[ResolvedTo(STATUS)] T2> : R|kotlin/Any| {
                public [ResolvedTo(STATUS)] [ContainingClassKey=NestedClass] constructor<[ResolvedTo(STATUS)] T2>(): R|OuterClass.NestedClass<T2>| {
                    super<R|kotlin/Any|>()
                }

            }

            public? final [ResolvedTo(RAW_FIR)] typealias NestedType<[ResolvedTo(RAW_FIR)] T> = R|OuterClass.NestedClass<T>|

        }

        public final [ResolvedTo(RAW_FIR)] typealias ON3<[ResolvedTo(RAW_FIR)] T2> = R|OuterClass.NestedType<T2>|


EXPECT_ACTUAL_MATCHING:
FILE: [ResolvedTo(IMPORTS)] nestedTypeAlias2Script.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public final [ResolvedTo(STATUS)] class OuterClass<[ResolvedTo(STATUS)] T1> : R|kotlin/Any| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=OuterClass] constructor<[ResolvedTo(STATUS)] T1>(): R|OuterClass<T1>| {
                super<R|kotlin/Any|>()
            }

            public final [ResolvedTo(STATUS)] class NestedClass<[ResolvedTo(STATUS)] T2> : R|kotlin/Any| {
                public [ResolvedTo(STATUS)] [ContainingClassKey=NestedClass] constructor<[ResolvedTo(STATUS)] T2>(): R|OuterClass.NestedClass<T2>| {
                    super<R|kotlin/Any|>()
                }

            }

            public? final [ResolvedTo(RAW_FIR)] typealias NestedType<[ResolvedTo(RAW_FIR)] T> = R|OuterClass.NestedClass<T>|

        }

        public final [ResolvedTo(RAW_FIR)] typealias ON3<[ResolvedTo(RAW_FIR)] T2> = R|OuterClass.NestedType<T2>|


ARGUMENTS_OF_ANNOTATIONS:
FILE: [ResolvedTo(IMPORTS)] nestedTypeAlias2Script.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public final [ResolvedTo(STATUS)] class OuterClass<[ResolvedTo(STATUS)] T1> : R|kotlin/Any| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=OuterClass] constructor<[ResolvedTo(STATUS)] T1>(): R|OuterClass<T1>| {
                super<R|kotlin/Any|>()
            }

            public final [ResolvedTo(STATUS)] class NestedClass<[ResolvedTo(STATUS)] T2> : R|kotlin/Any| {
                public [ResolvedTo(STATUS)] [ContainingClassKey=NestedClass] constructor<[ResolvedTo(STATUS)] T2>(): R|OuterClass.NestedClass<T2>| {
                    super<R|kotlin/Any|>()
                }

            }

            public? final [ResolvedTo(RAW_FIR)] typealias NestedType<[ResolvedTo(RAW_FIR)] T> = R|OuterClass.NestedClass<T>|

        }

        public final [ResolvedTo(RAW_FIR)] typealias ON3<[ResolvedTo(RAW_FIR)] T2> = R|OuterClass.NestedType<T2>|


CONTRACTS:
FILE: [ResolvedTo(IMPORTS)] nestedTypeAlias2Script.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public final [ResolvedTo(STATUS)] class OuterClass<[ResolvedTo(STATUS)] T1> : R|kotlin/Any| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=OuterClass] constructor<[ResolvedTo(STATUS)] T1>(): R|OuterClass<T1>| {
                super<R|kotlin/Any|>()
            }

            public final [ResolvedTo(STATUS)] class NestedClass<[ResolvedTo(STATUS)] T2> : R|kotlin/Any| {
                public [ResolvedTo(STATUS)] [ContainingClassKey=NestedClass] constructor<[ResolvedTo(STATUS)] T2>(): R|OuterClass.NestedClass<T2>| {
                    super<R|kotlin/Any|>()
                }

            }

            public? final [ResolvedTo(RAW_FIR)] typealias NestedType<[ResolvedTo(RAW_FIR)] T> = R|OuterClass.NestedClass<T>|

        }

        public final [ResolvedTo(RAW_FIR)] typealias ON3<[ResolvedTo(RAW_FIR)] T2> = R|OuterClass.NestedType<T2>|


IMPLICIT_TYPES_BODY_RESOLVE:
FILE: [ResolvedTo(IMPORTS)] nestedTypeAlias2Script.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public final [ResolvedTo(STATUS)] class OuterClass<[ResolvedTo(STATUS)] T1> : R|kotlin/Any| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=OuterClass] constructor<[ResolvedTo(STATUS)] T1>(): R|OuterClass<T1>| {
                super<R|kotlin/Any|>()
            }

            public final [ResolvedTo(STATUS)] class NestedClass<[ResolvedTo(STATUS)] T2> : R|kotlin/Any| {
                public [ResolvedTo(STATUS)] [ContainingClassKey=NestedClass] constructor<[ResolvedTo(STATUS)] T2>(): R|OuterClass.NestedClass<T2>| {
                    super<R|kotlin/Any|>()
                }

            }

            public? final [ResolvedTo(RAW_FIR)] typealias NestedType<[ResolvedTo(RAW_FIR)] T> = R|OuterClass.NestedClass<T>|

        }

        public final [ResolvedTo(RAW_FIR)] typealias ON3<[ResolvedTo(RAW_FIR)] T2> = R|OuterClass.NestedType<T2>|


ANNOTATIONS_ARGUMENTS_MAPPING:
FILE: [ResolvedTo(IMPORTS)] nestedTypeAlias2Script.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public final [ResolvedTo(STATUS)] class OuterClass<[ResolvedTo(STATUS)] T1> : R|kotlin/Any| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=OuterClass] constructor<[ResolvedTo(STATUS)] T1>(): R|OuterClass<T1>| {
                super<R|kotlin/Any|>()
            }

            public final [ResolvedTo(STATUS)] class NestedClass<[ResolvedTo(STATUS)] T2> : R|kotlin/Any| {
                public [ResolvedTo(STATUS)] [ContainingClassKey=NestedClass] constructor<[ResolvedTo(STATUS)] T2>(): R|OuterClass.NestedClass<T2>| {
                    super<R|kotlin/Any|>()
                }

            }

            public? final [ResolvedTo(RAW_FIR)] typealias NestedType<[ResolvedTo(RAW_FIR)] T> = R|OuterClass.NestedClass<T>|

        }

        public final [ResolvedTo(RAW_FIR)] typealias ON3<[ResolvedTo(RAW_FIR)] T2> = R|OuterClass.NestedType<T2>|


BODY_RESOLVE:
FILE: [ResolvedTo(IMPORTS)] nestedTypeAlias2Script.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public final [ResolvedTo(STATUS)] class OuterClass<[ResolvedTo(STATUS)] T1> : R|kotlin/Any| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=OuterClass] constructor<[ResolvedTo(STATUS)] T1>(): R|OuterClass<T1>| {
                super<R|kotlin/Any|>()
            }

            public final [ResolvedTo(STATUS)] class NestedClass<[ResolvedTo(STATUS)] T2> : R|kotlin/Any| {
                public [ResolvedTo(STATUS)] [ContainingClassKey=NestedClass] constructor<[ResolvedTo(STATUS)] T2>(): R|OuterClass.NestedClass<T2>| {
                    super<R|kotlin/Any|>()
                }

            }

            public? final [ResolvedTo(RAW_FIR)] typealias NestedType<[ResolvedTo(RAW_FIR)] T> = R|OuterClass.NestedClass<T>|

        }

        public final [ResolvedTo(RAW_FIR)] typealias ON3<[ResolvedTo(RAW_FIR)] T2> = R|OuterClass.NestedType<T2>|


FILE RAW TO BODY:
FILE: [ResolvedTo(IMPORTS)] nestedTypeAlias2Script.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public final [ResolvedTo(STATUS)] class OuterClass<[ResolvedTo(STATUS)] T1> : R|kotlin/Any| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=OuterClass] constructor<[ResolvedTo(STATUS)] T1>(): R|OuterClass<T1>| {
                super<R|kotlin/Any|>()
            }

            public final [ResolvedTo(STATUS)] class NestedClass<[ResolvedTo(STATUS)] T2> : R|kotlin/Any| {
                public [ResolvedTo(STATUS)] [ContainingClassKey=NestedClass] constructor<[ResolvedTo(STATUS)] T2>(): R|OuterClass.NestedClass<T2>| {
                    super<R|kotlin/Any|>()
                }

            }

            public? final [ResolvedTo(RAW_FIR)] typealias NestedType<[ResolvedTo(RAW_FIR)] T> = R|OuterClass.NestedClass<T>|

        }

        public final [ResolvedTo(RAW_FIR)] typealias ON3<[ResolvedTo(RAW_FIR)] T2> = R|OuterClass.NestedType<T2>|


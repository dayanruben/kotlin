RAW_FIR:
FILE: [ResolvedTo(IMPORTS)] statement.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public final [ResolvedTo(STATUS)] class Builder : R|kotlin/Any| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=Builder] constructor(): R|Builder| {
                super<R|kotlin/Any|>()
            }

            public final [ResolvedTo(STATUS)] var version: R|kotlin/String| = String()
                public [ResolvedTo(STATUS)] [ContainingClassKey=Builder] get(): R|kotlin/String|
                public [ResolvedTo(STATUS)] [ContainingClassKey=Builder] set([ResolvedTo(STATUS)] value: R|kotlin/String|): R|kotlin/Unit|

            public final [ResolvedTo(STATUS)] fun execute(): R|kotlin/Unit| {
                R|kotlin/io/println|(this@R|/Builder|.R|/Builder.version|)
            }

        }

        public final [ResolvedTo(RAW_FIR)] fun build([ResolvedTo(RAW_FIR)] action: R|Builder.() -> kotlin/Unit|): R|Builder| {
            ^build R|/Builder.Builder|().R|kotlin/apply|<R|Builder|>(R|<local>/action|)
        }

        R|/build|(<L> = [ResolvedTo(RAW_FIR)] [MatchingParameterFunctionTypeKey=@ExtensionFunctionType kotlin/Function1<Builder, kotlin/Unit>] build@fun R|Builder|.<anonymous>(): R|kotlin/Unit| <inline=NoInline>  {
            this@R|special/anonymous|.R|/Builder.version| = String(123)
            local final [ResolvedTo(RAW_FIR)] class A : R|kotlin/Any| {
                public [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] constructor(): R|A| {
                    super<R|kotlin/Any|>()
                }

                public final [ResolvedTo(RAW_FIR)] fun doo(): R|kotlin/Unit| {
                }

            }

            this@R|special/anonymous|.R|/Builder.execute|()
        }
        )
        public final [ResolvedTo(RAW_FIR)] val builder: R|Builder| = R|/build|(<L> = [ResolvedTo(RAW_FIR)] [MatchingParameterFunctionTypeKey=@ExtensionFunctionType kotlin/Function1<Builder, kotlin/Unit>] build@fun R|Builder|.<anonymous>(): R|kotlin/Unit| <inline=NoInline>  {
            this@R|special/anonymous|.R|/Builder.version| = String(321)
        }
        )
            public [ResolvedTo(RAW_FIR)] get(): R|Builder|

        R|/builder|.R|/Builder.execute|()
        R|/builder|.R|/Builder.version| = String()

IMPORTS:
FILE: [ResolvedTo(IMPORTS)] statement.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public final [ResolvedTo(STATUS)] class Builder : R|kotlin/Any| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=Builder] constructor(): R|Builder| {
                super<R|kotlin/Any|>()
            }

            public final [ResolvedTo(STATUS)] var version: R|kotlin/String| = String()
                public [ResolvedTo(STATUS)] [ContainingClassKey=Builder] get(): R|kotlin/String|
                public [ResolvedTo(STATUS)] [ContainingClassKey=Builder] set([ResolvedTo(STATUS)] value: R|kotlin/String|): R|kotlin/Unit|

            public final [ResolvedTo(STATUS)] fun execute(): R|kotlin/Unit| {
                R|kotlin/io/println|(this@R|/Builder|.R|/Builder.version|)
            }

        }

        public final [ResolvedTo(RAW_FIR)] fun build([ResolvedTo(RAW_FIR)] action: R|Builder.() -> kotlin/Unit|): R|Builder| {
            ^build R|/Builder.Builder|().R|kotlin/apply|<R|Builder|>(R|<local>/action|)
        }

        R|/build|(<L> = [ResolvedTo(RAW_FIR)] [MatchingParameterFunctionTypeKey=@ExtensionFunctionType kotlin/Function1<Builder, kotlin/Unit>] build@fun R|Builder|.<anonymous>(): R|kotlin/Unit| <inline=NoInline>  {
            this@R|special/anonymous|.R|/Builder.version| = String(123)
            local final [ResolvedTo(RAW_FIR)] class A : R|kotlin/Any| {
                public [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] constructor(): R|A| {
                    super<R|kotlin/Any|>()
                }

                public final [ResolvedTo(RAW_FIR)] fun doo(): R|kotlin/Unit| {
                }

            }

            this@R|special/anonymous|.R|/Builder.execute|()
        }
        )
        public final [ResolvedTo(RAW_FIR)] val builder: R|Builder| = R|/build|(<L> = [ResolvedTo(RAW_FIR)] [MatchingParameterFunctionTypeKey=@ExtensionFunctionType kotlin/Function1<Builder, kotlin/Unit>] build@fun R|Builder|.<anonymous>(): R|kotlin/Unit| <inline=NoInline>  {
            this@R|special/anonymous|.R|/Builder.version| = String(321)
        }
        )
            public [ResolvedTo(RAW_FIR)] get(): R|Builder|

        R|/builder|.R|/Builder.execute|()
        R|/builder|.R|/Builder.version| = String()

COMPILER_REQUIRED_ANNOTATIONS:
FILE: [ResolvedTo(IMPORTS)] statement.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public final [ResolvedTo(STATUS)] class Builder : R|kotlin/Any| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=Builder] constructor(): R|Builder| {
                super<R|kotlin/Any|>()
            }

            public final [ResolvedTo(STATUS)] var version: R|kotlin/String| = String()
                public [ResolvedTo(STATUS)] [ContainingClassKey=Builder] get(): R|kotlin/String|
                public [ResolvedTo(STATUS)] [ContainingClassKey=Builder] set([ResolvedTo(STATUS)] value: R|kotlin/String|): R|kotlin/Unit|

            public final [ResolvedTo(STATUS)] fun execute(): R|kotlin/Unit| {
                R|kotlin/io/println|(this@R|/Builder|.R|/Builder.version|)
            }

        }

        public final [ResolvedTo(RAW_FIR)] fun build([ResolvedTo(RAW_FIR)] action: R|Builder.() -> kotlin/Unit|): R|Builder| {
            ^build R|/Builder.Builder|().R|kotlin/apply|<R|Builder|>(R|<local>/action|)
        }

        R|/build|(<L> = [ResolvedTo(RAW_FIR)] [MatchingParameterFunctionTypeKey=@ExtensionFunctionType kotlin/Function1<Builder, kotlin/Unit>] build@fun R|Builder|.<anonymous>(): R|kotlin/Unit| <inline=NoInline>  {
            this@R|special/anonymous|.R|/Builder.version| = String(123)
            local final [ResolvedTo(RAW_FIR)] class A : R|kotlin/Any| {
                public [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] constructor(): R|A| {
                    super<R|kotlin/Any|>()
                }

                public final [ResolvedTo(RAW_FIR)] fun doo(): R|kotlin/Unit| {
                }

            }

            this@R|special/anonymous|.R|/Builder.execute|()
        }
        )
        public final [ResolvedTo(RAW_FIR)] val builder: R|Builder| = R|/build|(<L> = [ResolvedTo(RAW_FIR)] [MatchingParameterFunctionTypeKey=@ExtensionFunctionType kotlin/Function1<Builder, kotlin/Unit>] build@fun R|Builder|.<anonymous>(): R|kotlin/Unit| <inline=NoInline>  {
            this@R|special/anonymous|.R|/Builder.version| = String(321)
        }
        )
            public [ResolvedTo(RAW_FIR)] get(): R|Builder|

        R|/builder|.R|/Builder.execute|()
        R|/builder|.R|/Builder.version| = String()

COMPANION_GENERATION:
FILE: [ResolvedTo(IMPORTS)] statement.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public final [ResolvedTo(STATUS)] class Builder : R|kotlin/Any| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=Builder] constructor(): R|Builder| {
                super<R|kotlin/Any|>()
            }

            public final [ResolvedTo(STATUS)] var version: R|kotlin/String| = String()
                public [ResolvedTo(STATUS)] [ContainingClassKey=Builder] get(): R|kotlin/String|
                public [ResolvedTo(STATUS)] [ContainingClassKey=Builder] set([ResolvedTo(STATUS)] value: R|kotlin/String|): R|kotlin/Unit|

            public final [ResolvedTo(STATUS)] fun execute(): R|kotlin/Unit| {
                R|kotlin/io/println|(this@R|/Builder|.R|/Builder.version|)
            }

        }

        public final [ResolvedTo(RAW_FIR)] fun build([ResolvedTo(RAW_FIR)] action: R|Builder.() -> kotlin/Unit|): R|Builder| {
            ^build R|/Builder.Builder|().R|kotlin/apply|<R|Builder|>(R|<local>/action|)
        }

        R|/build|(<L> = [ResolvedTo(RAW_FIR)] [MatchingParameterFunctionTypeKey=@ExtensionFunctionType kotlin/Function1<Builder, kotlin/Unit>] build@fun R|Builder|.<anonymous>(): R|kotlin/Unit| <inline=NoInline>  {
            this@R|special/anonymous|.R|/Builder.version| = String(123)
            local final [ResolvedTo(RAW_FIR)] class A : R|kotlin/Any| {
                public [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] constructor(): R|A| {
                    super<R|kotlin/Any|>()
                }

                public final [ResolvedTo(RAW_FIR)] fun doo(): R|kotlin/Unit| {
                }

            }

            this@R|special/anonymous|.R|/Builder.execute|()
        }
        )
        public final [ResolvedTo(RAW_FIR)] val builder: R|Builder| = R|/build|(<L> = [ResolvedTo(RAW_FIR)] [MatchingParameterFunctionTypeKey=@ExtensionFunctionType kotlin/Function1<Builder, kotlin/Unit>] build@fun R|Builder|.<anonymous>(): R|kotlin/Unit| <inline=NoInline>  {
            this@R|special/anonymous|.R|/Builder.version| = String(321)
        }
        )
            public [ResolvedTo(RAW_FIR)] get(): R|Builder|

        R|/builder|.R|/Builder.execute|()
        R|/builder|.R|/Builder.version| = String()

SUPER_TYPES:
FILE: [ResolvedTo(IMPORTS)] statement.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public final [ResolvedTo(STATUS)] class Builder : R|kotlin/Any| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=Builder] constructor(): R|Builder| {
                super<R|kotlin/Any|>()
            }

            public final [ResolvedTo(STATUS)] var version: R|kotlin/String| = String()
                public [ResolvedTo(STATUS)] [ContainingClassKey=Builder] get(): R|kotlin/String|
                public [ResolvedTo(STATUS)] [ContainingClassKey=Builder] set([ResolvedTo(STATUS)] value: R|kotlin/String|): R|kotlin/Unit|

            public final [ResolvedTo(STATUS)] fun execute(): R|kotlin/Unit| {
                R|kotlin/io/println|(this@R|/Builder|.R|/Builder.version|)
            }

        }

        public final [ResolvedTo(RAW_FIR)] fun build([ResolvedTo(RAW_FIR)] action: R|Builder.() -> kotlin/Unit|): R|Builder| {
            ^build R|/Builder.Builder|().R|kotlin/apply|<R|Builder|>(R|<local>/action|)
        }

        R|/build|(<L> = [ResolvedTo(RAW_FIR)] [MatchingParameterFunctionTypeKey=@ExtensionFunctionType kotlin/Function1<Builder, kotlin/Unit>] build@fun R|Builder|.<anonymous>(): R|kotlin/Unit| <inline=NoInline>  {
            this@R|special/anonymous|.R|/Builder.version| = String(123)
            local final [ResolvedTo(RAW_FIR)] class A : R|kotlin/Any| {
                public [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] constructor(): R|A| {
                    super<R|kotlin/Any|>()
                }

                public final [ResolvedTo(RAW_FIR)] fun doo(): R|kotlin/Unit| {
                }

            }

            this@R|special/anonymous|.R|/Builder.execute|()
        }
        )
        public final [ResolvedTo(RAW_FIR)] val builder: R|Builder| = R|/build|(<L> = [ResolvedTo(RAW_FIR)] [MatchingParameterFunctionTypeKey=@ExtensionFunctionType kotlin/Function1<Builder, kotlin/Unit>] build@fun R|Builder|.<anonymous>(): R|kotlin/Unit| <inline=NoInline>  {
            this@R|special/anonymous|.R|/Builder.version| = String(321)
        }
        )
            public [ResolvedTo(RAW_FIR)] get(): R|Builder|

        R|/builder|.R|/Builder.execute|()
        R|/builder|.R|/Builder.version| = String()

TYPES:
FILE: [ResolvedTo(IMPORTS)] statement.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public final [ResolvedTo(STATUS)] class Builder : R|kotlin/Any| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=Builder] constructor(): R|Builder| {
                super<R|kotlin/Any|>()
            }

            public final [ResolvedTo(STATUS)] var version: R|kotlin/String| = String()
                public [ResolvedTo(STATUS)] [ContainingClassKey=Builder] get(): R|kotlin/String|
                public [ResolvedTo(STATUS)] [ContainingClassKey=Builder] set([ResolvedTo(STATUS)] value: R|kotlin/String|): R|kotlin/Unit|

            public final [ResolvedTo(STATUS)] fun execute(): R|kotlin/Unit| {
                R|kotlin/io/println|(this@R|/Builder|.R|/Builder.version|)
            }

        }

        public final [ResolvedTo(RAW_FIR)] fun build([ResolvedTo(RAW_FIR)] action: R|Builder.() -> kotlin/Unit|): R|Builder| {
            ^build R|/Builder.Builder|().R|kotlin/apply|<R|Builder|>(R|<local>/action|)
        }

        R|/build|(<L> = [ResolvedTo(RAW_FIR)] [MatchingParameterFunctionTypeKey=@ExtensionFunctionType kotlin/Function1<Builder, kotlin/Unit>] build@fun R|Builder|.<anonymous>(): R|kotlin/Unit| <inline=NoInline>  {
            this@R|special/anonymous|.R|/Builder.version| = String(123)
            local final [ResolvedTo(RAW_FIR)] class A : R|kotlin/Any| {
                public [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] constructor(): R|A| {
                    super<R|kotlin/Any|>()
                }

                public final [ResolvedTo(RAW_FIR)] fun doo(): R|kotlin/Unit| {
                }

            }

            this@R|special/anonymous|.R|/Builder.execute|()
        }
        )
        public final [ResolvedTo(RAW_FIR)] val builder: R|Builder| = R|/build|(<L> = [ResolvedTo(RAW_FIR)] [MatchingParameterFunctionTypeKey=@ExtensionFunctionType kotlin/Function1<Builder, kotlin/Unit>] build@fun R|Builder|.<anonymous>(): R|kotlin/Unit| <inline=NoInline>  {
            this@R|special/anonymous|.R|/Builder.version| = String(321)
        }
        )
            public [ResolvedTo(RAW_FIR)] get(): R|Builder|

        R|/builder|.R|/Builder.execute|()
        R|/builder|.R|/Builder.version| = String()

STATUS:
FILE: [ResolvedTo(IMPORTS)] statement.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public final [ResolvedTo(STATUS)] class Builder : R|kotlin/Any| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=Builder] constructor(): R|Builder| {
                super<R|kotlin/Any|>()
            }

            public final [ResolvedTo(STATUS)] var version: R|kotlin/String| = String()
                public [ResolvedTo(STATUS)] [ContainingClassKey=Builder] get(): R|kotlin/String|
                public [ResolvedTo(STATUS)] [ContainingClassKey=Builder] set([ResolvedTo(STATUS)] value: R|kotlin/String|): R|kotlin/Unit|

            public final [ResolvedTo(STATUS)] fun execute(): R|kotlin/Unit| {
                R|kotlin/io/println|(this@R|/Builder|.R|/Builder.version|)
            }

        }

        public final [ResolvedTo(RAW_FIR)] fun build([ResolvedTo(RAW_FIR)] action: R|Builder.() -> kotlin/Unit|): R|Builder| {
            ^build R|/Builder.Builder|().R|kotlin/apply|<R|Builder|>(R|<local>/action|)
        }

        R|/build|(<L> = [ResolvedTo(RAW_FIR)] [MatchingParameterFunctionTypeKey=@ExtensionFunctionType kotlin/Function1<Builder, kotlin/Unit>] build@fun R|Builder|.<anonymous>(): R|kotlin/Unit| <inline=NoInline>  {
            this@R|special/anonymous|.R|/Builder.version| = String(123)
            local final [ResolvedTo(RAW_FIR)] class A : R|kotlin/Any| {
                public [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] constructor(): R|A| {
                    super<R|kotlin/Any|>()
                }

                public final [ResolvedTo(RAW_FIR)] fun doo(): R|kotlin/Unit| {
                }

            }

            this@R|special/anonymous|.R|/Builder.execute|()
        }
        )
        public final [ResolvedTo(RAW_FIR)] val builder: R|Builder| = R|/build|(<L> = [ResolvedTo(RAW_FIR)] [MatchingParameterFunctionTypeKey=@ExtensionFunctionType kotlin/Function1<Builder, kotlin/Unit>] build@fun R|Builder|.<anonymous>(): R|kotlin/Unit| <inline=NoInline>  {
            this@R|special/anonymous|.R|/Builder.version| = String(321)
        }
        )
            public [ResolvedTo(RAW_FIR)] get(): R|Builder|

        R|/builder|.R|/Builder.execute|()
        R|/builder|.R|/Builder.version| = String()

EXPECT_ACTUAL_MATCHING:
FILE: [ResolvedTo(IMPORTS)] statement.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public final [ResolvedTo(STATUS)] class Builder : R|kotlin/Any| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=Builder] constructor(): R|Builder| {
                super<R|kotlin/Any|>()
            }

            public final [ResolvedTo(STATUS)] var version: R|kotlin/String| = String()
                public [ResolvedTo(STATUS)] [ContainingClassKey=Builder] get(): R|kotlin/String|
                public [ResolvedTo(STATUS)] [ContainingClassKey=Builder] set([ResolvedTo(STATUS)] value: R|kotlin/String|): R|kotlin/Unit|

            public final [ResolvedTo(STATUS)] fun execute(): R|kotlin/Unit| {
                R|kotlin/io/println|(this@R|/Builder|.R|/Builder.version|)
            }

        }

        public final [ResolvedTo(RAW_FIR)] fun build([ResolvedTo(RAW_FIR)] action: R|Builder.() -> kotlin/Unit|): R|Builder| {
            ^build R|/Builder.Builder|().R|kotlin/apply|<R|Builder|>(R|<local>/action|)
        }

        R|/build|(<L> = [ResolvedTo(RAW_FIR)] [MatchingParameterFunctionTypeKey=@ExtensionFunctionType kotlin/Function1<Builder, kotlin/Unit>] build@fun R|Builder|.<anonymous>(): R|kotlin/Unit| <inline=NoInline>  {
            this@R|special/anonymous|.R|/Builder.version| = String(123)
            local final [ResolvedTo(RAW_FIR)] class A : R|kotlin/Any| {
                public [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] constructor(): R|A| {
                    super<R|kotlin/Any|>()
                }

                public final [ResolvedTo(RAW_FIR)] fun doo(): R|kotlin/Unit| {
                }

            }

            this@R|special/anonymous|.R|/Builder.execute|()
        }
        )
        public final [ResolvedTo(RAW_FIR)] val builder: R|Builder| = R|/build|(<L> = [ResolvedTo(RAW_FIR)] [MatchingParameterFunctionTypeKey=@ExtensionFunctionType kotlin/Function1<Builder, kotlin/Unit>] build@fun R|Builder|.<anonymous>(): R|kotlin/Unit| <inline=NoInline>  {
            this@R|special/anonymous|.R|/Builder.version| = String(321)
        }
        )
            public [ResolvedTo(RAW_FIR)] get(): R|Builder|

        R|/builder|.R|/Builder.execute|()
        R|/builder|.R|/Builder.version| = String()

ARGUMENTS_OF_ANNOTATIONS:
FILE: [ResolvedTo(IMPORTS)] statement.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public final [ResolvedTo(STATUS)] class Builder : R|kotlin/Any| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=Builder] constructor(): R|Builder| {
                super<R|kotlin/Any|>()
            }

            public final [ResolvedTo(STATUS)] var version: R|kotlin/String| = String()
                public [ResolvedTo(STATUS)] [ContainingClassKey=Builder] get(): R|kotlin/String|
                public [ResolvedTo(STATUS)] [ContainingClassKey=Builder] set([ResolvedTo(STATUS)] value: R|kotlin/String|): R|kotlin/Unit|

            public final [ResolvedTo(STATUS)] fun execute(): R|kotlin/Unit| {
                R|kotlin/io/println|(this@R|/Builder|.R|/Builder.version|)
            }

        }

        public final [ResolvedTo(RAW_FIR)] fun build([ResolvedTo(RAW_FIR)] action: R|Builder.() -> kotlin/Unit|): R|Builder| {
            ^build R|/Builder.Builder|().R|kotlin/apply|<R|Builder|>(R|<local>/action|)
        }

        R|/build|(<L> = [ResolvedTo(RAW_FIR)] [MatchingParameterFunctionTypeKey=@ExtensionFunctionType kotlin/Function1<Builder, kotlin/Unit>] build@fun R|Builder|.<anonymous>(): R|kotlin/Unit| <inline=NoInline>  {
            this@R|special/anonymous|.R|/Builder.version| = String(123)
            local final [ResolvedTo(RAW_FIR)] class A : R|kotlin/Any| {
                public [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] constructor(): R|A| {
                    super<R|kotlin/Any|>()
                }

                public final [ResolvedTo(RAW_FIR)] fun doo(): R|kotlin/Unit| {
                }

            }

            this@R|special/anonymous|.R|/Builder.execute|()
        }
        )
        public final [ResolvedTo(RAW_FIR)] val builder: R|Builder| = R|/build|(<L> = [ResolvedTo(RAW_FIR)] [MatchingParameterFunctionTypeKey=@ExtensionFunctionType kotlin/Function1<Builder, kotlin/Unit>] build@fun R|Builder|.<anonymous>(): R|kotlin/Unit| <inline=NoInline>  {
            this@R|special/anonymous|.R|/Builder.version| = String(321)
        }
        )
            public [ResolvedTo(RAW_FIR)] get(): R|Builder|

        R|/builder|.R|/Builder.execute|()
        R|/builder|.R|/Builder.version| = String()

CONTRACTS:
FILE: [ResolvedTo(IMPORTS)] statement.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public final [ResolvedTo(STATUS)] class Builder : R|kotlin/Any| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=Builder] constructor(): R|Builder| {
                super<R|kotlin/Any|>()
            }

            public final [ResolvedTo(STATUS)] var version: R|kotlin/String| = String()
                public [ResolvedTo(STATUS)] [ContainingClassKey=Builder] get(): R|kotlin/String|
                public [ResolvedTo(STATUS)] [ContainingClassKey=Builder] set([ResolvedTo(STATUS)] value: R|kotlin/String|): R|kotlin/Unit|

            public final [ResolvedTo(STATUS)] fun execute(): R|kotlin/Unit| {
                R|kotlin/io/println|(this@R|/Builder|.R|/Builder.version|)
            }

        }

        public final [ResolvedTo(RAW_FIR)] fun build([ResolvedTo(RAW_FIR)] action: R|Builder.() -> kotlin/Unit|): R|Builder| {
            ^build R|/Builder.Builder|().R|kotlin/apply|<R|Builder|>(R|<local>/action|)
        }

        R|/build|(<L> = [ResolvedTo(RAW_FIR)] [MatchingParameterFunctionTypeKey=@ExtensionFunctionType kotlin/Function1<Builder, kotlin/Unit>] build@fun R|Builder|.<anonymous>(): R|kotlin/Unit| <inline=NoInline>  {
            this@R|special/anonymous|.R|/Builder.version| = String(123)
            local final [ResolvedTo(RAW_FIR)] class A : R|kotlin/Any| {
                public [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] constructor(): R|A| {
                    super<R|kotlin/Any|>()
                }

                public final [ResolvedTo(RAW_FIR)] fun doo(): R|kotlin/Unit| {
                }

            }

            this@R|special/anonymous|.R|/Builder.execute|()
        }
        )
        public final [ResolvedTo(RAW_FIR)] val builder: R|Builder| = R|/build|(<L> = [ResolvedTo(RAW_FIR)] [MatchingParameterFunctionTypeKey=@ExtensionFunctionType kotlin/Function1<Builder, kotlin/Unit>] build@fun R|Builder|.<anonymous>(): R|kotlin/Unit| <inline=NoInline>  {
            this@R|special/anonymous|.R|/Builder.version| = String(321)
        }
        )
            public [ResolvedTo(RAW_FIR)] get(): R|Builder|

        R|/builder|.R|/Builder.execute|()
        R|/builder|.R|/Builder.version| = String()

IMPLICIT_TYPES_BODY_RESOLVE:
FILE: [ResolvedTo(IMPORTS)] statement.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public final [ResolvedTo(STATUS)] class Builder : R|kotlin/Any| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=Builder] constructor(): R|Builder| {
                super<R|kotlin/Any|>()
            }

            public final [ResolvedTo(STATUS)] var version: R|kotlin/String| = String()
                public [ResolvedTo(STATUS)] [ContainingClassKey=Builder] get(): R|kotlin/String|
                public [ResolvedTo(STATUS)] [ContainingClassKey=Builder] set([ResolvedTo(STATUS)] value: R|kotlin/String|): R|kotlin/Unit|

            public final [ResolvedTo(STATUS)] fun execute(): R|kotlin/Unit| {
                R|kotlin/io/println|(this@R|/Builder|.R|/Builder.version|)
            }

        }

        public final [ResolvedTo(RAW_FIR)] fun build([ResolvedTo(RAW_FIR)] action: R|Builder.() -> kotlin/Unit|): R|Builder| {
            ^build R|/Builder.Builder|().R|kotlin/apply|<R|Builder|>(R|<local>/action|)
        }

        R|/build|(<L> = [ResolvedTo(RAW_FIR)] [MatchingParameterFunctionTypeKey=@ExtensionFunctionType kotlin/Function1<Builder, kotlin/Unit>] build@fun R|Builder|.<anonymous>(): R|kotlin/Unit| <inline=NoInline>  {
            this@R|special/anonymous|.R|/Builder.version| = String(123)
            local final [ResolvedTo(RAW_FIR)] class A : R|kotlin/Any| {
                public [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] constructor(): R|A| {
                    super<R|kotlin/Any|>()
                }

                public final [ResolvedTo(RAW_FIR)] fun doo(): R|kotlin/Unit| {
                }

            }

            this@R|special/anonymous|.R|/Builder.execute|()
        }
        )
        public final [ResolvedTo(RAW_FIR)] val builder: R|Builder| = R|/build|(<L> = [ResolvedTo(RAW_FIR)] [MatchingParameterFunctionTypeKey=@ExtensionFunctionType kotlin/Function1<Builder, kotlin/Unit>] build@fun R|Builder|.<anonymous>(): R|kotlin/Unit| <inline=NoInline>  {
            this@R|special/anonymous|.R|/Builder.version| = String(321)
        }
        )
            public [ResolvedTo(RAW_FIR)] get(): R|Builder|

        R|/builder|.R|/Builder.execute|()
        R|/builder|.R|/Builder.version| = String()

ANNOTATIONS_ARGUMENTS_MAPPING:
FILE: [ResolvedTo(IMPORTS)] statement.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public final [ResolvedTo(STATUS)] class Builder : R|kotlin/Any| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=Builder] constructor(): R|Builder| {
                super<R|kotlin/Any|>()
            }

            public final [ResolvedTo(STATUS)] var version: R|kotlin/String| = String()
                public [ResolvedTo(STATUS)] [ContainingClassKey=Builder] get(): R|kotlin/String|
                public [ResolvedTo(STATUS)] [ContainingClassKey=Builder] set([ResolvedTo(STATUS)] value: R|kotlin/String|): R|kotlin/Unit|

            public final [ResolvedTo(STATUS)] fun execute(): R|kotlin/Unit| {
                R|kotlin/io/println|(this@R|/Builder|.R|/Builder.version|)
            }

        }

        public final [ResolvedTo(RAW_FIR)] fun build([ResolvedTo(RAW_FIR)] action: R|Builder.() -> kotlin/Unit|): R|Builder| {
            ^build R|/Builder.Builder|().R|kotlin/apply|<R|Builder|>(R|<local>/action|)
        }

        R|/build|(<L> = [ResolvedTo(RAW_FIR)] [MatchingParameterFunctionTypeKey=@ExtensionFunctionType kotlin/Function1<Builder, kotlin/Unit>] build@fun R|Builder|.<anonymous>(): R|kotlin/Unit| <inline=NoInline>  {
            this@R|special/anonymous|.R|/Builder.version| = String(123)
            local final [ResolvedTo(RAW_FIR)] class A : R|kotlin/Any| {
                public [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] constructor(): R|A| {
                    super<R|kotlin/Any|>()
                }

                public final [ResolvedTo(RAW_FIR)] fun doo(): R|kotlin/Unit| {
                }

            }

            this@R|special/anonymous|.R|/Builder.execute|()
        }
        )
        public final [ResolvedTo(RAW_FIR)] val builder: R|Builder| = R|/build|(<L> = [ResolvedTo(RAW_FIR)] [MatchingParameterFunctionTypeKey=@ExtensionFunctionType kotlin/Function1<Builder, kotlin/Unit>] build@fun R|Builder|.<anonymous>(): R|kotlin/Unit| <inline=NoInline>  {
            this@R|special/anonymous|.R|/Builder.version| = String(321)
        }
        )
            public [ResolvedTo(RAW_FIR)] get(): R|Builder|

        R|/builder|.R|/Builder.execute|()
        R|/builder|.R|/Builder.version| = String()

BODY_RESOLVE:
FILE: [ResolvedTo(IMPORTS)] statement.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public final [ResolvedTo(STATUS)] class Builder : R|kotlin/Any| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=Builder] constructor(): R|Builder| {
                super<R|kotlin/Any|>()
            }

            public final [ResolvedTo(STATUS)] var version: R|kotlin/String| = String()
                public [ResolvedTo(STATUS)] [ContainingClassKey=Builder] get(): R|kotlin/String|
                public [ResolvedTo(STATUS)] [ContainingClassKey=Builder] set([ResolvedTo(STATUS)] value: R|kotlin/String|): R|kotlin/Unit|

            public final [ResolvedTo(STATUS)] fun execute(): R|kotlin/Unit| {
                R|kotlin/io/println|(this@R|/Builder|.R|/Builder.version|)
            }

        }

        public final [ResolvedTo(RAW_FIR)] fun build([ResolvedTo(RAW_FIR)] action: R|Builder.() -> kotlin/Unit|): R|Builder| {
            ^build R|/Builder.Builder|().R|kotlin/apply|<R|Builder|>(R|<local>/action|)
        }

        R|/build|(<L> = [ResolvedTo(RAW_FIR)] [MatchingParameterFunctionTypeKey=@ExtensionFunctionType kotlin/Function1<Builder, kotlin/Unit>] build@fun R|Builder|.<anonymous>(): R|kotlin/Unit| <inline=NoInline>  {
            this@R|special/anonymous|.R|/Builder.version| = String(123)
            local final [ResolvedTo(RAW_FIR)] class A : R|kotlin/Any| {
                public [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] constructor(): R|A| {
                    super<R|kotlin/Any|>()
                }

                public final [ResolvedTo(RAW_FIR)] fun doo(): R|kotlin/Unit| {
                }

            }

            this@R|special/anonymous|.R|/Builder.execute|()
        }
        )
        public final [ResolvedTo(RAW_FIR)] val builder: R|Builder| = R|/build|(<L> = [ResolvedTo(RAW_FIR)] [MatchingParameterFunctionTypeKey=@ExtensionFunctionType kotlin/Function1<Builder, kotlin/Unit>] build@fun R|Builder|.<anonymous>(): R|kotlin/Unit| <inline=NoInline>  {
            this@R|special/anonymous|.R|/Builder.version| = String(321)
        }
        )
            public [ResolvedTo(RAW_FIR)] get(): R|Builder|

        R|/builder|.R|/Builder.execute|()
        R|/builder|.R|/Builder.version| = String()

FILE RAW TO BODY:
FILE: [ResolvedTo(IMPORTS)] statement.kts
    context(<script>@R|kotlin/script/templates/standard/ScriptTemplateWithArgs|)
    SCRIPT: [ResolvedTo(BODY_RESOLVE)] 
        [ResolvedTo(RAW_FIR)] lval args: R|kotlin/Array<kotlin/String>|

        public final [ResolvedTo(STATUS)] class Builder : R|kotlin/Any| {
            public [ResolvedTo(STATUS)] [ContainingClassKey=Builder] constructor(): R|Builder| {
                super<R|kotlin/Any|>()
            }

            public final [ResolvedTo(STATUS)] var version: R|kotlin/String| = String()
                public [ResolvedTo(STATUS)] [ContainingClassKey=Builder] get(): R|kotlin/String|
                public [ResolvedTo(STATUS)] [ContainingClassKey=Builder] set([ResolvedTo(STATUS)] value: R|kotlin/String|): R|kotlin/Unit|

            public final [ResolvedTo(STATUS)] fun execute(): R|kotlin/Unit| {
                R|kotlin/io/println|(this@R|/Builder|.R|/Builder.version|)
            }

        }

        public final [ResolvedTo(RAW_FIR)] fun build([ResolvedTo(RAW_FIR)] action: R|Builder.() -> kotlin/Unit|): R|Builder| {
            ^build R|/Builder.Builder|().R|kotlin/apply|<R|Builder|>(R|<local>/action|)
        }

        R|/build|(<L> = [ResolvedTo(RAW_FIR)] [MatchingParameterFunctionTypeKey=@ExtensionFunctionType kotlin/Function1<Builder, kotlin/Unit>] build@fun R|Builder|.<anonymous>(): R|kotlin/Unit| <inline=NoInline>  {
            this@R|special/anonymous|.R|/Builder.version| = String(123)
            local final [ResolvedTo(RAW_FIR)] class A : R|kotlin/Any| {
                public [ResolvedTo(RAW_FIR)] [ContainingClassKey=A] constructor(): R|A| {
                    super<R|kotlin/Any|>()
                }

                public final [ResolvedTo(RAW_FIR)] fun doo(): R|kotlin/Unit| {
                }

            }

            this@R|special/anonymous|.R|/Builder.execute|()
        }
        )
        public final [ResolvedTo(RAW_FIR)] val builder: R|Builder| = R|/build|(<L> = [ResolvedTo(RAW_FIR)] [MatchingParameterFunctionTypeKey=@ExtensionFunctionType kotlin/Function1<Builder, kotlin/Unit>] build@fun R|Builder|.<anonymous>(): R|kotlin/Unit| <inline=NoInline>  {
            this@R|special/anonymous|.R|/Builder.version| = String(321)
        }
        )
            public [ResolvedTo(RAW_FIR)] get(): R|Builder|

        R|/builder|.R|/Builder.execute|()
        R|/builder|.R|/Builder.version| = String()

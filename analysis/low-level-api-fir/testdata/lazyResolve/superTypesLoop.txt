
RAW_FIR:
FILE: [RAW_FIR] superTypesLoop.kt
    [RAW_FIR] annotations container
    public? open [RAW_FIR] class resolveMe : C {
        public? [RAW_FIR] [ContainingClassKey=resolveMe] constructor(): R|resolveMe| {
            LAZY_super<C>
        }

    }
    public? open [RAW_FIR] class A : B {
        public? [RAW_FIR] [ContainingClassKey=A] constructor(): R|A| {
            LAZY_super<B>
        }

    }
    public? open [RAW_FIR] class B : C {
        public? [RAW_FIR] [ContainingClassKey=B] constructor(): R|B| {
            LAZY_super<C>
        }

    }
    public? open [RAW_FIR] class C : A {
        public? [RAW_FIR] [ContainingClassKey=C] constructor(): R|C| {
            LAZY_super<A>
        }

    }

IMPORTS:
FILE: [IMPORTS] superTypesLoop.kt
    [RAW_FIR] annotations container
    public? open [RAW_FIR] class resolveMe : C {
        public? [RAW_FIR] [ContainingClassKey=resolveMe] constructor(): R|resolveMe| {
            LAZY_super<C>
        }

    }
    public? open [RAW_FIR] class A : B {
        public? [RAW_FIR] [ContainingClassKey=A] constructor(): R|A| {
            LAZY_super<B>
        }

    }
    public? open [RAW_FIR] class B : C {
        public? [RAW_FIR] [ContainingClassKey=B] constructor(): R|B| {
            LAZY_super<C>
        }

    }
    public? open [RAW_FIR] class C : A {
        public? [RAW_FIR] [ContainingClassKey=C] constructor(): R|C| {
            LAZY_super<A>
        }

    }

COMPILER_REQUIRED_ANNOTATIONS:
FILE: [IMPORTS] superTypesLoop.kt
    [RAW_FIR] annotations container
    public? open [COMPILER_REQUIRED_ANNOTATIONS] class resolveMe : C {
        public? [COMPILER_REQUIRED_ANNOTATIONS] [ContainingClassKey=resolveMe] constructor(): R|resolveMe| {
            LAZY_super<C>
        }

    }
    public? open [RAW_FIR] class A : B {
        public? [RAW_FIR] [ContainingClassKey=A] constructor(): R|A| {
            LAZY_super<B>
        }

    }
    public? open [RAW_FIR] class B : C {
        public? [RAW_FIR] [ContainingClassKey=B] constructor(): R|B| {
            LAZY_super<C>
        }

    }
    public? open [RAW_FIR] class C : A {
        public? [RAW_FIR] [ContainingClassKey=C] constructor(): R|C| {
            LAZY_super<A>
        }

    }

COMPANION_GENERATION:
FILE: [IMPORTS] superTypesLoop.kt
    [RAW_FIR] annotations container
    public? open [COMPANION_GENERATION] class resolveMe : C {
        public? [COMPANION_GENERATION] [ContainingClassKey=resolveMe] constructor(): R|resolveMe| {
            LAZY_super<C>
        }

    }
    public? open [RAW_FIR] class A : B {
        public? [RAW_FIR] [ContainingClassKey=A] constructor(): R|A| {
            LAZY_super<B>
        }

    }
    public? open [RAW_FIR] class B : C {
        public? [RAW_FIR] [ContainingClassKey=B] constructor(): R|B| {
            LAZY_super<C>
        }

    }
    public? open [RAW_FIR] class C : A {
        public? [RAW_FIR] [ContainingClassKey=C] constructor(): R|C| {
            LAZY_super<A>
        }

    }

SUPER_TYPES:
FILE: [IMPORTS] superTypesLoop.kt
    [RAW_FIR] annotations container
    public? open [SUPER_TYPES] class resolveMe : R|C| {
        public? [SUPER_TYPES] [ContainingClassKey=resolveMe] constructor(): R|resolveMe| {
            LAZY_super<C>
        }

    }
    public? open [RAW_FIR] class A : <ERROR TYPE REF: Loop in supertype: /A -> /B> {
        public? [RAW_FIR] [ContainingClassKey=A] constructor(): R|A| {
            LAZY_super<B>
        }

    }
    public? open [RAW_FIR] class B : <ERROR TYPE REF: Loop in supertype: /B -> /C> {
        public? [RAW_FIR] [ContainingClassKey=B] constructor(): R|B| {
            LAZY_super<C>
        }

    }
    public? open [RAW_FIR] class C : <ERROR TYPE REF: Loop in supertype: /C -> /A> {
        public? [RAW_FIR] [ContainingClassKey=C] constructor(): R|C| {
            LAZY_super<A>
        }

    }

TYPES:
FILE: [IMPORTS] superTypesLoop.kt
    [RAW_FIR] annotations container
    public? open [TYPES] class resolveMe : R|C| {
        public? [TYPES] [ContainingClassKey=resolveMe] constructor(): R|resolveMe| {
            LAZY_super<R|C|>
        }

    }
    public? open [RAW_FIR] class A : <ERROR TYPE REF: Loop in supertype: /A -> /B> {
        public? [RAW_FIR] [ContainingClassKey=A] constructor(): R|A| {
            LAZY_super<B>
        }

    }
    public? open [RAW_FIR] class B : <ERROR TYPE REF: Loop in supertype: /B -> /C> {
        public? [RAW_FIR] [ContainingClassKey=B] constructor(): R|B| {
            LAZY_super<C>
        }

    }
    public? open [SUPER_TYPES] class C : <ERROR TYPE REF: Loop in supertype: /C -> /A> {
        public? [SUPER_TYPES] [ContainingClassKey=C] constructor(): R|C| {
            LAZY_super<A>
        }

    }

STATUS:
FILE: [IMPORTS] superTypesLoop.kt
    [RAW_FIR] annotations container
    public open [STATUS] class resolveMe : R|C| {
        public [STATUS] [ContainingClassKey=resolveMe] constructor(): R|resolveMe| {
            LAZY_super<R|C|>
        }

    }
    public? open [RAW_FIR] class A : <ERROR TYPE REF: Loop in supertype: /A -> /B> {
        public? [RAW_FIR] [ContainingClassKey=A] constructor(): R|A| {
            LAZY_super<B>
        }

    }
    public? open [RAW_FIR] class B : <ERROR TYPE REF: Loop in supertype: /B -> /C> {
        public? [RAW_FIR] [ContainingClassKey=B] constructor(): R|B| {
            LAZY_super<C>
        }

    }
    public open [TYPES] class C : <ERROR TYPE REF: Loop in supertype: /C -> /A> {
        public [TYPES] [ContainingClassKey=C] constructor(): R|C| {
            LAZY_super<R|A|>
        }

    }

EXPECT_ACTUAL_MATCHING:
FILE: [IMPORTS] superTypesLoop.kt
    [RAW_FIR] annotations container
    public open [EXPECT_ACTUAL_MATCHING] class resolveMe : R|C| {
        public [EXPECT_ACTUAL_MATCHING] [ContainingClassKey=resolveMe] constructor(): R|resolveMe| {
            super<R|C|>()
        }

    }
    public? open [RAW_FIR] class A : <ERROR TYPE REF: Loop in supertype: /A -> /B> {
        public? [RAW_FIR] [ContainingClassKey=A] constructor(): R|A| {
            LAZY_super<B>
        }

    }
    public? open [RAW_FIR] class B : <ERROR TYPE REF: Loop in supertype: /B -> /C> {
        public? [RAW_FIR] [ContainingClassKey=B] constructor(): R|B| {
            LAZY_super<C>
        }

    }
    public open [TYPES] class C : <ERROR TYPE REF: Loop in supertype: /C -> /A> {
        public [TYPES] [ContainingClassKey=C] constructor(): R|C| {
            LAZY_super<R|A|>
        }

    }

ARGUMENTS_OF_ANNOTATIONS:
FILE: [IMPORTS] superTypesLoop.kt
    [RAW_FIR] annotations container
    public open [ARGUMENTS_OF_ANNOTATIONS] class resolveMe : R|C| {
        public [ARGUMENTS_OF_ANNOTATIONS] [ContainingClassKey=resolveMe] constructor(): R|resolveMe| {
            super<R|C|>()
        }

    }
    public? open [RAW_FIR] class A : <ERROR TYPE REF: Loop in supertype: /A -> /B> {
        public? [RAW_FIR] [ContainingClassKey=A] constructor(): R|A| {
            LAZY_super<B>
        }

    }
    public? open [RAW_FIR] class B : <ERROR TYPE REF: Loop in supertype: /B -> /C> {
        public? [RAW_FIR] [ContainingClassKey=B] constructor(): R|B| {
            LAZY_super<C>
        }

    }
    public open [TYPES] class C : <ERROR TYPE REF: Loop in supertype: /C -> /A> {
        public [TYPES] [ContainingClassKey=C] constructor(): R|C| {
            LAZY_super<R|A|>
        }

    }

CONTRACTS:
FILE: [IMPORTS] superTypesLoop.kt
    [RAW_FIR] annotations container
    public open [CONTRACTS] class resolveMe : R|C| {
        public [CONTRACTS] [ContainingClassKey=resolveMe] constructor(): R|resolveMe| {
            super<R|C|>()
        }

    }
    public? open [RAW_FIR] class A : <ERROR TYPE REF: Loop in supertype: /A -> /B> {
        public? [RAW_FIR] [ContainingClassKey=A] constructor(): R|A| {
            LAZY_super<B>
        }

    }
    public? open [RAW_FIR] class B : <ERROR TYPE REF: Loop in supertype: /B -> /C> {
        public? [RAW_FIR] [ContainingClassKey=B] constructor(): R|B| {
            LAZY_super<C>
        }

    }
    public open [TYPES] class C : <ERROR TYPE REF: Loop in supertype: /C -> /A> {
        public [TYPES] [ContainingClassKey=C] constructor(): R|C| {
            LAZY_super<R|A|>
        }

    }

IMPLICIT_TYPES_BODY_RESOLVE:
FILE: [IMPORTS] superTypesLoop.kt
    [RAW_FIR] annotations container
    public open [IMPLICIT_TYPES_BODY_RESOLVE] class resolveMe : R|C| {
        public [IMPLICIT_TYPES_BODY_RESOLVE] [ContainingClassKey=resolveMe] constructor(): R|resolveMe| {
            super<R|C|>()
        }

    }
    public? open [RAW_FIR] class A : <ERROR TYPE REF: Loop in supertype: /A -> /B> {
        public? [RAW_FIR] [ContainingClassKey=A] constructor(): R|A| {
            LAZY_super<B>
        }

    }
    public? open [RAW_FIR] class B : <ERROR TYPE REF: Loop in supertype: /B -> /C> {
        public? [RAW_FIR] [ContainingClassKey=B] constructor(): R|B| {
            LAZY_super<C>
        }

    }
    public open [TYPES] class C : <ERROR TYPE REF: Loop in supertype: /C -> /A> {
        public [TYPES] [ContainingClassKey=C] constructor(): R|C| {
            LAZY_super<R|A|>
        }

    }

ANNOTATIONS_ARGUMENTS_MAPPING:
FILE: [IMPORTS] superTypesLoop.kt
    [RAW_FIR] annotations container
    public open [ANNOTATIONS_ARGUMENTS_MAPPING] class resolveMe : R|C| {
        public [ANNOTATIONS_ARGUMENTS_MAPPING] [ContainingClassKey=resolveMe] constructor(): R|resolveMe| {
            super<R|C|>()
        }

    }
    public? open [RAW_FIR] class A : <ERROR TYPE REF: Loop in supertype: /A -> /B> {
        public? [RAW_FIR] [ContainingClassKey=A] constructor(): R|A| {
            LAZY_super<B>
        }

    }
    public? open [RAW_FIR] class B : <ERROR TYPE REF: Loop in supertype: /B -> /C> {
        public? [RAW_FIR] [ContainingClassKey=B] constructor(): R|B| {
            LAZY_super<C>
        }

    }
    public open [TYPES] class C : <ERROR TYPE REF: Loop in supertype: /C -> /A> {
        public [TYPES] [ContainingClassKey=C] constructor(): R|C| {
            LAZY_super<R|A|>
        }

    }

BODY_RESOLVE:
FILE: [IMPORTS] superTypesLoop.kt
    [RAW_FIR] annotations container
    public open [BODY_RESOLVE] class resolveMe : R|C| {
        public [BODY_RESOLVE] [ContainingClassKey=resolveMe] constructor(): R|resolveMe| {
            super<R|C|>()
        }

    }
    public? open [RAW_FIR] class A : <ERROR TYPE REF: Loop in supertype: /A -> /B> {
        public? [RAW_FIR] [ContainingClassKey=A] constructor(): R|A| {
            LAZY_super<B>
        }

    }
    public? open [RAW_FIR] class B : <ERROR TYPE REF: Loop in supertype: /B -> /C> {
        public? [RAW_FIR] [ContainingClassKey=B] constructor(): R|B| {
            LAZY_super<C>
        }

    }
    public open [STATUS] class C : <ERROR TYPE REF: Loop in supertype: /C -> /A> {
        public [STATUS] [ContainingClassKey=C] constructor(): R|C| {
            LAZY_super<R|A|>
        }

    }

FILE RAW TO BODY:
FILE: [IMPORTS] superTypesLoop.kt
    [BODY_RESOLVE] annotations container
    public open [BODY_RESOLVE] class resolveMe : R|C| {
        public [BODY_RESOLVE] [ContainingClassKey=resolveMe] constructor(): R|resolveMe| {
            super<R|C|>()
        }

    }
    public open [BODY_RESOLVE] class A : <ERROR TYPE REF: Loop in supertype: /A -> /B> {
        public [BODY_RESOLVE] [ContainingClassKey=A] constructor(): R|A| {
            super<R|B|>()
        }

    }
    public open [BODY_RESOLVE] class B : <ERROR TYPE REF: Loop in supertype: /B -> /C> {
        public [BODY_RESOLVE] [ContainingClassKey=B] constructor(): R|B| {
            super<R|C|>()
        }

    }
    public open [BODY_RESOLVE] class C : <ERROR TYPE REF: Loop in supertype: /C -> /A> {
        public [BODY_RESOLVE] [ContainingClassKey=C] constructor(): R|C| {
            super<R|A|>()
        }

    }

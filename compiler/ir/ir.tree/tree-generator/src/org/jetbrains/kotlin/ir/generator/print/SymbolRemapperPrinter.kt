/*
 * Copyright 2010-2023 JetBrains s.r.o. and Kotlin Programming Language contributors.
 * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin.ir.generator.print

import org.jetbrains.kotlin.generators.tree.AbstractField.SymbolFieldRole
import org.jetbrains.kotlin.generators.tree.ClassOrElementRef
import org.jetbrains.kotlin.generators.tree.ClassRef
import org.jetbrains.kotlin.generators.tree.ImplementationKind
import org.jetbrains.kotlin.generators.tree.TypeKind
import org.jetbrains.kotlin.generators.tree.printer.*
import org.jetbrains.kotlin.ir.generator.*
import org.jetbrains.kotlin.ir.generator.model.Element
import org.jetbrains.kotlin.ir.generator.model.ListField
import org.jetbrains.kotlin.util.capitalizeDecapitalize.capitalizeAsciiOnly
import org.jetbrains.kotlin.utils.addToStdlib.ifNotEmpty
import org.jetbrains.kotlin.utils.withIndent
import java.io.File

private fun symbolRemapperMethodName(symbolType: ClassRef<*>, role: SymbolFieldRole): String {
    val elementName = symbolType.simpleName.removePrefix("Ir").removeSuffix("Symbol")
    return "get${role.name.lowercase().capitalizeAsciiOnly()}$elementName"
}

internal abstract class AbstractSymbolRemapperPrinter(
    private val printer: ImportCollectingPrinter,
    val elements: List<Element>,
    val roles: List<SymbolFieldRole>,
) {
    private data class FieldWithSymbol(
        val symbolType: ClassRef<*>,
        val fieldName: String,
        val role: SymbolFieldRole,
        val fieldContainer: ClassOrElementRef,
    )

    companion object {
        private val additionalSymbolFields = listOf(
            FieldWithSymbol(classifierSymbolType, "classifier", SymbolFieldRole.REFERENCED, irSimpleTypeType),
            FieldWithSymbol(typeAliasSymbolType, "typeAlias", SymbolFieldRole.REFERENCED, irTypeAbbreviationType)
        )
    }

    abstract val symbolRemapperType: ClassRef<*>

    abstract val implementationKind: ImplementationKind

    open val symbolRemapperSuperTypes: List<ClassRef<*>>
        get() = emptyList()

    open val kDoc: String?
        get() = null

    private fun ImportCollectingPrinter.printMethod(symbolType: ClassRef<*>, role: SymbolFieldRole) {
        val symbolParameter = FunctionParameter("symbol", symbolType)
        printFunctionDeclaration(
            symbolRemapperMethodName(symbolType, role),
            parameters = listOf(symbolParameter),
            returnType = symbolType,
            override = symbolRemapperSuperTypes.isNotEmpty(),
        )
        printMethodImplementation(symbolParameter, role)
    }

    protected open fun ImportCollectingPrinter.printMethodImplementation(symbolParameter: FunctionParameter, role: SymbolFieldRole) {
        println()
    }

    protected open fun ImportCollectingPrinter.printAdditionalDeclarations() {}

    private val Element.fieldsWithSymbols: List<FieldWithSymbol>
        get() = allFields.mapNotNull { field ->
            val role = field.symbolFieldRole ?: return@mapNotNull null
            val symbolType = if (field is ListField) {
                field.baseType
            } else {
                field.typeRef
            } as? ClassRef<*> ?: return@mapNotNull null
            FieldWithSymbol(symbolType.copy(nullable = false), field.name, role, this)
        }

    fun printSymbolRemapper() {
        printer.run {
            printKDoc(
                buildString {
                    kDoc?.let {
                        append(it)
                        appendLine()
                        appendLine()
                    }
                    append("Auto-generated by [${this@AbstractSymbolRemapperPrinter::class.qualifiedName}]")
                },
            )
            assert(symbolRemapperType.kind == implementationKind.typeKind) { "Type kind mismatch" }
            print(implementationKind.title, " ", symbolRemapperType.simpleName)
            symbolRemapperSuperTypes.ifNotEmpty {
                print(joinToString(prefix = " : ") { it.render() + if (it.kind == TypeKind.Class) "()" else "" })
            }
            printBlock {
                val elementSymbolFields = elements.flatMap { element ->
                    if (element.implementations.isNotEmpty()) {
                        element.fieldsWithSymbols
                    } else {
                        emptyList()
                    }
                }
                for (role in roles) {
                    val allSymbolFields = (elementSymbolFields + additionalSymbolFields)
                        .filter { it.role == role }
                        .groupBy { it.symbolType }
                    for ((symbolType, fields) in allSymbolFields) {
                        println()
                        if (symbolRemapperSuperTypes.isEmpty()) {
                            val kDoc = buildString {
                                append("Remaps symbols stored, e.g., in the following properties (not necessarily limited to those properties):")
                                for ((_, fieldName, _, element) in fields) {
                                    addImport(element)
                                    appendLine()
                                    append("- [${element.typeName}.$fieldName]")
                                }
                            }
                            printKDoc(kDoc)
                        }
                        printMethod(symbolType, role)
                    }
                }
                printAdditionalDeclarations()
            }
        }
    }
}

internal class DeclaredSymbolRemapperInterfacePrinter(
    printer: ImportCollectingPrinter,
    elements: List<Element>,
    override val symbolRemapperType: ClassRef<*>,
) : AbstractSymbolRemapperPrinter(printer, elements, roles = listOf(SymbolFieldRole.DECLARED)) {
    override val implementationKind: ImplementationKind
        get() = ImplementationKind.Interface

    override val kDoc: String
        get() = "Used to replace declarations' own symbols with new ones."
}

internal class ReferencedSymbolRemapperInterfacePrinter(
    printer: ImportCollectingPrinter,
    elements: List<Element>,
    override val symbolRemapperType: ClassRef<*>,
) : AbstractSymbolRemapperPrinter(printer, elements, roles = listOf(SymbolFieldRole.REFERENCED)) {
    override val implementationKind: ImplementationKind
        get() = ImplementationKind.Interface

    override val kDoc: String
        get() = "Used to replace symbols that represent references to declarations other than the symbol's owner."
}

internal class SymbolRemapperInterfacePrinter(
    printer: ImportCollectingPrinter,
    elements: List<Element>,
    override val symbolRemapperType: ClassRef<*>,
) : AbstractSymbolRemapperPrinter(printer, elements, roles = emptyList()) {
    override val implementationKind: ImplementationKind
        get() = ImplementationKind.Interface

    override val symbolRemapperSuperTypes: List<ClassRef<*>>
        get() = listOf(declaredSymbolRemapperType, referencedSymbolRemapperType)

    override fun ImportCollectingPrinter.printAdditionalDeclarations() {
        println()
        EmptySymbolRemapperPrinter(this, elements).printSymbolRemapper()
        println()
        print("companion object")
        printBlock {
            println("val EMPTY: ${symbolRemapperType.render()} = ${emptySymbolRemapperType.simpleName}()")
        }
        println()
        println("// This method is left for compatibility with Compose. Do not use it, it will be removed soon.")
        printFunctionDeclaration(
            name = "getReferencedClassOrNull",
            parameters = listOf(FunctionParameter("symbol", classSymbolType.copy(nullable = true))),
            returnType = classSymbolType.copy(nullable = true),
        )
        println(" =")
        withIndent {
            println("symbol?.let { getReferencedClass(it) }")
        }
    }
}

private class EmptySymbolRemapperPrinter(
    printer: ImportCollectingPrinter,
    elements: List<Element>,
) : AbstractSymbolRemapperPrinter(printer, elements, listOf(SymbolFieldRole.DECLARED, SymbolFieldRole.REFERENCED)) {

    override val symbolRemapperType = emptySymbolRemapperType

    override val symbolRemapperSuperTypes: List<ClassRef<*>>
        get() = listOf(org.jetbrains.kotlin.ir.generator.symbolRemapperType)

    override val implementationKind: ImplementationKind
        get() = ImplementationKind.OpenClass

    override val kDoc: String
        get() = "The default implementation of [${org.jetbrains.kotlin.ir.generator.symbolRemapperType.simpleName}]\n" +
                "that just keeps the old symbols everywhere."

    override fun ImportCollectingPrinter.printMethodImplementation(
        symbolParameter: FunctionParameter,
        role: SymbolFieldRole
    ) {
        println(" = ", symbolParameter.name)
    }
}

internal fun printSymbolRemapper(
    generationPath: File,
    model: Model,
    type: ClassRef<*>,
    makePrinter: (ImportCollectingPrinter, List<Element>, ClassRef<*>) -> AbstractSymbolRemapperPrinter,
) = printGeneratedType(generationPath, TREE_GENERATOR_README, type.packageName, type.simpleName) {
    makePrinter(this, model.elements, type).printSymbolRemapper()
}

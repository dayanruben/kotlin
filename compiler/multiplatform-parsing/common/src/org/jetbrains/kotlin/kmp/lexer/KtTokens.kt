/*
 * Copyright 2010-2025 JetBrains s.r.o. and Kotlin Programming Language contributors.
 * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin.kmp.lexer

import fleet.com.intellij.platform.syntax.SyntaxElementType
import fleet.com.intellij.platform.syntax.element.SyntaxTokenTypes

object KtTokens {
    val EOF: SyntaxElementType = SyntaxElementType("EOF")

    val RESERVED: SyntaxElementType = SyntaxElementType("RESERVED")

    val BLOCK_COMMENT: SyntaxElementType = SyntaxElementType("BLOCK_COMMENT")
    val EOL_COMMENT: SyntaxElementType = SyntaxElementType("EOL_COMMENT")
    val SHEBANG_COMMENT: SyntaxElementType = SyntaxElementType("SHEBANG_COMMENT")

    val DOC_COMMENT: SyntaxElementType = SyntaxElementType("KDoc")

    val WHITE_SPACE: SyntaxElementType = SyntaxTokenTypes.WHITE_SPACE

    val INTEGER_LITERAL: SyntaxElementType = SyntaxElementType("INTEGER_LITERAL")
    val FLOAT_LITERAL: SyntaxElementType = SyntaxElementType("FLOAT_CONSTANT")
    val CHARACTER_LITERAL: SyntaxElementType = SyntaxElementType("CHARACTER_LITERAL")

    val INTERPOLATION_PREFIX: SyntaxElementType = SyntaxElementType("INTERPOLATION_PREFIX")
    val CLOSING_QUOTE: SyntaxElementType = SyntaxElementType("CLOSING_QUOTE")
    val OPEN_QUOTE: SyntaxElementType = SyntaxElementType("OPEN_QUOTE")
    val REGULAR_STRING_PART: SyntaxElementType = SyntaxElementType("REGULAR_STRING_PART")
    val ESCAPE_SEQUENCE: SyntaxElementType = SyntaxElementType("ESCAPE_SEQUENCE")
    val SHORT_TEMPLATE_ENTRY_START: SyntaxElementType = SyntaxElementType("SHORT_TEMPLATE_ENTRY_START")
    val LONG_TEMPLATE_ENTRY_START: SyntaxElementType = SyntaxElementType("LONG_TEMPLATE_ENTRY_START")
    val LONG_TEMPLATE_ENTRY_END: SyntaxElementType = SyntaxElementType("LONG_TEMPLATE_ENTRY_END")
    val DANGLING_NEWLINE: SyntaxElementType = SyntaxElementType("DANGLING_NEWLINE")

    val PACKAGE_KEYWORD: SyntaxElementType = SyntaxElementType("package")
    val AS_KEYWORD: SyntaxElementType = SyntaxElementType("as")
    val TYPE_ALIAS_KEYWORD: SyntaxElementType = SyntaxElementType("typealias")
    val CLASS_KEYWORD: SyntaxElementType = SyntaxElementType("class")
    val THIS_KEYWORD: SyntaxElementType = SyntaxElementType("this")
    val SUPER_KEYWORD: SyntaxElementType = SyntaxElementType("super")
    val VAL_KEYWORD: SyntaxElementType = SyntaxElementType("val")
    val VAR_KEYWORD: SyntaxElementType = SyntaxElementType("var")
    val FUN_KEYWORD: SyntaxElementType = SyntaxElementType("fun")
    val FOR_KEYWORD: SyntaxElementType = SyntaxElementType("for")
    val NULL_KEYWORD: SyntaxElementType = SyntaxElementType("null")
    val TRUE_KEYWORD: SyntaxElementType = SyntaxElementType("true")
    val FALSE_KEYWORD: SyntaxElementType = SyntaxElementType("false")
    val IS_KEYWORD: SyntaxElementType = SyntaxElementType("is")
    val IN_KEYWORD: SyntaxElementType = SyntaxElementType("in")
    val THROW_KEYWORD: SyntaxElementType = SyntaxElementType("throw")
    val RETURN_KEYWORD: SyntaxElementType = SyntaxElementType("return")
    val BREAK_KEYWORD: SyntaxElementType = SyntaxElementType("break")
    val CONTINUE_KEYWORD: SyntaxElementType = SyntaxElementType("continue")
    val OBJECT_KEYWORD: SyntaxElementType = SyntaxElementType("object")
    val IF_KEYWORD: SyntaxElementType = SyntaxElementType("if")
    val TRY_KEYWORD: SyntaxElementType = SyntaxElementType("try")
    val ELSE_KEYWORD: SyntaxElementType = SyntaxElementType("else")
    val WHILE_KEYWORD: SyntaxElementType = SyntaxElementType("while")
    val DO_KEYWORD: SyntaxElementType = SyntaxElementType("do")
    val WHEN_KEYWORD: SyntaxElementType = SyntaxElementType("when")
    val INTERFACE_KEYWORD: SyntaxElementType = SyntaxElementType("interface")

    // Reserved for future use:
    val TYPEOF_KEYWORD: SyntaxElementType = SyntaxElementType("typeof")

    val `AS_SAFE`: SyntaxElementType = SyntaxElementType("AS_SAFE")

    val IDENTIFIER: SyntaxElementType = SyntaxElementType("IDENTIFIER")

    val FIELD_IDENTIFIER: SyntaxElementType = SyntaxElementType("FIELD_IDENTIFIER")
    val LBRACKET: SyntaxElementType = SyntaxElementType("LBRACKET")
    val RBRACKET: SyntaxElementType = SyntaxElementType("RBRACKET")
    val LBRACE: SyntaxElementType = SyntaxElementType("LBRACE")
    val RBRACE: SyntaxElementType = SyntaxElementType("RBRACE")
    val LPAR: SyntaxElementType = SyntaxElementType("LPAR")
    val RPAR: SyntaxElementType = SyntaxElementType("RPAR")
    val DOT: SyntaxElementType = SyntaxElementType("DOT")
    val PLUSPLUS: SyntaxElementType = SyntaxElementType("PLUSPLUS")
    val MINUSMINUS: SyntaxElementType = SyntaxElementType("MINUSMINUS")
    val MUL: SyntaxElementType = SyntaxElementType("MUL")
    val PLUS: SyntaxElementType = SyntaxElementType("PLUS")
    val MINUS: SyntaxElementType = SyntaxElementType("MINUS")
    val EXCL: SyntaxElementType = SyntaxElementType("EXCL")
    val DIV: SyntaxElementType = SyntaxElementType("DIV")
    val PERC: SyntaxElementType = SyntaxElementType("PERC")
    val LT: SyntaxElementType = SyntaxElementType("LT")
    val GT: SyntaxElementType = SyntaxElementType("GT")
    val LTEQ: SyntaxElementType = SyntaxElementType("LTEQ")
    val GTEQ: SyntaxElementType = SyntaxElementType("GTEQ")
    val EQEQEQ: SyntaxElementType = SyntaxElementType("EQEQEQ")
    val ARROW: SyntaxElementType = SyntaxElementType("ARROW")
    val DOUBLE_ARROW: SyntaxElementType = SyntaxElementType("DOUBLE_ARROW")
    val EXCLEQEQEQ: SyntaxElementType = SyntaxElementType("EXCLEQEQEQ")
    val EQEQ: SyntaxElementType = SyntaxElementType("EQEQ")
    val EXCLEQ: SyntaxElementType = SyntaxElementType("EXCLEQ")
    val EXCLEXCL: SyntaxElementType = SyntaxElementType("EXCLEXCL")
    val ANDAND: SyntaxElementType = SyntaxElementType("ANDAND")
    val AND: SyntaxElementType = SyntaxElementType("AND")
    val OROR: SyntaxElementType = SyntaxElementType("OROR")
    val SAFE_ACCESS: SyntaxElementType = SyntaxElementType("SAFE_ACCESS")
    val ELVIS: SyntaxElementType = SyntaxElementType("ELVIS")
    val QUEST: SyntaxElementType = SyntaxElementType("QUEST")
    val COLONCOLON: SyntaxElementType = SyntaxElementType("COLONCOLON")
    val COLON: SyntaxElementType = SyntaxElementType("COLON")
    val SEMICOLON: SyntaxElementType = SyntaxElementType("SEMICOLON")
    val DOUBLE_SEMICOLON: SyntaxElementType = SyntaxElementType("DOUBLE_SEMICOLON")
    val RANGE: SyntaxElementType = SyntaxElementType("RANGE")
    val RANGE_UNTIL: SyntaxElementType = SyntaxElementType("RANGE_UNTIL")
    val EQ: SyntaxElementType = SyntaxElementType("EQ")
    val MULTEQ: SyntaxElementType = SyntaxElementType("MULTEQ")
    val DIVEQ: SyntaxElementType = SyntaxElementType("DIVEQ")
    val PERCEQ: SyntaxElementType = SyntaxElementType("PERCEQ")
    val PLUSEQ: SyntaxElementType = SyntaxElementType("PLUSEQ")
    val MINUSEQ: SyntaxElementType = SyntaxElementType("MINUSEQ")
    val NOT_IN: SyntaxElementType = SyntaxElementType("NOT_IN")
    val NOT_IS: SyntaxElementType = SyntaxElementType("NOT_IS")
    val HASH: SyntaxElementType = SyntaxElementType("HASH")
    val AT: SyntaxElementType = SyntaxElementType("AT")

    val COMMA: SyntaxElementType = SyntaxElementType("COMMA")

    val EOL_OR_SEMICOLON: SyntaxElementType = SyntaxElementType("EOL_OR_SEMICOLON")
    val ALL_KEYWORD: SyntaxElementType = SyntaxElementType("all")
    val FILE_KEYWORD: SyntaxElementType = SyntaxElementType("file")
    val FIELD_KEYWORD: SyntaxElementType = SyntaxElementType("field")
    val PROPERTY_KEYWORD: SyntaxElementType = SyntaxElementType("property")
    val RECEIVER_KEYWORD: SyntaxElementType = SyntaxElementType("receiver")
    val PARAM_KEYWORD: SyntaxElementType = SyntaxElementType("param")
    val SETPARAM_KEYWORD: SyntaxElementType = SyntaxElementType("setparam")
    val DELEGATE_KEYWORD: SyntaxElementType = SyntaxElementType("delegate")
    val IMPORT_KEYWORD: SyntaxElementType = SyntaxElementType("import")
    val WHERE_KEYWORD: SyntaxElementType = SyntaxElementType("where")
    val BY_KEYWORD: SyntaxElementType = SyntaxElementType("by")
    val GET_KEYWORD: SyntaxElementType = SyntaxElementType("get")
    val SET_KEYWORD: SyntaxElementType = SyntaxElementType("set")
    val CONSTRUCTOR_KEYWORD: SyntaxElementType = SyntaxElementType("constructor")
    val INIT_KEYWORD: SyntaxElementType = SyntaxElementType("init")
    val CONTEXT_KEYWORD: SyntaxElementType = SyntaxElementType("context")

    val ABSTRACT_KEYWORD: SyntaxElementType = SyntaxElementType("abstract")
    val ENUM_KEYWORD: SyntaxElementType = SyntaxElementType("enum",)
    val CONTRACT_KEYWORD: SyntaxElementType = SyntaxElementType("contract")
    val OPEN_KEYWORD: SyntaxElementType = SyntaxElementType("open")
    val INNER_KEYWORD: SyntaxElementType = SyntaxElementType("inner")
    val OVERRIDE_KEYWORD: SyntaxElementType = SyntaxElementType("override")
    val PRIVATE_KEYWORD: SyntaxElementType = SyntaxElementType("private")
    val PUBLIC_KEYWORD: SyntaxElementType = SyntaxElementType("public")
    val INTERNAL_KEYWORD: SyntaxElementType = SyntaxElementType("internal")
    val PROTECTED_KEYWORD: SyntaxElementType = SyntaxElementType("protected")
    val CATCH_KEYWORD: SyntaxElementType = SyntaxElementType("catch")
    val OUT_KEYWORD: SyntaxElementType = SyntaxElementType("out")
    val VARARG_KEYWORD: SyntaxElementType = SyntaxElementType("vararg")
    val REIFIED_KEYWORD: SyntaxElementType = SyntaxElementType("reified")
    val DYNAMIC_KEYWORD: SyntaxElementType = SyntaxElementType("dynamic")
    val COMPANION_KEYWORD: SyntaxElementType = SyntaxElementType("companion")
    val SEALED_KEYWORD: SyntaxElementType = SyntaxElementType("sealed")

    val FINALLY_KEYWORD: SyntaxElementType = SyntaxElementType("finally")
    val FINAL_KEYWORD: SyntaxElementType =  SyntaxElementType("final")

    val LATEINIT_KEYWORD: SyntaxElementType = SyntaxElementType("lateinit")

    val DATA_KEYWORD: SyntaxElementType = SyntaxElementType("data")
    val VALUE_KEYWORD: SyntaxElementType = SyntaxElementType("value")
    val INLINE_KEYWORD: SyntaxElementType = SyntaxElementType("inline")
    val NOINLINE_KEYWORD: SyntaxElementType = SyntaxElementType("noinline")
    val TAILREC_KEYWORD: SyntaxElementType = SyntaxElementType("tailrec")
    val EXTERNAL_KEYWORD: SyntaxElementType = SyntaxElementType("external")
    val ANNOTATION_KEYWORD: SyntaxElementType = SyntaxElementType("annotation")
    val CROSSINLINE_KEYWORD: SyntaxElementType = SyntaxElementType("crossinline")
    val OPERATOR_KEYWORD: SyntaxElementType = SyntaxElementType("operator")
    val INFIX_KEYWORD: SyntaxElementType = SyntaxElementType("infix")

    val CONST_KEYWORD: SyntaxElementType = SyntaxElementType("const")

    val SUSPEND_KEYWORD: SyntaxElementType = SyntaxElementType("suspend")

    val EXPECT_KEYWORD: SyntaxElementType = SyntaxElementType("expect")
    val ACTUAL_KEYWORD: SyntaxElementType = SyntaxElementType("actual")
}
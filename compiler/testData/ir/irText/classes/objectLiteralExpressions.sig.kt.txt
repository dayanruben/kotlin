// CHECK:
//   Mangled name: {}test1
//   Public signature: /test1|6005685442305498193[0]
//   Public signature debug description: {}test1
val test1: Any
  field
    // CHECK JVM_IR:
    //   Mangled name (compatible mode: false): {}test1.<no name provided>
    //   Mangled name (compatible mode: true):  test1.<no name provided>
    //   Mangled name for the signature (compatible mode: false): {}test1
    //   Mangled name for the signature (compatible mode: true):
    // CHECK JS_IR NATIVE:
    //   Mangled name (compatible mode: false): {}test1.<no name provided>
    //   Mangled name (compatible mode: true):  test1.<no name provided>
    //   Mangled name for the signature (compatible mode: false): {}test1
    //   Mangled name for the signature (compatible mode: true):
    local class <no name provided> {
      // CHECK:
      //   Mangled name (compatible mode: false): {}test1.<no name provided>#<init>(){}
      //   Mangled name (compatible mode: true):  test1.<no name provided>#<init>(){}
      //   Mangled name for the signature (compatible mode: false): {}test1<init>(){}
      //   Mangled name for the signature (compatible mode: true):  <init>(){}
      constructor() /* primary */

    }

  // CHECK JVM_IR:
  //   Mangled name: #<get-test1>(){}kotlin.Any
  //   Public signature: /test1.<get-test1>|-6000098324399857556[0]
  //   Public signature debug description: <get-test1>(){}kotlin.Any
  // CHECK JS_IR NATIVE:
  //   Mangled name: #<get-test1>(){}
  //   Public signature: /test1.<get-test1>|-5735092642142423279[0]
  //   Public signature debug description: <get-test1>(){}
  get

// CHECK:
//   Mangled name: {}test2
//   Public signature: /test2|2517758057000911509[0]
//   Public signature debug description: {}test2
val test2: IFoo
  field
    // CHECK JVM_IR:
    //   Mangled name (compatible mode: false): {}test2.<no name provided>
    //   Mangled name (compatible mode: true):  test2.<no name provided>
    //   Mangled name for the signature (compatible mode: false): {}test2
    //   Mangled name for the signature (compatible mode: true):
    // CHECK JS_IR NATIVE:
    //   Mangled name (compatible mode: false): {}test2.<no name provided>
    //   Mangled name (compatible mode: true):  test2.<no name provided>
    //   Mangled name for the signature (compatible mode: false): {}test2
    //   Mangled name for the signature (compatible mode: true):
    local class <no name provided> : IFoo {
      // CHECK:
      //   Mangled name (compatible mode: false): {}test2.<no name provided>#<init>(){}
      //   Mangled name (compatible mode: true):  test2.<no name provided>#<init>(){}
      //   Mangled name for the signature (compatible mode: false): {}test2<init>(){}
      //   Mangled name for the signature (compatible mode: true):  <init>(){}
      constructor() /* primary */

      // CHECK:
      //   Mangled name (compatible mode: false): {}test2.<no name provided>#foo(){}
      //   Mangled name (compatible mode: true):  test2.<no name provided>#foo(){}
      //   Mangled name for the signature (compatible mode: false): {}test2foo(){}
      //   Mangled name for the signature (compatible mode: true):  foo(){}
      override fun foo(): Unit

    }

  // CHECK JVM_IR:
  //   Mangled name: #<get-test2>(){}IFoo
  //   Public signature: /test2.<get-test2>|8558399082919905120[0]
  //   Public signature debug description: <get-test2>(){}IFoo
  // CHECK JS_IR NATIVE:
  //   Mangled name: #<get-test2>(){}
  //   Public signature: /test2.<get-test2>|-5218942532816206869[0]
  //   Public signature debug description: <get-test2>(){}
  get

// CHECK:
//   Mangled name: Outer
//   Public signature: /Outer|null[0]
class Outer {
  // CHECK:
  //   Mangled name: Outer.Inner
  //   Public signature: /Outer.Inner|null[0]
  abstract inner class Inner : IFoo {
    // CHECK:
    //   Mangled name: Outer.Inner#<init>(){}
    //   Public signature: /Outer.Inner.<init>|-5645683436151566731[0]
    //   Public signature debug description: <init>(){}
    constructor() /* primary */

    // CHECK:
    //   Mangled name: Outer.Inner#foo(){}
    //   Public signature: /Outer.Inner.foo|-1041209573719867811[0]
    //   Public signature debug description: foo(){}
    abstract /* fake */ override fun foo(): Unit

  }

  // CHECK:
  //   Mangled name: Outer#<init>(){}
  //   Public signature: /Outer.<init>|-5645683436151566731[0]
  //   Public signature debug description: <init>(){}
  constructor() /* primary */

  // CHECK JVM_IR:
  //   Mangled name: Outer#test3(){}Outer.Inner
  //   Public signature: /Outer.test3|6083507929198720424[0]
  //   Public signature debug description: test3(){}Outer.Inner
  // CHECK JS_IR NATIVE:
  //   Mangled name: Outer#test3(){}
  //   Public signature: /Outer.test3|-3759735065270951803[0]
  //   Public signature debug description: test3(){}
  fun test3(): Inner
    // CHECK JVM_IR:
    //   Mangled name: Outer#test3(){}Outer.Inner.<no name provided>
    //   Mangled name for the signature: test3(){}Outer.Inner
    // CHECK JS_IR NATIVE:
    //   Mangled name: Outer#test3(){}.<no name provided>
    //   Mangled name for the signature: test3(){}
    local class <no name provided> : Inner {
      // CHECK JVM_IR:
      //   Mangled name: Outer#test3(){}Outer.Inner.<no name provided>#<init>(){}
      //   Mangled name for the signature: test3(){}Outer.Inner<init>(){}
      // CHECK JS_IR NATIVE:
      //   Mangled name: Outer#test3(){}.<no name provided>#<init>(){}
      //   Mangled name for the signature: test3(){}<init>(){}
      constructor() /* primary */

      // CHECK JVM_IR:
      //   Mangled name: Outer#test3(){}Outer.Inner.<no name provided>#foo(){}
      //   Mangled name for the signature: test3(){}Outer.Innerfoo(){}
      // CHECK JS_IR NATIVE:
      //   Mangled name: Outer#test3(){}.<no name provided>#foo(){}
      //   Mangled name for the signature: test3(){}foo(){}
      override fun foo(): Unit

    }

}

// CHECK:
//   Mangled name: IFoo
//   Public signature: /IFoo|null[0]
interface IFoo {

  // CHECK:
  //   Mangled name: IFoo#foo(){}
  //   Public signature: /IFoo.foo|-1041209573719867811[0]
  //   Public signature debug description: foo(){}
  abstract fun foo(): Unit

}

// CHECK JVM_IR:
//   Mangled name: #test4@Outer(){}Outer.Inner
//   Public signature: /test4|-5948342138475838209[0]
//   Public signature debug description: test4@Outer(){}Outer.Inner
// CHECK JS_IR NATIVE:
//   Mangled name: #test4@Outer(){}
//   Public signature: /test4|5715080467126173402[0]
//   Public signature debug description: test4@Outer(){}
fun Outer.test4(): Inner
  // CHECK JVM_IR:
  //   Mangled name: #test4@Outer(){}Outer.Inner.<no name provided>
  //   Mangled name for the signature: test4@Outer(){}Outer.Inner
  // CHECK JS_IR NATIVE:
  //   Mangled name: #test4@Outer(){}.<no name provided>
  //   Mangled name for the signature: test4@Outer(){}
  local class <no name provided> : Inner {
    // CHECK JVM_IR:
    //   Mangled name: #test4@Outer(){}Outer.Inner.<no name provided>#<init>(){}
    //   Mangled name for the signature: test4@Outer(){}Outer.Inner<init>(){}
    // CHECK JS_IR NATIVE:
    //   Mangled name: #test4@Outer(){}.<no name provided>#<init>(){}
    //   Mangled name for the signature: test4@Outer(){}<init>(){}
    constructor() /* primary */

    // CHECK JVM_IR:
    //   Mangled name: #test4@Outer(){}Outer.Inner.<no name provided>#foo(){}
    //   Mangled name for the signature: test4@Outer(){}Outer.Innerfoo(){}
    // CHECK JS_IR NATIVE:
    //   Mangled name: #test4@Outer(){}.<no name provided>#foo(){}
    //   Mangled name for the signature: test4@Outer(){}foo(){}
    override fun foo(): Unit

  }


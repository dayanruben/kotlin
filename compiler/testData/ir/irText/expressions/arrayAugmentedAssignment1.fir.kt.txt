fun foo(): IntArray {
  return intArrayOf(elements = [1, 2, 3])
}

fun bar(): Int {
  return 42
}

class C {
  constructor(x: IntArray) /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

  val x: IntArray
    field = x
    get

}

fun testVariable() {
  var x: IntArray = foo()
  { // BLOCK
    val tmp_0: IntArray = x
    val tmp_1: Int = 0
    tmp_0.set(index = tmp_1, value = tmp_0.get(index = tmp_1).plus(other = 1))
  }
}

fun testCall() {
  { // BLOCK
    val tmp_2: IntArray = foo()
    val tmp_3: Int = bar()
    tmp_2.set(index = tmp_3, value = tmp_2.get(index = tmp_3).times(other = 2))
  }
}

fun testMember(c: C) {
  val tmp_4: IntArray = c.<get-x>()
  val tmp_5: Int = 0
  val tmp_6: Int = tmp_4.get(index = tmp_5)
  tmp_4.set(index = tmp_5, value = tmp_6.inc())
  tmp_6 /*~> Unit */
}

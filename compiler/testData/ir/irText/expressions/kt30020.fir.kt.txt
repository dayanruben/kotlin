interface X {
  abstract val xs: MutableList<Any>
    abstract get

  abstract fun f(): MutableList<Any>

}

fun test(x: X, nx: X?) {
  x.<get-xs>().plusAssign<Int>(element = 1)
  x.f().plusAssign<Int>(element = 2)
  x.<get-xs>() as MutableList<Int>.plusAssign<Int>(element = 3)
  x.f() as MutableList<Int>.plusAssign<Int>(element = 4)
  CHECK_NOT_NULL<MutableList<Any>>(arg0 = { // BLOCK
    val tmp_0: X? = nx
    when {
      EQEQ(arg0 = tmp_0, arg1 = null) -> null
      else -> tmp_0.<get-xs>()
    }
  }).plusAssign<Int>(element = 5)
  CHECK_NOT_NULL<MutableList<Any>>(arg0 = { // BLOCK
    val tmp_1: X? = nx
    when {
      EQEQ(arg0 = tmp_1, arg1 = null) -> null
      else -> tmp_1.f()
    }
  }).plusAssign<Int>(element = 6)
}

fun MutableList<Any>.testExtensionReceiver() {
  <this>.plusAssign<Int>(element = 100)
}

abstract class AML : MutableList<Int> {
  constructor() /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

  fun testExplicitThis() {
    <this>.plusAssign<Int>(element = 200)
  }

  inner class Inner {
    constructor() /* primary */ {
      super/*Any*/()
      /* <init>() */

    }

    fun testOuterThis() {
      <this>.plusAssign<Int>(element = 300)
    }

  }

}

/*
 * Copyright 2010-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license
 * that can be found in the LICENSE file.
 */


import org.codehaus.groovy.runtime.IOGroovyMethods
import org.jetbrains.kotlin.*
import org.jetbrains.kotlin.gradle.plugin.tasks.KonanCompileNativeBinary
import org.jetbrains.kotlin.konan.target.Architecture
import org.jetbrains.kotlin.konan.target.Family

buildscript {
    repositories {
        mavenCentral()

        maven {
            url project.bootstrapKotlinRepo
        }
    }
}

void loadLocalProperties() {
    if (new File("$project.rootDir/local.properties").exists()) {
        Properties props = new Properties()
        props.load(new FileInputStream("$project.rootDir/local.properties"))
        props.each { prop -> project.ext.set(prop.key, prop.value) }
    }
}

void loadCommandLineProperties() {
    if (project.hasProperty("konanc_flags")) {
        throw new Error("Specify either -Ptest_flags or -Pbuild_flags.")
    }

    ext.globalBuildArgs = new ArrayList<String>()
    if (project.hasProperty("build_flags")) {
        for (String flag : ext.build_flags.toString().split("\\s")) {
            flag = flag.trim()
            if (!flag.isEmpty()) ext.globalBuildArgs.add(flag)
        }
    }

    ext.globalTestArgs = new ArrayList<String>()
    ext.globalTestArgs.add("-Xpartial-linkage=enable")
    ext.globalTestArgs.add("-Xpartial-linkage-loglevel=error")
    if (project.hasProperty("test_flags")) {
        for (String flag : ext.test_flags.toString().split("\\s")) {
            flag = flag.trim()
            if (!flag.isEmpty()) ext.globalTestArgs.add(flag)
        }
    }

    ext.testTarget = project.hasProperty("test_target") ? ext.test_target : PlatformInfo.hostName
}

loadCommandLineProperties()
loadLocalProperties()

apply plugin: 'platform-manager'
apply plugin: 'konan'
apply plugin: 'kotlin'
apply plugin: 'kotlin.native.build-tools-conventions'
apply plugin: 'native-dependencies'

configurations {
    update_tests

    nopPluginApi
    api.extendsFrom nopPluginApi
}

ext.testOutputRoot = rootProject.file("test.output").absolutePath

ext.platformManager = project.extensions.platformManager
ext.target = platformManager.targetManager(project.testTarget).target

ext.buildNumber = rootProject.property("kotlinVersion")

// Add executor to run tests depending on a target
// NOTE: If this persists in a gradle daemon, environment update (e.g. an Xcode update) may lead to execution failures.
project.extensions.executor = ExecutorServiceKt.create(project)

ext.useCustomDist = UtilsKt.getUseCustomDist(project)
ext.kotlinNativeDist = UtilsKt.getKotlinNativeDist(project)
if (!useCustomDist) {
    ext.setProperty("kotlin.native.home", kotlinNativeDist.absolutePath)
    ext.setProperty("org.jetbrains.kotlin.native.home", kotlinNativeDist.absolutePath)
    ext.setProperty("konan.home", kotlinNativeDist.absolutePath)
}

compileTestKotlin {
    compilerOptions.freeCompilerArgs.add("-Xskip-prerelease-check")
}

// Do not generate run tasks for konan built artifacts
ext.konanNoRun = true

final CacheTesting cacheTesting = CacheTestingKt.configureCacheTesting(project)
if (cacheTesting != null) {
    // Check for debug build and set the -g option.
    if (project.globalTestArgs.contains("-opt")) {
        throw new IllegalArgumentException("Cache testing should be run with debug build. " +
                "Remove -opt options from the test args")
    }
    if (!project.globalTestArgs.contains("-g")) {
        project.globalTestArgs.add("-g")
    }

    // Note: can't do this in [CacheTesting.configure] since task classes aren't accessible there.
    tasks.withType(KonanCompileNativeBinary.class).configureEach {
        dependsOn cacheTesting.buildCacheTask
        extraOpts cacheTesting.compilerArgs
    }
}

// Enable two-stage test compilation if the test_two_stage property is set.
ext.twoStageEnabled = project.hasProperty("test_two_stage")

tasks.withType(KonanCompileNativeBinary.class).configureEach {
    enableTwoStageCompilation = twoStageEnabled
}

ext.isNoopGC = project.globalTestArgs.contains("-Xbinary=gc=noop") || project.globalTestArgs.contains("-Xgc=noop")
ext.isSTWMSGC = project.globalTestArgs.contains("-Xbinary=gc=stwms") || project.globalTestArgs.contains("-Xgc=stms")
ext.isAggressiveGC = project.globalTestArgs.contains("-Xbinary=gcSchedulerType=aggressive")
ext.isWithStateChecker = project.globalTestArgs.contains("-Xbinary=checkStateAtExternalCalls=true") || project.globalTestArgs.contains("-Xcheck-state-at-external-calls")
ext.runtimeAssertionsPanic = false

// TODO: It also makes sense to test -g without asserts, and also to test -opt with asserts.
if (project.globalTestArgs.contains("-g") && (cacheTesting == null)) {
    tasks.withType(KonanCompileNativeBinary.class).configureEach {
        extraOpts "-Xbinary=runtimeAssertionsMode=panic"
    }
    ext.runtimeAssertionsPanic = true
}

tasks.withType(KonanCompileNativeBinary).configureEach {
    extraOpts "-XXLanguage:+ImplicitSignedToUnsignedIntegerConversion"
    extraOpts "-opt-in=kotlinx.cinterop.ExperimentalForeignApi"
}

allprojects {
    // Root directories for test output (logs, compiled files, statistics etc). Only single path must be in each set.
    // backend.native/tests
    ext.testOutputLocal = rootProject.file("$testOutputRoot/local")

    // backend.native/tests/external
    ext.testOutputExternal = rootProject.file("$testOutputRoot/external")

    // backend.native/tests/framework
    ext.testOutputFramework = rootProject.file("$testOutputRoot/framework")
}
testOutputExternal.mkdirs()

void konanc(String[] args) {
    String kotlincNative = PlatformInfo.isWindows() ? "kotlinc-native.bat" : "kotlinc-native"
    String allArgs = args.join(" ")
    String commandWithArguments = "$kotlinNativeDist/bin/$kotlincNative $allArgs"

    println(commandWithArguments)

    Process process = commandWithArguments.execute()
    int exitCode = process.waitFor()

    if (exitCode != 0) {
        String stdOut = IOGroovyMethods.getText(process.inputStream)
        String stdErr = IOGroovyMethods.getText(process.errorStream)

        StringBuilder builder = new StringBuilder()
        builder.append("Error during execution of the command: $commandWithArguments\n")
        builder.append("exitCode = $exitCode\n")
        builder.append("=== STDOUT: BEGIN ===\n")
        if (!stdOut.isEmpty()) {
            builder.append(stdOut)
            if (!stdOut.endsWith("\n")) builder.append("\n")
        }
        builder.append("=== STDOUT: END ===\n")
        builder.append("=== STDERR: BEGIN ===\n")
        if (!stdErr.isEmpty()) {
            builder.append(stdErr)
            if (!stdErr.endsWith("\n")) builder.append("\n")
        }
        builder.append("=== STDERR: END ===\n")

        throw new GradleException(builder.toString())
    }
}

tasks.named("clean", Delete.class) {
    delete(testOutputRoot)
}

tasks.named("run") {
    dependsOn(tasks.withType(KonanTest).matching { it.enabled })
    // Add regular gradle test tasks
    dependsOn(tasks.withType(Test).matching { it.enabled })
}

// Was a subset of tests.
tasks.register("sanity") {
    dependsOn("run")
}

boolean isExcluded(String dir) {
    // List of tests that fail due to unresolved compiler bugs
    def excluded = [ ]

    boolean result = false
    excluded.forEach {
        if (dir.endsWith(it.replace("/", File.separator))) {
            result = true
        }
    }
    return result
}

/**
 * Creates a task for a standalone test. Configures runner and adds building task.
 */
Task standaloneTest(String name, Closure configureClosure) {
    return KotlinNativeTestKt.createTest(project, name, KonanStandaloneTest) { task ->
        task.configure(configureClosure)
        if (task.enabled) {
            konanArtifacts {
                program(name, targets: [target.name]) {
                    baseDir   "$testOutputLocal/$name"
                    srcFiles  task.getSources()
                    extraOpts task.flags
                    extraOpts project.globalTestArgs
                }
            }
        }
    }
}

/**
 * Creates a task for a dynamic test. Configures runner and adds library and test build tasks.
 */
Task dynamicTest(String name, Closure<KonanDynamicTest> configureClosure) {
    return KotlinNativeTestKt.createTest(project, name, KonanDynamicTest) { KonanDynamicTest task ->
        task.configure(configureClosure)
        if (task.enabled) {
            konanArtifacts {
                def targetName = target.name
                def lib = task.interop
                if (lib != null) {
                    UtilsKt.dependsOnKonanBuildingTask(task, lib, target)
                }
                dynamic(name, targets: [targetName]) {
                    if (lib != null) {
                        libraries {
                            artifact lib
                        }
                    }
                    srcFiles task.getSources()
                    baseDir  "$testOutputLocal/$name"
                    extraOpts task.flags
                    extraOpts project.globalTestArgs
                    if (targetName == "mingw_x64" || targetName == "mingw_x86") {
                        extraOpts "-linker-option", "-Wl,--out-implib,$testOutputLocal/$name/$targetName/${name}.dll.a"
                    }
                }
            }
            def buildTask = UtilsKt.findKonanBuildTask(project, name, target)
            UtilsKt.dependsOnDist(buildTask)
            task.dependsOn(nativeDependencies.llvmDependency)
            task.dependsOn(nativeDependencies.targetDependency(target))
        }
    }
}

standaloneTest("check_stacktrace_format_coresymbolication") {
    disabled = !PlatformInfo.supportsCoreSymbolication(project) || project.globalTestArgs.contains('-opt')
    flags = ['-g', '-Xbinary=sourceInfoType=coresymbolication']
    arguments = ['coresymbolication']
    source = "runtime/exceptions/check_stacktrace_format.kt"
}

standaloneTest("stack_trace_inline") {
    disabled = !PlatformInfo.supportsCoreSymbolication(project) || project.globalTestArgs.contains('-opt')
    flags = ['-g', '-Xg-generate-debug-trampoline=enable', '-Xbinary=sourceInfoType=coresymbolication']
    source = "runtime/exceptions/stack_trace_inline.kt"
    arguments = ['coresymbolication']
}

standaloneTest("kt-49240-stack-trace-completeness") {
    disabled = project.globalTestArgs.contains('-opt')
    source = "runtime/exceptions/kt-49240-stack-trace-completeness.kt"
}

standaloneTest("kt-37572") {
    disabled = !PlatformInfo.supportsCoreSymbolication(project) || project.globalTestArgs.contains('-opt')
    flags = ['-g', '-Xbinary=sourceInfoType=coresymbolication']
    arguments = ['coresymbolication']
    source = "runtime/exceptions/kt-37572.kt"
}

standaloneTest("check_stacktrace_format_libbacktrace") {
    disabled = !PlatformInfo.supportsLibBacktrace(project)|| project.globalTestArgs.contains('-opt')
    flags = ['-g', '-Xbinary=sourceInfoType=libbacktrace']
    arguments = ['libbacktrace']
    source = "runtime/exceptions/check_stacktrace_format.kt"
}

standaloneTest("stack_trace_inline_libbacktrace") {
    disabled = !PlatformInfo.supportsLibBacktrace(project) || project.globalTestArgs.contains('-opt')
    flags = ['-g', '-Xbinary=sourceInfoType=libbacktrace']
    arguments = ['libbacktrace']
    source = "runtime/exceptions/stack_trace_inline.kt"
}

standaloneTest("kt-37572-libbacktrace") {
    disabled = !PlatformInfo.supportsLibBacktrace(project) || project.globalTestArgs.contains('-opt')
    flags = ['-g', '-Xbinary=sourceInfoType=libbacktrace']
    arguments = ['libbacktrace']
    source = "runtime/exceptions/kt-37572.kt"
}

standaloneTest("except_constr_w_default") {
    disabled = !PlatformInfo.supportsLibBacktrace(project) || project.globalTestArgs.contains('-opt')
    flags = ['-g', '-Xbinary=sourceInfoType=libbacktrace']
    source = "runtime/exceptions/except_constr_w_default.kt"
}

standaloneTest("throw_from_except_constr") {
    disabled = !PlatformInfo.supportsLibBacktrace(project) || project.globalTestArgs.contains('-opt')
    flags = ['-g', '-Xbinary=sourceInfoType=libbacktrace']
    source = "runtime/exceptions/throw_from_except_constr.kt"
}

KotlinNativeTestKt.createTest(project, "kt39548", KonanStandaloneTest) { task ->
    // Test infrastructure doesn't support generated source;
    // workaround by specifying dummy source:
    task.source = "does/not/exist/kt39548.dummy.kt"
    task.enabled = PlatformInfo.isWindowsTarget(project)

    if (task.enabled) {
        def ktFile = project.layout.buildDirectory.file("kt39548/kt39548.kt").get().asFile
        konanArtifacts {
            program(name, targets: [target.name]) {
                baseDir   "$testOutputLocal/$name"
                srcFiles  ktFile.toString() // Generated by doBeforeBuild task.
                extraOpts task.flags
                extraOpts project.globalTestArgs
            }
        }
        doBeforeBuild {
            GenTestKT39548Kt.genTestKT39548(ktFile)
        }
    }
}

// A helper method to create interop artifacts
void createInterop(String name, Closure conf) {
    konanArtifacts {
        interop(name, targets: [target.name]) {
            dependsOn(nativeDependencies.llvmDependency)
            dependsOn(nativeDependencies.targetDependency(target))
            conf(it)
            noDefaultLibs(true)
            noEndorsedLibs(true)
            baseDir "$testOutputLocal/$name"
        }
    }
}

createInterop("sockets") {
    it.defFile 'interop/basics/sockets.def'
}

createInterop("kt43502") {
    it.defFile 'interop/kt43502/kt43502.def'
    it.headers "$projectDir/interop/kt43502/kt43502.h"
    // Note: also hardcoded in def file.
    final File libDir = project.layout.buildDirectory.dir("kt43502").get().asFile
    // Construct library that contains actual symbol definition.
    it.getByTarget(target.name).configure {
        doFirst {
            UtilsKt.buildStaticLibrary(
                    project,
                    [file("$projectDir/interop/kt43502/kt43502.c")],
                    file("$libDir/kt43502.a"),
                    file("$libDir/kt43502.objs"),
            )
        }
    }
}

standaloneTest("interop_objc_allocException") {
    disabled = !PlatformInfo.isAppleTarget(project)
    expectedExitStatus = 0
    source = "interop/objc/allocException.kt"
    UtilsKt.dependsOnPlatformLibs(it)
}

dynamicTest("interop_kt43502") {
    interop = "kt43502"
    source = "interop/kt43502/main.kt"
    cSource = "$projectDir/interop/kt43502/main.c"
    useGoldenData = true
}

if (PlatformInfo.isAppleTarget(project)) {
    standaloneTest("interop_objc_kt61441") {
        source = "interop/objc/kt61441.kt"
        UtilsKt.dependsOnPlatformLibs(it)
    }

    standaloneTest("objc_arc_contract") {
        def bcFile = project.layout.buildDirectory.file("objc_arc_contract.bc").get().asFile
        doBeforeBuild {
            mkdir(bcFile.parentFile)
            ExecLlvmKt.execLlvmUtility(project, "llvm-as") {
                args "$projectDir/interop/objc_arc_contract/main.ll"
                args "-o", bcFile.toString()
            }
        }
        source = "interop/objc_arc_contract/main.kt"
        useGoldenData = true
        flags = ["-native-library", bcFile.toString()]
    }
}

tasks.register("KT-50983", KonanDriverTest) {
    // The test is not working on Windows Server 2019-based TeamCity agents for the unknown reason.
    // TODO: Re-enable it after LLVM update where llvm-windres will be added.
    enabled = false
    def resFile = project.layout.buildDirectory.file("File.res").get().asFile
    doBeforeBuild {
        mkdir(resFile.parentFile)
        exec {
            commandLine UtilsKt.binaryFromToolchain(project, "windres")
            args "$projectDir/windows/KT-50983/File.rc", "-O", "coff", "-o", resFile.toString()
        }
    }
    source = "windows/KT-50983/main.kt"
    flags = ['-linker-option', resFile.toString()]
}

standaloneTest("kt51302") {
    enabled = project.target.name == PlatformInfo.hostName
    source = "serialization/KT-51302/main.kt"
    flags = ["-l", "$projectDir/serialization/KT-51302/kt51302_dependency"]
}

standaloneTest("split_compilation_pipeline") {
    // Test infrastructure does not support passing flags only to the second stage,
    // and we can't pass -Xcompile-from-bitcode when producing library. Thus, this test
    // does not support 2-stage compilation for now.
    // Also, it is failing for some reason on Windows CI, but since MinGW targets are not inteneded
    // to use this mode, we can disable it for these targets.
    enabled = !twoStageEnabled && project.target.name != "mingw_x64" && project.target.name != "mingw_x86"
    def dir = project.layout.buildDirectory.get().asFile.absolutePath
    source = "link/private_fake_overrides/override_main.kt"
    doBeforeBuild {
        konanc("$projectDir/link/private_fake_overrides/override_lib.kt -p library -target ${target.name} -o $dir/lib.klib")
        konanc("$projectDir/$source -target ${target.name} -o $dir/out.klib -l $dir/lib.klib " +
                "-Xtemporary-files-dir=$dir/tmp/split " +
                "-Xwrite-dependencies-to=${dir}/split_compilation_pipeline.deps")
    }
    flags = ["-Xread-dependencies-from=${dir}/split_compilation_pipeline.deps", "-Xcompile-from-bitcode=${dir}/tmp/split/out.bc"]
    useGoldenData = true
}

sourceSets {
    nopPlugin {
        kotlin {
            srcDir 'extensions/nop/src/main/kotlin'
        }
    }
}

compileNopPluginKotlin {
    compilerOptions.freeCompilerArgs.add('-Xskip-prerelease-check')
}

Task pluginTest(String name, String pluginName, Closure configureClosure) {
    def jarTask = project.tasks.register("jar-$pluginName", Jar) {
        it.dependsOn("compile${pluginName.capitalize()}Kotlin")
        from {
            sourceSets[pluginName].output
        }
        archiveBaseName = pluginName
        destinationDirectory = project.layout.buildDirectory.get().asFile
    }
    def taskName = "$name-with-$pluginName"
    return KotlinNativeTestKt.createTest(project, taskName, KonanStandaloneTest) { task ->
        task.configure(configureClosure)
        task.dependsOn(jarTask)
        if (task.enabled) {
            konanArtifacts {
                program(taskName, targets: [target.name]) {
                    baseDir   "$testOutputLocal/$taskName"
                    srcFiles  task.getSources()
                    extraOpts task.flags + "-Xplugin=${project.layout.buildDirectory.file("nop-plugin.jar").get().asFile}"
                    extraOpts project.globalTestArgs
                }
            }
        }
    }
}

pluginTest("runtime_basic_init", "nopPlugin") {
    source = "runtime/basic/runtime_basic_init.kt"
    flags = ["-tr"]
}

dependencies {
    nopPluginApi project(":native:kotlin-native-utils")
    nopPluginApi project(":core:descriptors")
    nopPluginApi project(":compiler:ir.tree")
    nopPluginApi project(":compiler:ir.backend.common")
    nopPluginApi project(":compiler:util")
    nopPluginApi project(":native:frontend.native")
    nopPluginApi project(":compiler:cli-common")
    nopPluginApi project(":compiler:cli-base")
    nopPluginApi project(":compiler:cli")
    nopPluginApi project(":kotlin-util-klib")
    nopPluginApi project(":kotlin-util-klib-metadata")
    nopPluginApi project(":compiler:ir.serialization.common")

    api project(':native:cli-native')
    api libs.junit4
}

project.afterEvaluate {
    // Don't treat any task as up-to-date, no matter what.
    // Note: this project should contain only test tasks, including ones that build binaries,
    // and ones that run binaries.
    // So the configuration below mostly means "tests aren't up-to-date".
    tasks.configureEach {
        outputs.upToDateWhen { false }
    }
}

/*
 * Copyright 2010-2023 JetBrains s.r.o. and Kotlin Programming Language contributors.
 * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin.konan.test.blackbox;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.util.KtTestUtil;
import org.jetbrains.kotlin.konan.test.blackbox.support.group.UseExtTestCaseGroupProvider;
import org.jetbrains.kotlin.test.TargetBackend;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.jupiter.api.Nested;
import org.junit.jupiter.api.Test;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link org.jetbrains.kotlin.generators.tests.GenerateNativeTestsKt}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("native/native.tests/testData/codegen")
@TestDataPath("$PROJECT_ROOT")
@UseExtTestCaseGroupProvider()
public class NativeCodegenLocalTestGenerated extends AbstractNativeCodegenBoxTest {
    @Test
    public void testAllFilesPresentInCodegen() throws Exception {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("native/native.tests/testData/codegen"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.NATIVE, true);
    }

    @Nested
    @TestMetadata("native/native.tests/testData/codegen/annotations")
    @TestDataPath("$PROJECT_ROOT")
    @UseExtTestCaseGroupProvider()
    public class Annotations {
        @Test
        public void testAllFilesPresentInAnnotations() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("native/native.tests/testData/codegen/annotations"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.NATIVE, true);
        }

        @Test
        @TestMetadata("annotations0.kt")
        public void testAnnotations0() throws Exception {
            runTest("native/native.tests/testData/codegen/annotations/annotations0.kt");
        }
    }

    @Nested
    @TestMetadata("native/native.tests/testData/codegen/arithmetic")
    @TestDataPath("$PROJECT_ROOT")
    @UseExtTestCaseGroupProvider()
    public class Arithmetic {
        @Test
        public void testAllFilesPresentInArithmetic() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("native/native.tests/testData/codegen/arithmetic"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.NATIVE, true);
        }

        @Test
        @TestMetadata("basic_charConversions.kt")
        public void testBasic_charConversions() throws Exception {
            runTest("native/native.tests/testData/codegen/arithmetic/basic_charConversions.kt");
        }

        @Test
        @TestMetadata("basic_charCornerCases.kt")
        public void testBasic_charCornerCases() throws Exception {
            runTest("native/native.tests/testData/codegen/arithmetic/basic_charCornerCases.kt");
        }

        @Test
        @TestMetadata("basic_compareIntToFloat.kt")
        public void testBasic_compareIntToFloat() throws Exception {
            runTest("native/native.tests/testData/codegen/arithmetic/basic_compareIntToFloat.kt");
        }

        @Test
        @TestMetadata("basic_doubleBasic.kt")
        public void testBasic_doubleBasic() throws Exception {
            runTest("native/native.tests/testData/codegen/arithmetic/basic_doubleBasic.kt");
        }

        @Test
        @TestMetadata("basic_integralToFloat.kt")
        public void testBasic_integralToFloat() throws Exception {
            runTest("native/native.tests/testData/codegen/arithmetic/basic_integralToFloat.kt");
        }

        @Test
        @TestMetadata("basic_kt37412.kt")
        public void testBasic_kt37412() throws Exception {
            runTest("native/native.tests/testData/codegen/arithmetic/basic_kt37412.kt");
        }

        @Test
        @TestMetadata("basic_selfComparison.kt")
        public void testBasic_selfComparison() throws Exception {
            runTest("native/native.tests/testData/codegen/arithmetic/basic_selfComparison.kt");
        }

        @Test
        @TestMetadata("basic_shifts.kt")
        public void testBasic_shifts() throws Exception {
            runTest("native/native.tests/testData/codegen/arithmetic/basic_shifts.kt");
        }

        @Test
        @TestMetadata("basic_uintTests.kt")
        public void testBasic_uintTests() throws Exception {
            runTest("native/native.tests/testData/codegen/arithmetic/basic_uintTests.kt");
        }

        @Test
        @TestMetadata("division.kt")
        public void testDivision() throws Exception {
            runTest("native/native.tests/testData/codegen/arithmetic/division.kt");
        }

        @Test
        @TestMetadata("github1856.kt")
        public void testGithub1856() throws Exception {
            runTest("native/native.tests/testData/codegen/arithmetic/github1856.kt");
        }
    }

    @Nested
    @TestMetadata("native/native.tests/testData/codegen/associatedObjects")
    @TestDataPath("$PROJECT_ROOT")
    @UseExtTestCaseGroupProvider()
    public class AssociatedObjects {
        @Test
        public void testAllFilesPresentInAssociatedObjects() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("native/native.tests/testData/codegen/associatedObjects"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.NATIVE, true);
        }

        @Test
        @TestMetadata("associatedObjects1_testBasics1.kt")
        public void testAssociatedObjects1_testBasics1() throws Exception {
            runTest("native/native.tests/testData/codegen/associatedObjects/associatedObjects1_testBasics1.kt");
        }

        @Test
        @TestMetadata("associatedObjects1_testGlobalOptimizations1.kt")
        public void testAssociatedObjects1_testGlobalOptimizations1() throws Exception {
            runTest("native/native.tests/testData/codegen/associatedObjects/associatedObjects1_testGlobalOptimizations1.kt");
        }

        @Test
        @TestMetadata("associatedObjects1_testGlobalOptimizations2.kt")
        public void testAssociatedObjects1_testGlobalOptimizations2() throws Exception {
            runTest("native/native.tests/testData/codegen/associatedObjects/associatedObjects1_testGlobalOptimizations2.kt");
        }
    }

    @Nested
    @TestMetadata("native/native.tests/testData/codegen/basics")
    @TestDataPath("$PROJECT_ROOT")
    @UseExtTestCaseGroupProvider()
    public class Basics {
        @Test
        public void testAllFilesPresentInBasics() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("native/native.tests/testData/codegen/basics"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.NATIVE, true);
        }

        @Test
        @TestMetadata("array_to_any.kt")
        public void testArray_to_any() throws Exception {
            runTest("native/native.tests/testData/codegen/basics/array_to_any.kt");
        }

        @Test
        @TestMetadata("canonical_name.kt")
        public void testCanonical_name() throws Exception {
            runTest("native/native.tests/testData/codegen/basics/canonical_name.kt");
        }

        @Test
        @TestMetadata("cast_null.kt")
        public void testCast_null() throws Exception {
            runTest("native/native.tests/testData/codegen/basics/cast_null.kt");
        }

        @Test
        @TestMetadata("cast_simple.kt")
        public void testCast_simple() throws Exception {
            runTest("native/native.tests/testData/codegen/basics/cast_simple.kt");
        }

        @Test
        @TestMetadata("check_type.kt")
        public void testCheck_type() throws Exception {
            runTest("native/native.tests/testData/codegen/basics/check_type.kt");
        }

        @Test
        @TestMetadata("companion.kt")
        public void testCompanion() throws Exception {
            runTest("native/native.tests/testData/codegen/basics/companion.kt");
        }

        @Test
        @TestMetadata("concatenation.kt")
        public void testConcatenation() throws Exception {
            runTest("native/native.tests/testData/codegen/basics/concatenation.kt");
        }

        @Test
        @TestMetadata("const_infinity.kt")
        public void testConst_infinity() throws Exception {
            runTest("native/native.tests/testData/codegen/basics/const_infinity.kt");
        }

        @Test
        @TestMetadata("expression_as_statement.kt")
        public void testExpression_as_statement() throws Exception {
            runTest("native/native.tests/testData/codegen/basics/expression_as_statement.kt");
        }

        @Test
        @TestMetadata("k42000_1.kt")
        public void testK42000_1() throws Exception {
            runTest("native/native.tests/testData/codegen/basics/k42000_1.kt");
        }

        @Test
        @TestMetadata("k42000_2.kt")
        public void testK42000_2() throws Exception {
            runTest("native/native.tests/testData/codegen/basics/k42000_2.kt");
        }

        @Test
        @TestMetadata("local_variable.kt")
        public void testLocal_variable() throws Exception {
            runTest("native/native.tests/testData/codegen/basics/local_variable.kt");
        }

        @Test
        @TestMetadata("null_check.kt")
        public void testNull_check() throws Exception {
            runTest("native/native.tests/testData/codegen/basics/null_check.kt");
        }

        @Test
        @TestMetadata("safe_cast.kt")
        public void testSafe_cast() throws Exception {
            runTest("native/native.tests/testData/codegen/basics/safe_cast.kt");
        }

        @Test
        @TestMetadata("spread_operator_0.kt")
        public void testSpread_operator_0() throws Exception {
            runTest("native/native.tests/testData/codegen/basics/spread_operator_0.kt");
        }

        @Test
        @TestMetadata("superFunCall.kt")
        public void testSuperFunCall() throws Exception {
            runTest("native/native.tests/testData/codegen/basics/superFunCall.kt");
        }

        @Test
        @TestMetadata("superGetterCall.kt")
        public void testSuperGetterCall() throws Exception {
            runTest("native/native.tests/testData/codegen/basics/superGetterCall.kt");
        }

        @Test
        @TestMetadata("superSetterCall.kt")
        public void testSuperSetterCall() throws Exception {
            runTest("native/native.tests/testData/codegen/basics/superSetterCall.kt");
        }

        @Test
        @TestMetadata("typealias1.kt")
        public void testTypealias1() throws Exception {
            runTest("native/native.tests/testData/codegen/basics/typealias1.kt");
        }

        @Test
        @TestMetadata("unchecked_cast1.kt")
        public void testUnchecked_cast1() throws Exception {
            runTest("native/native.tests/testData/codegen/basics/unchecked_cast1.kt");
        }

        @Test
        @TestMetadata("unchecked_cast2.kt")
        public void testUnchecked_cast2() throws Exception {
            runTest("native/native.tests/testData/codegen/basics/unchecked_cast2.kt");
        }

        @Test
        @TestMetadata("unchecked_cast3.kt")
        public void testUnchecked_cast3() throws Exception {
            runTest("native/native.tests/testData/codegen/basics/unchecked_cast3.kt");
        }

        @Test
        @TestMetadata("unchecked_cast4.kt")
        public void testUnchecked_cast4() throws Exception {
            runTest("native/native.tests/testData/codegen/basics/unchecked_cast4.kt");
        }

        @Test
        @TestMetadata("unit1.kt")
        public void testUnit1() throws Exception {
            runTest("native/native.tests/testData/codegen/basics/unit1.kt");
        }

        @Test
        @TestMetadata("unit2.kt")
        public void testUnit2() throws Exception {
            runTest("native/native.tests/testData/codegen/basics/unit2.kt");
        }

        @Test
        @TestMetadata("unit3.kt")
        public void testUnit3() throws Exception {
            runTest("native/native.tests/testData/codegen/basics/unit3.kt");
        }

        @Test
        @TestMetadata("unit4.kt")
        public void testUnit4() throws Exception {
            runTest("native/native.tests/testData/codegen/basics/unit4.kt");
        }
    }

    @Nested
    @TestMetadata("native/native.tests/testData/codegen/bce")
    @TestDataPath("$PROJECT_ROOT")
    @UseExtTestCaseGroupProvider()
    public class Bce {
        @Test
        public void testAllFilesPresentInBce() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("native/native.tests/testData/codegen/bce"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.NATIVE, true);
        }

        @Test
        @TestMetadata("bceCases.kt")
        public void testBceCases() throws Exception {
            runTest("native/native.tests/testData/codegen/bce/bceCases.kt");
        }

        @Test
        @TestMetadata("customGetter.kt")
        public void testCustomGetter() throws Exception {
            runTest("native/native.tests/testData/codegen/bce/customGetter.kt");
        }

        @Test
        @TestMetadata("delegatedProperty.kt")
        public void testDelegatedProperty() throws Exception {
            runTest("native/native.tests/testData/codegen/bce/delegatedProperty.kt");
        }

        @Test
        @TestMetadata("differentArrays.kt")
        public void testDifferentArrays() throws Exception {
            runTest("native/native.tests/testData/codegen/bce/differentArrays.kt");
        }

        @Test
        @TestMetadata("differentObjects.kt")
        public void testDifferentObjects() throws Exception {
            runTest("native/native.tests/testData/codegen/bce/differentObjects.kt");
        }

        @Test
        @TestMetadata("forDownToSize.kt")
        public void testForDownToSize() throws Exception {
            runTest("native/native.tests/testData/codegen/bce/forDownToSize.kt");
        }

        @Test
        @TestMetadata("forDownToWithStep.kt")
        public void testForDownToWithStep() throws Exception {
            runTest("native/native.tests/testData/codegen/bce/forDownToWithStep.kt");
        }

        @Test
        @TestMetadata("forEachIndexedTest.kt")
        public void testForEachIndexedTest() throws Exception {
            runTest("native/native.tests/testData/codegen/bce/forEachIndexedTest.kt");
        }

        @Test
        @TestMetadata("forEachIndicies.kt")
        public void testForEachIndicies() throws Exception {
            runTest("native/native.tests/testData/codegen/bce/forEachIndicies.kt");
        }

        @Test
        @TestMetadata("forIndiciesWithStep.kt")
        public void testForIndiciesWithStep() throws Exception {
            runTest("native/native.tests/testData/codegen/bce/forIndiciesWithStep.kt");
        }

        @Test
        @TestMetadata("forRangeToSize.kt")
        public void testForRangeToSize() throws Exception {
            runTest("native/native.tests/testData/codegen/bce/forRangeToSize.kt");
        }

        @Test
        @TestMetadata("forRangeToWithStep.kt")
        public void testForRangeToWithStep() throws Exception {
            runTest("native/native.tests/testData/codegen/bce/forRangeToWithStep.kt");
        }

        @Test
        @TestMetadata("forReversed.kt")
        public void testForReversed() throws Exception {
            runTest("native/native.tests/testData/codegen/bce/forReversed.kt");
        }

        @Test
        @TestMetadata("forUntilSize.kt")
        public void testForUntilSize() throws Exception {
            runTest("native/native.tests/testData/codegen/bce/forUntilSize.kt");
        }

        @Test
        @TestMetadata("forUntilWithStep.kt")
        public void testForUntilWithStep() throws Exception {
            runTest("native/native.tests/testData/codegen/bce/forUntilWithStep.kt");
        }

        @Test
        @TestMetadata("forWithIndex.kt")
        public void testForWithIndex() throws Exception {
            runTest("native/native.tests/testData/codegen/bce/forWithIndex.kt");
        }

        @Test
        @TestMetadata("inheritance.kt")
        public void testInheritance() throws Exception {
            runTest("native/native.tests/testData/codegen/bce/inheritance.kt");
        }

        @Test
        @TestMetadata("withGetter.kt")
        public void testWithGetter() throws Exception {
            runTest("native/native.tests/testData/codegen/bce/withGetter.kt");
        }
    }

    @Nested
    @TestMetadata("native/native.tests/testData/codegen/boxing")
    @TestDataPath("$PROJECT_ROOT")
    @UseExtTestCaseGroupProvider()
    public class Boxing {
        @Test
        public void testAllFilesPresentInBoxing() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("native/native.tests/testData/codegen/boxing"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.NATIVE, true);
        }

        @Test
        @TestMetadata("box_cache0.kt")
        public void testBox_cache0() throws Exception {
            runTest("native/native.tests/testData/codegen/boxing/box_cache0.kt");
        }

        @Test
        @TestMetadata("boxing0.kt")
        public void testBoxing0() throws Exception {
            runTest("native/native.tests/testData/codegen/boxing/boxing0.kt");
        }

        @Test
        @TestMetadata("boxing1.kt")
        public void testBoxing1() throws Exception {
            runTest("native/native.tests/testData/codegen/boxing/boxing1.kt");
        }

        @Test
        @TestMetadata("boxing10.kt")
        public void testBoxing10() throws Exception {
            runTest("native/native.tests/testData/codegen/boxing/boxing10.kt");
        }

        @Test
        @TestMetadata("boxing11.kt")
        public void testBoxing11() throws Exception {
            runTest("native/native.tests/testData/codegen/boxing/boxing11.kt");
        }

        @Test
        @TestMetadata("boxing12.kt")
        public void testBoxing12() throws Exception {
            runTest("native/native.tests/testData/codegen/boxing/boxing12.kt");
        }

        @Test
        @TestMetadata("boxing13.kt")
        public void testBoxing13() throws Exception {
            runTest("native/native.tests/testData/codegen/boxing/boxing13.kt");
        }

        @Test
        @TestMetadata("boxing14.kt")
        public void testBoxing14() throws Exception {
            runTest("native/native.tests/testData/codegen/boxing/boxing14.kt");
        }

        @Test
        @TestMetadata("boxing15.kt")
        public void testBoxing15() throws Exception {
            runTest("native/native.tests/testData/codegen/boxing/boxing15.kt");
        }

        @Test
        @TestMetadata("boxing2.kt")
        public void testBoxing2() throws Exception {
            runTest("native/native.tests/testData/codegen/boxing/boxing2.kt");
        }

        @Test
        @TestMetadata("boxing3.kt")
        public void testBoxing3() throws Exception {
            runTest("native/native.tests/testData/codegen/boxing/boxing3.kt");
        }

        @Test
        @TestMetadata("boxing4.kt")
        public void testBoxing4() throws Exception {
            runTest("native/native.tests/testData/codegen/boxing/boxing4.kt");
        }

        @Test
        @TestMetadata("boxing5.kt")
        public void testBoxing5() throws Exception {
            runTest("native/native.tests/testData/codegen/boxing/boxing5.kt");
        }

        @Test
        @TestMetadata("boxing6.kt")
        public void testBoxing6() throws Exception {
            runTest("native/native.tests/testData/codegen/boxing/boxing6.kt");
        }

        @Test
        @TestMetadata("boxing7.kt")
        public void testBoxing7() throws Exception {
            runTest("native/native.tests/testData/codegen/boxing/boxing7.kt");
        }

        @Test
        @TestMetadata("boxing8.kt")
        public void testBoxing8() throws Exception {
            runTest("native/native.tests/testData/codegen/boxing/boxing8.kt");
        }

        @Test
        @TestMetadata("boxing9.kt")
        public void testBoxing9() throws Exception {
            runTest("native/native.tests/testData/codegen/boxing/boxing9.kt");
        }

        @Test
        @TestMetadata("kt53100_casts.kt")
        public void testKt53100_casts() throws Exception {
            runTest("native/native.tests/testData/codegen/boxing/kt53100_casts.kt");
        }
    }

    @Nested
    @TestMetadata("native/native.tests/testData/codegen/branching")
    @TestDataPath("$PROJECT_ROOT")
    @UseExtTestCaseGroupProvider()
    public class Branching {
        @Test
        @TestMetadata("advanced_when2.kt")
        public void testAdvanced_when2() throws Exception {
            runTest("native/native.tests/testData/codegen/branching/advanced_when2.kt");
        }

        @Test
        @TestMetadata("advanced_when5.kt")
        public void testAdvanced_when5() throws Exception {
            runTest("native/native.tests/testData/codegen/branching/advanced_when5.kt");
        }

        @Test
        public void testAllFilesPresentInBranching() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("native/native.tests/testData/codegen/branching"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.NATIVE, true);
        }

        @Test
        @TestMetadata("if_else.kt")
        public void testIf_else() throws Exception {
            runTest("native/native.tests/testData/codegen/branching/if_else.kt");
        }

        @Test
        @TestMetadata("when2.kt")
        public void testWhen2() throws Exception {
            runTest("native/native.tests/testData/codegen/branching/when2.kt");
        }

        @Test
        @TestMetadata("when4.kt")
        public void testWhen4() throws Exception {
            runTest("native/native.tests/testData/codegen/branching/when4.kt");
        }

        @Test
        @TestMetadata("when5.kt")
        public void testWhen5() throws Exception {
            runTest("native/native.tests/testData/codegen/branching/when5.kt");
        }

        @Test
        @TestMetadata("when6.kt")
        public void testWhen6() throws Exception {
            runTest("native/native.tests/testData/codegen/branching/when6.kt");
        }

        @Test
        @TestMetadata("when7.kt")
        public void testWhen7() throws Exception {
            runTest("native/native.tests/testData/codegen/branching/when7.kt");
        }

        @Test
        @TestMetadata("when8.kt")
        public void testWhen8() throws Exception {
            runTest("native/native.tests/testData/codegen/branching/when8.kt");
        }

        @Test
        @TestMetadata("when9.kt")
        public void testWhen9() throws Exception {
            runTest("native/native.tests/testData/codegen/branching/when9.kt");
        }

        @Test
        @TestMetadata("when_through.kt")
        public void testWhen_through() throws Exception {
            runTest("native/native.tests/testData/codegen/branching/when_through.kt");
        }

        @Test
        @TestMetadata("when_with_try1.kt")
        public void testWhen_with_try1() throws Exception {
            runTest("native/native.tests/testData/codegen/branching/when_with_try1.kt");
        }
    }

    @Nested
    @TestMetadata("native/native.tests/testData/codegen/bridges")
    @TestDataPath("$PROJECT_ROOT")
    @UseExtTestCaseGroupProvider()
    public class Bridges {
        @Test
        public void testAllFilesPresentInBridges() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("native/native.tests/testData/codegen/bridges"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.NATIVE, true);
        }

        @Test
        @TestMetadata("nativePointed.kt")
        public void testNativePointed() throws Exception {
            runTest("native/native.tests/testData/codegen/bridges/nativePointed.kt");
        }

        @Test
        @TestMetadata("returnTypeSignature.kt")
        public void testReturnTypeSignature() throws Exception {
            runTest("native/native.tests/testData/codegen/bridges/returnTypeSignature.kt");
        }

        @Test
        @TestMetadata("special.kt")
        public void testSpecial() throws Exception {
            runTest("native/native.tests/testData/codegen/bridges/special.kt");
        }

        @Test
        @TestMetadata("specialGeneric.kt")
        public void testSpecialGeneric() throws Exception {
            runTest("native/native.tests/testData/codegen/bridges/specialGeneric.kt");
        }

        @Test
        @TestMetadata("test0.kt")
        public void testTest0() throws Exception {
            runTest("native/native.tests/testData/codegen/bridges/test0.kt");
        }

        @Test
        @TestMetadata("test1.kt")
        public void testTest1() throws Exception {
            runTest("native/native.tests/testData/codegen/bridges/test1.kt");
        }

        @Test
        @TestMetadata("test10.kt")
        public void testTest10() throws Exception {
            runTest("native/native.tests/testData/codegen/bridges/test10.kt");
        }

        @Test
        @TestMetadata("test11.kt")
        public void testTest11() throws Exception {
            runTest("native/native.tests/testData/codegen/bridges/test11.kt");
        }

        @Test
        @TestMetadata("test12.kt")
        public void testTest12() throws Exception {
            runTest("native/native.tests/testData/codegen/bridges/test12.kt");
        }

        @Test
        @TestMetadata("test13.kt")
        public void testTest13() throws Exception {
            runTest("native/native.tests/testData/codegen/bridges/test13.kt");
        }

        @Test
        @TestMetadata("test14.kt")
        public void testTest14() throws Exception {
            runTest("native/native.tests/testData/codegen/bridges/test14.kt");
        }

        @Test
        @TestMetadata("test15.kt")
        public void testTest15() throws Exception {
            runTest("native/native.tests/testData/codegen/bridges/test15.kt");
        }

        @Test
        @TestMetadata("test16.kt")
        public void testTest16() throws Exception {
            runTest("native/native.tests/testData/codegen/bridges/test16.kt");
        }

        @Test
        @TestMetadata("test17.kt")
        public void testTest17() throws Exception {
            runTest("native/native.tests/testData/codegen/bridges/test17.kt");
        }

        @Test
        @TestMetadata("test18.kt")
        public void testTest18() throws Exception {
            runTest("native/native.tests/testData/codegen/bridges/test18.kt");
        }

        @Test
        @TestMetadata("test2.kt")
        public void testTest2() throws Exception {
            runTest("native/native.tests/testData/codegen/bridges/test2.kt");
        }

        @Test
        @TestMetadata("test3.kt")
        public void testTest3() throws Exception {
            runTest("native/native.tests/testData/codegen/bridges/test3.kt");
        }

        @Test
        @TestMetadata("test4.kt")
        public void testTest4() throws Exception {
            runTest("native/native.tests/testData/codegen/bridges/test4.kt");
        }

        @Test
        @TestMetadata("test5.kt")
        public void testTest5() throws Exception {
            runTest("native/native.tests/testData/codegen/bridges/test5.kt");
        }

        @Test
        @TestMetadata("test6.kt")
        public void testTest6() throws Exception {
            runTest("native/native.tests/testData/codegen/bridges/test6.kt");
        }

        @Test
        @TestMetadata("test7.kt")
        public void testTest7() throws Exception {
            runTest("native/native.tests/testData/codegen/bridges/test7.kt");
        }

        @Test
        @TestMetadata("test8.kt")
        public void testTest8() throws Exception {
            runTest("native/native.tests/testData/codegen/bridges/test8.kt");
        }

        @Test
        @TestMetadata("test9.kt")
        public void testTest9() throws Exception {
            runTest("native/native.tests/testData/codegen/bridges/test9.kt");
        }
    }

    @Nested
    @TestMetadata("native/native.tests/testData/codegen/classDelegation")
    @TestDataPath("$PROJECT_ROOT")
    @UseExtTestCaseGroupProvider()
    public class ClassDelegation {
        @Test
        public void testAllFilesPresentInClassDelegation() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("native/native.tests/testData/codegen/classDelegation"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.NATIVE, true);
        }

        @Test
        @TestMetadata("generic.kt")
        public void testGeneric() throws Exception {
            runTest("native/native.tests/testData/codegen/classDelegation/generic.kt");
        }

        @Test
        @TestMetadata("method.kt")
        public void testMethod() throws Exception {
            runTest("native/native.tests/testData/codegen/classDelegation/method.kt");
        }

        @Test
        @TestMetadata("property.kt")
        public void testProperty() throws Exception {
            runTest("native/native.tests/testData/codegen/classDelegation/property.kt");
        }

        @Test
        @TestMetadata("withBridge.kt")
        public void testWithBridge() throws Exception {
            runTest("native/native.tests/testData/codegen/classDelegation/withBridge.kt");
        }
    }

    @Nested
    @TestMetadata("native/native.tests/testData/codegen/contracts")
    @TestDataPath("$PROJECT_ROOT")
    @UseExtTestCaseGroupProvider()
    public class Contracts {
        @Test
        public void testAllFilesPresentInContracts() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("native/native.tests/testData/codegen/contracts"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.NATIVE, true);
        }

        @Test
        @TestMetadata("contractForCast.kt")
        public void testContractForCast() throws Exception {
            runTest("native/native.tests/testData/codegen/contracts/contractForCast.kt");
        }

        @Test
        @TestMetadata("isNullString.kt")
        public void testIsNullString() throws Exception {
            runTest("native/native.tests/testData/codegen/contracts/isNullString.kt");
        }

        @Test
        @TestMetadata("nonNullSmartCast.kt")
        public void testNonNullSmartCast() throws Exception {
            runTest("native/native.tests/testData/codegen/contracts/nonNullSmartCast.kt");
        }

        @Test
        @TestMetadata("require.kt")
        public void testRequire() throws Exception {
            runTest("native/native.tests/testData/codegen/contracts/require.kt");
        }

        @Test
        @TestMetadata("runLambdaForVal.kt")
        public void testRunLambdaForVal() throws Exception {
            runTest("native/native.tests/testData/codegen/contracts/runLambdaForVal.kt");
        }
    }

    @Nested
    @TestMetadata("native/native.tests/testData/codegen/controlflow")
    @TestDataPath("$PROJECT_ROOT")
    @UseExtTestCaseGroupProvider()
    public class Controlflow {
        @Test
        public void testAllFilesPresentInControlflow() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("native/native.tests/testData/codegen/controlflow"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.NATIVE, true);
        }

        @Test
        @TestMetadata("break.kt")
        public void testBreak() throws Exception {
            runTest("native/native.tests/testData/codegen/controlflow/break.kt");
        }

        @Test
        @TestMetadata("break1.kt")
        public void testBreak1() throws Exception {
            runTest("native/native.tests/testData/codegen/controlflow/break1.kt");
        }

        @Test
        @TestMetadata("for_loops.kt")
        public void testFor_loops() throws Exception {
            runTest("native/native.tests/testData/codegen/controlflow/for_loops.kt");
        }

        @Test
        @TestMetadata("for_loops_array.kt")
        public void testFor_loops_array() throws Exception {
            runTest("native/native.tests/testData/codegen/controlflow/for_loops_array.kt");
        }

        @Test
        @TestMetadata("for_loops_array_break_continue.kt")
        public void testFor_loops_array_break_continue() throws Exception {
            runTest("native/native.tests/testData/codegen/controlflow/for_loops_array_break_continue.kt");
        }

        @Test
        @TestMetadata("for_loops_array_indices.kt")
        public void testFor_loops_array_indices() throws Exception {
            runTest("native/native.tests/testData/codegen/controlflow/for_loops_array_indices.kt");
        }

        @Test
        @TestMetadata("for_loops_array_mutation.kt")
        public void testFor_loops_array_mutation() throws Exception {
            runTest("native/native.tests/testData/codegen/controlflow/for_loops_array_mutation.kt");
        }

        @Test
        @TestMetadata("for_loops_array_nested.kt")
        public void testFor_loops_array_nested() throws Exception {
            runTest("native/native.tests/testData/codegen/controlflow/for_loops_array_nested.kt");
        }

        @Test
        @TestMetadata("for_loops_array_nullable.kt")
        public void testFor_loops_array_nullable() throws Exception {
            runTest("native/native.tests/testData/codegen/controlflow/for_loops_array_nullable.kt");
        }

        @Test
        @TestMetadata("for_loops_array_side_effects.kt")
        public void testFor_loops_array_side_effects() throws Exception {
            runTest("native/native.tests/testData/codegen/controlflow/for_loops_array_side_effects.kt");
        }

        @Test
        @TestMetadata("for_loops_call_order.kt")
        public void testFor_loops_call_order() throws Exception {
            runTest("native/native.tests/testData/codegen/controlflow/for_loops_call_order.kt");
        }

        @Test
        @TestMetadata("for_loops_coroutines.kt")
        public void testFor_loops_coroutines() throws Exception {
            runTest("native/native.tests/testData/codegen/controlflow/for_loops_coroutines.kt");
        }

        @Test
        @TestMetadata("for_loops_empty_range.kt")
        public void testFor_loops_empty_range() throws Exception {
            runTest("native/native.tests/testData/codegen/controlflow/for_loops_empty_range.kt");
        }

        @Test
        @TestMetadata("for_loops_errors.kt")
        public void testFor_loops_errors() throws Exception {
            runTest("native/native.tests/testData/codegen/controlflow/for_loops_errors.kt");
        }

        @Test
        @TestMetadata("for_loops_let_with_nullable.kt")
        public void testFor_loops_let_with_nullable() throws Exception {
            runTest("native/native.tests/testData/codegen/controlflow/for_loops_let_with_nullable.kt");
        }

        @Test
        @TestMetadata("for_loops_nested.kt")
        public void testFor_loops_nested() throws Exception {
            runTest("native/native.tests/testData/codegen/controlflow/for_loops_nested.kt");
        }

        @Test
        @TestMetadata("for_loops_overflow.kt")
        public void testFor_loops_overflow() throws Exception {
            runTest("native/native.tests/testData/codegen/controlflow/for_loops_overflow.kt");
        }

        @Test
        @TestMetadata("for_loops_types.kt")
        public void testFor_loops_types() throws Exception {
            runTest("native/native.tests/testData/codegen/controlflow/for_loops_types.kt");
        }

        @Test
        @TestMetadata("unreachable1.kt")
        public void testUnreachable1() throws Exception {
            runTest("native/native.tests/testData/codegen/controlflow/unreachable1.kt");
        }
    }

    @Nested
    @TestMetadata("native/native.tests/testData/codegen/coroutines")
    @TestDataPath("$PROJECT_ROOT")
    @UseExtTestCaseGroupProvider()
    public class Coroutines {
        @Test
        public void testAllFilesPresentInCoroutines() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("native/native.tests/testData/codegen/coroutines"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.NATIVE, true);
        }

        @Test
        @TestMetadata("anonymousObject.kt")
        public void testAnonymousObject() throws Exception {
            runTest("native/native.tests/testData/codegen/coroutines/anonymousObject.kt");
        }

        @Test
        @TestMetadata("controlFlow_chain.kt")
        public void testControlFlow_chain() throws Exception {
            runTest("native/native.tests/testData/codegen/coroutines/controlFlow_chain.kt");
        }

        @Test
        @TestMetadata("controlFlow_finally1.kt")
        public void testControlFlow_finally1() throws Exception {
            runTest("native/native.tests/testData/codegen/coroutines/controlFlow_finally1.kt");
        }

        @Test
        @TestMetadata("controlFlow_finally2.kt")
        public void testControlFlow_finally2() throws Exception {
            runTest("native/native.tests/testData/codegen/coroutines/controlFlow_finally2.kt");
        }

        @Test
        @TestMetadata("controlFlow_finally3.kt")
        public void testControlFlow_finally3() throws Exception {
            runTest("native/native.tests/testData/codegen/coroutines/controlFlow_finally3.kt");
        }

        @Test
        @TestMetadata("controlFlow_finally4.kt")
        public void testControlFlow_finally4() throws Exception {
            runTest("native/native.tests/testData/codegen/coroutines/controlFlow_finally4.kt");
        }

        @Test
        @TestMetadata("controlFlow_finally5.kt")
        public void testControlFlow_finally5() throws Exception {
            runTest("native/native.tests/testData/codegen/coroutines/controlFlow_finally5.kt");
        }

        @Test
        @TestMetadata("controlFlow_finally6.kt")
        public void testControlFlow_finally6() throws Exception {
            runTest("native/native.tests/testData/codegen/coroutines/controlFlow_finally6.kt");
        }

        @Test
        @TestMetadata("controlFlow_finally7.kt")
        public void testControlFlow_finally7() throws Exception {
            runTest("native/native.tests/testData/codegen/coroutines/controlFlow_finally7.kt");
        }

        @Test
        @TestMetadata("controlFlow_if1.kt")
        public void testControlFlow_if1() throws Exception {
            runTest("native/native.tests/testData/codegen/coroutines/controlFlow_if1.kt");
        }

        @Test
        @TestMetadata("controlFlow_if2.kt")
        public void testControlFlow_if2() throws Exception {
            runTest("native/native.tests/testData/codegen/coroutines/controlFlow_if2.kt");
        }

        @Test
        @TestMetadata("controlFlow_inline1.kt")
        public void testControlFlow_inline1() throws Exception {
            runTest("native/native.tests/testData/codegen/coroutines/controlFlow_inline1.kt");
        }

        @Test
        @TestMetadata("controlFlow_inline2.kt")
        public void testControlFlow_inline2() throws Exception {
            runTest("native/native.tests/testData/codegen/coroutines/controlFlow_inline2.kt");
        }

        @Test
        @TestMetadata("controlFlow_inline3.kt")
        public void testControlFlow_inline3() throws Exception {
            runTest("native/native.tests/testData/codegen/coroutines/controlFlow_inline3.kt");
        }

        @Test
        @TestMetadata("controlFlow_tryCatch1.kt")
        public void testControlFlow_tryCatch1() throws Exception {
            runTest("native/native.tests/testData/codegen/coroutines/controlFlow_tryCatch1.kt");
        }

        @Test
        @TestMetadata("controlFlow_tryCatch2.kt")
        public void testControlFlow_tryCatch2() throws Exception {
            runTest("native/native.tests/testData/codegen/coroutines/controlFlow_tryCatch2.kt");
        }

        @Test
        @TestMetadata("controlFlow_tryCatch3.kt")
        public void testControlFlow_tryCatch3() throws Exception {
            runTest("native/native.tests/testData/codegen/coroutines/controlFlow_tryCatch3.kt");
        }

        @Test
        @TestMetadata("controlFlow_tryCatch4.kt")
        public void testControlFlow_tryCatch4() throws Exception {
            runTest("native/native.tests/testData/codegen/coroutines/controlFlow_tryCatch4.kt");
        }

        @Test
        @TestMetadata("controlFlow_tryCatch5.kt")
        public void testControlFlow_tryCatch5() throws Exception {
            runTest("native/native.tests/testData/codegen/coroutines/controlFlow_tryCatch5.kt");
        }

        @Test
        @TestMetadata("controlFlow_while1.kt")
        public void testControlFlow_while1() throws Exception {
            runTest("native/native.tests/testData/codegen/coroutines/controlFlow_while1.kt");
        }

        @Test
        @TestMetadata("controlFlow_while2.kt")
        public void testControlFlow_while2() throws Exception {
            runTest("native/native.tests/testData/codegen/coroutines/controlFlow_while2.kt");
        }

        @Test
        @TestMetadata("coroutineContext1.kt")
        public void testCoroutineContext1() throws Exception {
            runTest("native/native.tests/testData/codegen/coroutines/coroutineContext1.kt");
        }

        @Test
        @TestMetadata("coroutineContext2.kt")
        public void testCoroutineContext2() throws Exception {
            runTest("native/native.tests/testData/codegen/coroutines/coroutineContext2.kt");
        }

        @Test
        @TestMetadata("correctOrder1.kt")
        public void testCorrectOrder1() throws Exception {
            runTest("native/native.tests/testData/codegen/coroutines/correctOrder1.kt");
        }

        @Test
        @TestMetadata("degenerate1.kt")
        public void testDegenerate1() throws Exception {
            runTest("native/native.tests/testData/codegen/coroutines/degenerate1.kt");
        }

        @Test
        @TestMetadata("degenerate2.kt")
        public void testDegenerate2() throws Exception {
            runTest("native/native.tests/testData/codegen/coroutines/degenerate2.kt");
        }

        @Test
        @TestMetadata("functionReference_eqeq_name.kt")
        public void testFunctionReference_eqeq_name() throws Exception {
            runTest("native/native.tests/testData/codegen/coroutines/functionReference_eqeq_name.kt");
        }

        @Test
        @TestMetadata("functionReference_invokeAsFunction.kt")
        public void testFunctionReference_invokeAsFunction() throws Exception {
            runTest("native/native.tests/testData/codegen/coroutines/functionReference_invokeAsFunction.kt");
        }

        @Test
        @TestMetadata("functionReference_lambdaAsSuspendLambda.kt")
        public void testFunctionReference_lambdaAsSuspendLambda() throws Exception {
            runTest("native/native.tests/testData/codegen/coroutines/functionReference_lambdaAsSuspendLambda.kt");
        }

        @Test
        @TestMetadata("functionReference_simple.kt")
        public void testFunctionReference_simple() throws Exception {
            runTest("native/native.tests/testData/codegen/coroutines/functionReference_simple.kt");
        }

        @Test
        @TestMetadata("inheritance.kt")
        public void testInheritance() throws Exception {
            runTest("native/native.tests/testData/codegen/coroutines/inheritance.kt");
        }

        @Test
        @TestMetadata("kt41394.kt")
        public void testKt41394() throws Exception {
            runTest("native/native.tests/testData/codegen/coroutines/kt41394.kt");
        }

        @Test
        @TestMetadata("returnsNothing1.kt")
        public void testReturnsNothing1() throws Exception {
            runTest("native/native.tests/testData/codegen/coroutines/returnsNothing1.kt");
        }

        @Test
        @TestMetadata("returnsUnit1.kt")
        public void testReturnsUnit1() throws Exception {
            runTest("native/native.tests/testData/codegen/coroutines/returnsUnit1.kt");
        }

        @Test
        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            runTest("native/native.tests/testData/codegen/coroutines/simple.kt");
        }

        @Test
        @TestMetadata("suspendConversion.kt")
        public void testSuspendConversion() throws Exception {
            runTest("native/native.tests/testData/codegen/coroutines/suspendConversion.kt");
        }

        @Test
        @TestMetadata("withReceiver.kt")
        public void testWithReceiver() throws Exception {
            runTest("native/native.tests/testData/codegen/coroutines/withReceiver.kt");
        }
    }
}
